
Batterie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea8  08003ea8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eb0  08003eb0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00004eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003eb8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  08003f20  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003f20  000052b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129d2  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  00017a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfe  00000000  00000000  0001b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f541  00000000  00000000  0001c06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014203  00000000  00000000  0003b5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a77  00000000  00000000  0004f7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c48  00000000  00000000  0011726c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0011beb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e44 	.word	0x08003e44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08003e44 	.word	0x08003e44

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_GPIO_Init+0x60>)
 800051e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000520:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <MX_GPIO_Init+0x60>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_GPIO_Init+0x60>)
 800052a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|LED_PLAYING_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f000 fdad 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STATUS_Pin LED_PLAYING_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|LED_PLAYING_Pin;
 8000542:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f000 fc1c 	bl	8000d98 <HAL_GPIO_Init>

}
 8000560:	bf00      	nop
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000

0800056c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <__io_putchar+0x20>)
 800057e:	f002 f939 	bl	80027f4 <HAL_UART_Transmit>

	return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200000d4 	.word	0x200000d4

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fac7 	bl	8000b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f820 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f7ff ffb4 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f9f4 	bl	800098c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("BONJOURE\r\n");
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <main+0x48>)
 80005a6:	f003 f8b9 	bl	800371c <puts>

	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80005aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f000 fd8b 	bl	80010cc <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80005b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f000 fd85 	bl	80010cc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_PLAYING_GPIO_Port, LED_PLAYING_Pin);
 80005c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f000 fd7f 	bl	80010cc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	@ 0x64
 80005d0:	f000 fae0 	bl	8000b94 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80005d4:	bf00      	nop
 80005d6:	e7ee      	b.n	80005b6 <main+0x26>
 80005d8:	08003e5c 	.word	0x08003e5c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2238      	movs	r2, #56	@ 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f976 	bl	80038dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f000 fd7d 	bl	8001100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2340      	movs	r3, #64	@ 0x40
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fe23 	bl	8001268 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000628:	f000 f82a 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2301      	movs	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f921 	bl	800188c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000650:	f000 f816 	bl	8000680 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	@ 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800066e:	f000 fa73 	bl	8000b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40001000 	.word	0x40001000

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Error_Handler+0x8>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <HAL_MspInit+0x44>)
 8000694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <HAL_MspInit+0x44>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6613      	str	r3, [r2, #96]	@ 0x60
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_MspInit+0x44>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006c2:	f000 fdc1 	bl	8001248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	@ 0x30
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <HAL_InitTick+0xc4>)
 80006e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000798 <HAL_InitTick+0xc4>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <HAL_InitTick+0xc4>)
 80006f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fa96 	bl	8001c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800070c:	f001 fa68 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8000710:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000714:	4a21      	ldr	r2, [pc, #132]	@ (800079c <HAL_InitTick+0xc8>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	0c9b      	lsrs	r3, r3, #18
 800071c:	3b01      	subs	r3, #1
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <HAL_InitTick+0xcc>)
 8000722:	4a20      	ldr	r2, [pc, #128]	@ (80007a4 <HAL_InitTick+0xd0>)
 8000724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <HAL_InitTick+0xcc>)
 8000728:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800072c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <HAL_InitTick+0xcc>)
 8000730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_InitTick+0xcc>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_InitTick+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000740:	4817      	ldr	r0, [pc, #92]	@ (80007a0 <HAL_InitTick+0xcc>)
 8000742:	f001 fce1 	bl	8002108 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800074c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000750:	2b00      	cmp	r3, #0
 8000752:	d11b      	bne.n	800078c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <HAL_InitTick+0xcc>)
 8000756:	f001 fd39 	bl	80021cc <HAL_TIM_Base_Start_IT>
 800075a:	4603      	mov	r3, r0
 800075c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000760:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000764:	2b00      	cmp	r3, #0
 8000766:	d111      	bne.n	800078c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000768:	2036      	movs	r0, #54	@ 0x36
 800076a:	f000 fb07 	bl	8000d7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d808      	bhi.n	8000786 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	2036      	movs	r0, #54	@ 0x36
 800077a:	f000 fae5 	bl	8000d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <HAL_InitTick+0xd4>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	e002      	b.n	800078c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800078c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000790:	4618      	mov	r0, r3
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	431bde83 	.word	0x431bde83
 80007a0:	20000084 	.word	0x20000084
 80007a4:	40001000 	.word	0x40001000
 80007a8:	20000004 	.word	0x20000004

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <NMI_Handler+0x4>

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000810:	4802      	ldr	r0, [pc, #8]	@ (800081c <TIM6_DAC_IRQHandler+0x10>)
 8000812:	f001 fd45 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000084 	.word	0x20000084

08000820 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e00a      	b.n	8000848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000832:	f3af 8000 	nop.w
 8000836:	4601      	mov	r1, r0
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	b2ca      	uxtb	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf0      	blt.n	8000832 <_read+0x12>
  }

  return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e009      	b.n	8000880 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fe79 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf1      	blt.n	800086c <_write+0x12>
  }
  return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_close>:

int _close(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ba:	605a      	str	r2, [r3, #4]
  return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <_isatty>:

int _isatty(int file)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f003 f824 	bl	8003978 <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	@ (8000960 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20008000 	.word	0x20008000
 800095c:	00000400 	.word	0x00000400
 8000960:	200000d0 	.word	0x200000d0
 8000964:	200002b8 	.word	0x200002b8

08000968 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	@ (8000a20 <MX_USART2_UART_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009d6:	f001 febd 	bl	8002754 <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f7ff fe4e 	bl	8000680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009e8:	f002 fcb6 	bl	8003358 <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f7ff fe45 	bl	8000680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 80009fa:	f002 fceb 	bl	80033d4 <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f7ff fe3c 	bl	8000680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_USART2_UART_Init+0x90>)
 8000a0a:	f002 fc6c 	bl	80032e6 <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f7ff fe34 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000d4 	.word	0x200000d4
 8000a20:	40004400 	.word	0x40004400

08000a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	@ 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2244      	movs	r2, #68	@ 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 ff49 	bl	80038dc <memset>
  if(uartHandle->Instance==USART2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <HAL_UART_MspInit+0xa8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d136      	bne.n	8000ac2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f961 	bl	8001d28 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff fe08 	bl	8000680 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abe:	f000 f96b 	bl	8000d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3768      	adds	r7, #104	@ 0x68
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ff46 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f002 ff3f 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fd43 	bl	8000590 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   r0, =_estack
 8000b0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b18:	08003eb8 	.word	0x08003eb8
  ldr r2, =_sbss
 8000b1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b20:	200002b8 	.word	0x200002b8

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>

08000b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f8fe 	bl	8000d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	200f      	movs	r0, #15
 8000b38:	f7ff fdcc 	bl	80006d4 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b48:	f7ff fda0 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a03      	ldr	r2, [pc, #12]	@ (8000b74 <HAL_IncTick+0x1c>)
 8000b68:	6013      	str	r3, [r2, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000168 	.word	0x20000168
 8000b78:	20000008 	.word	0x20000008

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000168 	.word	0x20000168

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d004      	beq.n	8000bb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_Delay+0x40>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb8:	bf00      	nop
 8000bba:	f7ff ffdf 	bl	8000b7c <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d8f7      	bhi.n	8000bba <HAL_Delay+0x26>
  {
  }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	@ (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	@ (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	@ 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff4c 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d56:	f7ff ff63 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f7ff ffb3 	bl	8000ccc <NVIC_EncodePriority>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff82 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff56 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000da6:	e15a      	b.n	800105e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 814c 	beq.w	8001058 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d005      	beq.n	8000dd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	f003 0201 	and.w	r2, r3, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d017      	beq.n	8000e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d123      	bne.n	8000eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	6939      	ldr	r1, [r7, #16]
 8000ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0203 	and.w	r2, r3, #3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80a6 	beq.w	8001058 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	4b5b      	ldr	r3, [pc, #364]	@ (800107c <HAL_GPIO_Init+0x2e4>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f10:	4a5a      	ldr	r2, [pc, #360]	@ (800107c <HAL_GPIO_Init+0x2e4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f18:	4b58      	ldr	r3, [pc, #352]	@ (800107c <HAL_GPIO_Init+0x2e4>)
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f24:	4a56      	ldr	r2, [pc, #344]	@ (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f4e:	d01f      	beq.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4c      	ldr	r2, [pc, #304]	@ (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d019      	beq.n	8000f8c <HAL_GPIO_Init+0x1f4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001088 <HAL_GPIO_Init+0x2f0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d013      	beq.n	8000f88 <HAL_GPIO_Init+0x1f0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a4a      	ldr	r2, [pc, #296]	@ (800108c <HAL_GPIO_Init+0x2f4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d00d      	beq.n	8000f84 <HAL_GPIO_Init+0x1ec>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a49      	ldr	r2, [pc, #292]	@ (8001090 <HAL_GPIO_Init+0x2f8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0x1e8>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a48      	ldr	r2, [pc, #288]	@ (8001094 <HAL_GPIO_Init+0x2fc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d101      	bne.n	8000f7c <HAL_GPIO_Init+0x1e4>
 8000f78:	2305      	movs	r3, #5
 8000f7a:	e00a      	b.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	e008      	b.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa2:	4937      	ldr	r1, [pc, #220]	@ (8001080 <HAL_GPIO_Init+0x2e8>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb0:	4b39      	ldr	r3, [pc, #228]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd4:	4a30      	ldr	r2, [pc, #192]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fda:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffe:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001004:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_GPIO_Init+0x300>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001052:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f ae9d 	bne.w	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48001000 	.word	0x48001000
 8001094:	48001400 	.word	0x48001400
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43d9      	mvns	r1, r3
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	400b      	ands	r3, r1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d141      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800110e:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800111a:	d131      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800111c:	4b47      	ldr	r3, [pc, #284]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001122:	4a46      	ldr	r2, [pc, #280]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	4b43      	ldr	r3, [pc, #268]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001134:	4a41      	ldr	r2, [pc, #260]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113c:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2232      	movs	r2, #50	@ 0x32
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a3f      	ldr	r2, [pc, #252]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0c9b      	lsrs	r3, r3, #18
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001152:	e002      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3b01      	subs	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115a:	4b38      	ldr	r3, [pc, #224]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001166:	d102      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f2      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800116e:	4b33      	ldr	r3, [pc, #204]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117a:	d158      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e057      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001180:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001186:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800118c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001190:	e04d      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001198:	d141      	bne.n	800121e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a6:	d131      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ae:	4a23      	ldr	r2, [pc, #140]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c0:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2232      	movs	r2, #50	@ 0x32
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011de:	e002      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f2:	d102      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f2      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001206:	d112      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e011      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800121c:	e007      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40007000 	.word	0x40007000
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001256:	6093      	str	r3, [r2, #8]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e2fe      	b.n	8001878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d075      	beq.n	8001372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001286:	4b97      	ldr	r3, [pc, #604]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001290:	4b94      	ldr	r3, [pc, #592]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3e>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d002      	beq.n	80012ac <HAL_RCC_OscConfig+0x44>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d10b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4b8d      	ldr	r3, [pc, #564]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d05b      	beq.n	8001370 <HAL_RCC_OscConfig+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d157      	bne.n	8001370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e2d9      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012cc:	d106      	bne.n	80012dc <HAL_RCC_OscConfig+0x74>
 80012ce:	4b85      	ldr	r3, [pc, #532]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a84      	ldr	r2, [pc, #528]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x98>
 80012e6:	4b7f      	ldr	r3, [pc, #508]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7e      	ldr	r2, [pc, #504]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b7c      	ldr	r3, [pc, #496]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7b      	ldr	r2, [pc, #492]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 8001300:	4b78      	ldr	r3, [pc, #480]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a77      	ldr	r2, [pc, #476]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b75      	ldr	r3, [pc, #468]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a74      	ldr	r2, [pc, #464]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fc2c 	bl	8000b7c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fc28 	bl	8000b7c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e29e      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xc0>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc18 	bl	8000b7c <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc14 	bl	8000b7c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e28a      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	4b60      	ldr	r3, [pc, #384]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0xe8>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d075      	beq.n	800146a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137e:	4b59      	ldr	r3, [pc, #356]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001388:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x136>
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d002      	beq.n	80013a4 <HAL_RCC_OscConfig+0x13c>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d11f      	bne.n	80013e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x154>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e25d      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b49      	ldr	r3, [pc, #292]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4946      	ldr	r1, [pc, #280]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d0:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f97d 	bl	80006d4 <HAL_InitTick>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d043      	beq.n	8001468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e249      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d023      	beq.n	8001434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a3c      	ldr	r2, [pc, #240]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fbc0 	bl	8000b7c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fbbc 	bl	8000b7c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e232      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	061b      	lsls	r3, r3, #24
 800142c:	492d      	ldr	r1, [pc, #180]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e01a      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2a      	ldr	r2, [pc, #168]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800143a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800143e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb9c 	bl	8000b7c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fb98 	bl	8000b7c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e20e      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1e0>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d041      	beq.n	80014fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001484:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148e:	f7ff fb75 	bl	8000b7c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001496:	f7ff fb71 	bl	8000b7c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1e7      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ef      	beq.n	8001496 <HAL_RCC_OscConfig+0x22e>
 80014b6:	e020      	b.n	80014fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fb58 	bl	8000b7c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ce:	e00d      	b.n	80014ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb54 	bl	8000b7c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d906      	bls.n	80014ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1ca      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80014ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ea      	bne.n	80014d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80a6 	beq.w	8001654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800150c:	4b84      	ldr	r3, [pc, #528]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x2b4>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x2b6>
 800151c:	2300      	movs	r3, #0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00d      	beq.n	800153e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	4a7e      	ldr	r2, [pc, #504]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	@ 0x58
 800152e:	4b7c      	ldr	r3, [pc, #496]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	4b79      	ldr	r3, [pc, #484]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800154a:	4b76      	ldr	r3, [pc, #472]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a75      	ldr	r2, [pc, #468]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb11 	bl	8000b7c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fb0d 	bl	8000b7c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e183      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001570:	4b6c      	ldr	r3, [pc, #432]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d108      	bne.n	8001596 <HAL_RCC_OscConfig+0x32e>
 8001584:	4b66      	ldr	r3, [pc, #408]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158a:	4a65      	ldr	r2, [pc, #404]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001594:	e024      	b.n	80015e0 <HAL_RCC_OscConfig+0x378>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d110      	bne.n	80015c0 <HAL_RCC_OscConfig+0x358>
 800159e:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015be:	e00f      	b.n	80015e0 <HAL_RCC_OscConfig+0x378>
 80015c0:	4b57      	ldr	r3, [pc, #348]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a56      	ldr	r2, [pc, #344]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d6:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d016      	beq.n	8001616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fac8 	bl	8000b7c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fac4 	bl	8000b7c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e138      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001606:	4b46      	ldr	r3, [pc, #280]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ed      	beq.n	80015f0 <HAL_RCC_OscConfig+0x388>
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fab1 	bl	8000b7c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff faad 	bl	8000b7c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e121      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001634:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ed      	bne.n	800161e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001642:	7ffb      	ldrb	r3, [r7, #31]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	4a34      	ldr	r2, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03c      	beq.n	80016da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800166a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800166e:	4a2c      	ldr	r2, [pc, #176]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fa80 	bl	8000b7c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001680:	f7ff fa7c 	bl	8000b7c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0f2      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ef      	beq.n	8001680 <HAL_RCC_OscConfig+0x418>
 80016a0:	e01b      	b.n	80016da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fa63 	bl	8000b7c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ba:	f7ff fa5f 	bl	8000b7c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0d5      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ef      	bne.n	80016ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80c9 	beq.w	8001876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	f000 8083 	beq.w	80017f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d15e      	bne.n	80017b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fa39 	bl	8000b7c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170c:	e00c      	b.n	8001728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fa35 	bl	8000b7c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d905      	bls.n	8001728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0ab      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
 8001720:	40021000 	.word	0x40021000
 8001724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ec      	bne.n	800170e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001734:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4b52      	ldr	r3, [pc, #328]	@ (8001884 <HAL_RCC_OscConfig+0x61c>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6a11      	ldr	r1, [r2, #32]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001744:	3a01      	subs	r2, #1
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800174e:	0212      	lsls	r2, r2, #8
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001756:	0852      	lsrs	r2, r2, #1
 8001758:	3a01      	subs	r2, #1
 800175a:	0552      	lsls	r2, r2, #21
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	3a01      	subs	r2, #1
 8001766:	0652      	lsls	r2, r2, #25
 8001768:	4311      	orrs	r1, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800176e:	06d2      	lsls	r2, r2, #27
 8001770:	430a      	orrs	r2, r1
 8001772:	4943      	ldr	r1, [pc, #268]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	4b41      	ldr	r3, [pc, #260]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001784:	4b3e      	ldr	r3, [pc, #248]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a3d      	ldr	r2, [pc, #244]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800178e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff f9f4 	bl	8000b7c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff f9f0 	bl	8000b7c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e066      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x530>
 80017b6:	e05e      	b.n	8001876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a30      	ldr	r2, [pc, #192]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9da 	bl	8000b7c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f9d6 	bl	8000b7c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04c      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017ea:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	4924      	ldr	r1, [pc, #144]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <HAL_RCC_OscConfig+0x620>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	60cb      	str	r3, [r1, #12]
 80017f6:	e03e      	b.n	8001876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e039      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	d12c      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	3b01      	subs	r3, #1
 8001824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d123      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d11b      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d113      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	019f800c 	.word	0x019f800c
 8001888:	feeefffc 	.word	0xfeeefffc

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e11e      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b91      	ldr	r3, [pc, #580]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b8e      	ldr	r3, [pc, #568]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 020f 	bic.w	r2, r3, #15
 80018ba:	498c      	ldr	r1, [pc, #560]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b8a      	ldr	r3, [pc, #552]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e106      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d073      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d129      	bne.n	800193c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	4b81      	ldr	r3, [pc, #516]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0f4      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018f8:	f000 f9d0 	bl	8001c9c <RCC_GetSysClockFreqFromPLLSource>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a7c      	ldr	r2, [pc, #496]	@ (8001af4 <HAL_RCC_ClockConfig+0x268>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d93f      	bls.n	8001986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001906:	4b7a      	ldr	r3, [pc, #488]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800191a:	2b00      	cmp	r3, #0
 800191c:	d033      	beq.n	8001986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d12f      	bne.n	8001986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800192e:	4a70      	ldr	r2, [pc, #448]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e024      	b.n	8001986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d107      	bne.n	8001954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001944:	4b6a      	ldr	r3, [pc, #424]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0c6      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0be      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001964:	f000 f8ce 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4a61      	ldr	r2, [pc, #388]	@ (8001af4 <HAL_RCC_ClockConfig+0x268>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d909      	bls.n	8001986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001972:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800197a:	4a5d      	ldr	r2, [pc, #372]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b5a      	ldr	r3, [pc, #360]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4957      	ldr	r1, [pc, #348]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001998:	f7ff f8f0 	bl	8000b7c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff f8ec 	bl	8000b7c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e095      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b4e      	ldr	r3, [pc, #312]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a42      	ldr	r2, [pc, #264]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019f8:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a00:	4a3b      	ldr	r2, [pc, #236]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4936      	ldr	r1, [pc, #216]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b80      	cmp	r3, #128	@ 0x80
 8001a20:	d105      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4a32      	ldr	r2, [pc, #200]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d21d      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 020f 	bic.w	r2, r3, #15
 8001a44:	4929      	ldr	r1, [pc, #164]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f896 	bl	8000b7c <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f892 	bl	8000b7c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e03b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ed      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4917      	ldr	r1, [pc, #92]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490f      	ldr	r1, [pc, #60]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ab6:	f000 f825 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <HAL_RCC_ClockConfig+0x26c>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_RCC_ClockConfig+0x270>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_RCC_ClockConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fdfa 	bl	80006d4 <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	04c4b400 	.word	0x04c4b400
 8001af8:	08003e68 	.word	0x08003e68
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	e047      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b1c:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b28:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e03e      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d136      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10c      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b58:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	4a16      	ldr	r2, [pc, #88]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b62:	68d2      	ldr	r2, [r2, #12]
 8001b64:	0a12      	lsrs	r2, r2, #8
 8001b66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
      break;
 8001b70:	e00c      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	0a12      	lsrs	r2, r2, #8
 8001b80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
      break;
 8001b8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0e5b      	lsrs	r3, r3, #25
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e001      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bac:	693b      	ldr	r3, [r7, #16]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	00f42400 	.word	0x00f42400
 8001bc4:	007a1200 	.word	0x007a1200

08001bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000000 	.word	0x20000000

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001be4:	f7ff fff0 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4904      	ldr	r1, [pc, #16]	@ (8001c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003e78 	.word	0x08003e78

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c10:	f7ff ffda 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4904      	ldr	r1, [pc, #16]	@ (8001c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08003e78 	.word	0x08003e78

08001c38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	220f      	movs	r2, #15
 8001c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_RCC_GetClockConfig+0x60>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 020f 	and.w	r2, r3, #15
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40022000 	.word	0x40022000

08001c9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d10c      	bne.n	8001cda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc0:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cca:	68d2      	ldr	r2, [r2, #12]
 8001ccc:	0a12      	lsrs	r2, r2, #8
 8001cce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
    break;
 8001cd8:	e00c      	b.n	8001cf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ce4:	68d2      	ldr	r2, [r2, #12]
 8001ce6:	0a12      	lsrs	r2, r2, #8
 8001ce8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    break;
 8001cf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0e5b      	lsrs	r3, r3, #25
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d0e:	687b      	ldr	r3, [r7, #4]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	00f42400 	.word	0x00f42400

08001d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d30:	2300      	movs	r3, #0
 8001d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d34:	2300      	movs	r3, #0
 8001d36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8098 	beq.w	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d62:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a39      	ldr	r2, [pc, #228]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe fefd 	bl	8000b7c <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d84:	e009      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d86:	f7fe fef9 	bl	8000b7c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d902      	bls.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	74fb      	strb	r3, [r7, #19]
        break;
 8001d98:	e005      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d9a:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ef      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001da6:	7cfb      	ldrb	r3, [r7, #19]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d159      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dac:	4b2a      	ldr	r3, [pc, #168]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01e      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d019      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dc8:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dd4:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dda:	4a1f      	ldr	r2, [pc, #124]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	4a1b      	ldr	r2, [pc, #108]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001df4:	4a18      	ldr	r2, [pc, #96]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d016      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe feb9 	bl	8000b7c <HAL_GetTick>
 8001e0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe feb5 	bl	8000b7c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d902      	bls.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	74fb      	strb	r3, [r7, #19]
            break;
 8001e24:	e006      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ec      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	4903      	ldr	r1, [pc, #12]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e50:	e008      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	74bb      	strb	r3, [r7, #18]
 8001e56:	e005      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e64:	7c7b      	ldrb	r3, [r7, #17]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4ba6      	ldr	r3, [pc, #664]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	4aa5      	ldr	r2, [pc, #660]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e82:	4ba0      	ldr	r3, [pc, #640]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e88:	f023 0203 	bic.w	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	499c      	ldr	r1, [pc, #624]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ea4:	4b97      	ldr	r3, [pc, #604]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eaa:	f023 020c 	bic.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4994      	ldr	r1, [pc, #592]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ec6:	4b8f      	ldr	r3, [pc, #572]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ecc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	498b      	ldr	r1, [pc, #556]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ee8:	4b86      	ldr	r3, [pc, #536]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4983      	ldr	r1, [pc, #524]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	497a      	ldr	r1, [pc, #488]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f2c:	4b75      	ldr	r3, [pc, #468]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	4972      	ldr	r1, [pc, #456]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	4969      	ldr	r1, [pc, #420]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f70:	4b64      	ldr	r3, [pc, #400]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4961      	ldr	r1, [pc, #388]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f92:	4b5c      	ldr	r3, [pc, #368]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	4958      	ldr	r1, [pc, #352]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb4:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	4950      	ldr	r1, [pc, #320]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fde:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d015      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fec:	4b45      	ldr	r3, [pc, #276]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	4942      	ldr	r1, [pc, #264]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800200a:	d105      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800200c:	4b3d      	ldr	r3, [pc, #244]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a3c      	ldr	r2, [pc, #240]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002016:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002024:	4b37      	ldr	r3, [pc, #220]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4934      	ldr	r1, [pc, #208]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002042:	d105      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002044:	4b2f      	ldr	r3, [pc, #188]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a2e      	ldr	r2, [pc, #184]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800205c:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206a:	4926      	ldr	r1, [pc, #152]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800207a:	d105      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207c:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a20      	ldr	r2, [pc, #128]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002086:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a2:	4918      	ldr	r1, [pc, #96]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020da:	490a      	ldr	r1, [pc, #40]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e049      	b.n	80021ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f841 	bl	80021b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 fa22 	bl	8002590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d001      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e04a      	b.n	800227a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <HAL_TIM_Base_Start_IT+0xbc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220e:	d013      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1d      	ldr	r2, [pc, #116]	@ (800228c <HAL_TIM_Base_Start_IT+0xc0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_TIM_Base_Start_IT+0xc4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <HAL_TIM_Base_Start_IT+0xc8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_TIM_Base_Start_IT+0xcc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d115      	bne.n	8002264 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	4b17      	ldr	r3, [pc, #92]	@ (800229c <HAL_TIM_Base_Start_IT+0xd0>)
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b06      	cmp	r3, #6
 8002248:	d015      	beq.n	8002276 <HAL_TIM_Base_Start_IT+0xaa>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002250:	d011      	beq.n	8002276 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	e008      	b.n	8002276 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e000      	b.n	8002278 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800
 8002294:	40013400 	.word	0x40013400
 8002298:	40014000 	.word	0x40014000
 800229c:	00010007 	.word	0x00010007

080022a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d020      	beq.n	8002304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0202 	mvn.w	r2, #2
 80022d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f931 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f923 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f934 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d020      	beq.n	8002350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0204 	mvn.w	r2, #4
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f90b 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8fd 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f90e 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d020      	beq.n	800239c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0208 	mvn.w	r2, #8
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8e5 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8d7 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f8e8 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d020      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01b      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0210 	mvn.w	r2, #16
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2208      	movs	r2, #8
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8bf 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8b1 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f8c2 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00c      	beq.n	800240c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0201 	mvn.w	r2, #1
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe f928 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f951 	bl	80026dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f949 	bl	80026f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f87c 	bl	800257a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0220 	mvn.w	r2, #32
 800249e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f911 	bl	80026c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00c      	beq.n	80024ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80024c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f91d 	bl	8002704 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f915 	bl	8002718 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f90d 	bl	800272c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00c      	beq.n	8002536 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f905 	bl	8002740 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a42      	ldr	r2, [pc, #264]	@ (80026ac <TIM_Base_SetConfig+0x11c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00f      	beq.n	80025c8 <TIM_Base_SetConfig+0x38>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ae:	d00b      	beq.n	80025c8 <TIM_Base_SetConfig+0x38>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3f      	ldr	r2, [pc, #252]	@ (80026b0 <TIM_Base_SetConfig+0x120>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d007      	beq.n	80025c8 <TIM_Base_SetConfig+0x38>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3e      	ldr	r2, [pc, #248]	@ (80026b4 <TIM_Base_SetConfig+0x124>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_Base_SetConfig+0x38>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3d      	ldr	r2, [pc, #244]	@ (80026b8 <TIM_Base_SetConfig+0x128>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d108      	bne.n	80025da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a33      	ldr	r2, [pc, #204]	@ (80026ac <TIM_Base_SetConfig+0x11c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01b      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e8:	d017      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a30      	ldr	r2, [pc, #192]	@ (80026b0 <TIM_Base_SetConfig+0x120>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2f      	ldr	r2, [pc, #188]	@ (80026b4 <TIM_Base_SetConfig+0x124>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00f      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2e      	ldr	r2, [pc, #184]	@ (80026b8 <TIM_Base_SetConfig+0x128>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00b      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2d      	ldr	r2, [pc, #180]	@ (80026bc <TIM_Base_SetConfig+0x12c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2c      	ldr	r2, [pc, #176]	@ (80026c0 <TIM_Base_SetConfig+0x130>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d003      	beq.n	800261a <TIM_Base_SetConfig+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2b      	ldr	r2, [pc, #172]	@ (80026c4 <TIM_Base_SetConfig+0x134>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d108      	bne.n	800262c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a16      	ldr	r2, [pc, #88]	@ (80026ac <TIM_Base_SetConfig+0x11c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00f      	beq.n	8002678 <TIM_Base_SetConfig+0xe8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <TIM_Base_SetConfig+0x128>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0xe8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <TIM_Base_SetConfig+0x12c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0xe8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a15      	ldr	r2, [pc, #84]	@ (80026c0 <TIM_Base_SetConfig+0x130>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0xe8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <TIM_Base_SetConfig+0x134>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f023 0201 	bic.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	611a      	str	r2, [r3, #16]
  }
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800
 80026b8:	40013400 	.word	0x40013400
 80026bc:	40014000 	.word	0x40014000
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800

080026c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e042      	b.n	80027ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fe f953 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2224      	movs	r2, #36	@ 0x24
 8002782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb82 	bl	8002ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8b3 	bl	8002910 <UART_SetConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01b      	b.n	80027ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fc01 	bl	8002fec <UART_CheckIdleState>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	@ 0x28
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280a:	2b20      	cmp	r3, #32
 800280c:	d17b      	bne.n	8002906 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Transmit+0x26>
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e074      	b.n	8002908 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2221      	movs	r2, #33	@ 0x21
 800282a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282e:	f7fe f9a5 	bl	8000b7c <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284c:	d108      	bne.n	8002860 <HAL_UART_Transmit+0x6c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e003      	b.n	8002868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002868:	e030      	b.n	80028cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	@ 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fc63 	bl	8003140 <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03d      	b.n	8002908 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3302      	adds	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e007      	b.n	80028ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	3301      	adds	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1c8      	bne.n	800286a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	2140      	movs	r1, #64	@ 0x40
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fc2c 	bl	8003140 <UART_WaitOnFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e006      	b.n	8002908 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b08c      	sub	sp, #48	@ 0x30
 8002916:	af00      	add	r7, sp, #0
 8002918:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4313      	orrs	r3, r2
 8002936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4bab      	ldr	r3, [pc, #684]	@ (8002bec <UART_SetConfig+0x2dc>)
 8002940:	4013      	ands	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002948:	430b      	orrs	r3, r1
 800294a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4aa0      	ldr	r2, [pc, #640]	@ (8002bf0 <UART_SetConfig+0x2e0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002978:	4313      	orrs	r3, r2
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002986:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	f023 010f 	bic.w	r1, r3, #15
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a91      	ldr	r2, [pc, #580]	@ (8002bf4 <UART_SetConfig+0x2e4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d125      	bne.n	8002a00 <UART_SetConfig+0xf0>
 80029b4:	4b90      	ldr	r3, [pc, #576]	@ (8002bf8 <UART_SetConfig+0x2e8>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d81a      	bhi.n	80029f8 <UART_SetConfig+0xe8>
 80029c2:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <UART_SetConfig+0xb8>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e9 	.word	0x080029e9
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029f1 	.word	0x080029f1
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029de:	e0d6      	b.n	8002b8e <UART_SetConfig+0x27e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029e6:	e0d2      	b.n	8002b8e <UART_SetConfig+0x27e>
 80029e8:	2304      	movs	r3, #4
 80029ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029ee:	e0ce      	b.n	8002b8e <UART_SetConfig+0x27e>
 80029f0:	2308      	movs	r3, #8
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029f6:	e0ca      	b.n	8002b8e <UART_SetConfig+0x27e>
 80029f8:	2310      	movs	r3, #16
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029fe:	e0c6      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7d      	ldr	r2, [pc, #500]	@ (8002bfc <UART_SetConfig+0x2ec>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d138      	bne.n	8002a7c <UART_SetConfig+0x16c>
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <UART_SetConfig+0x2e8>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d82d      	bhi.n	8002a74 <UART_SetConfig+0x164>
 8002a18:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <UART_SetConfig+0x110>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a55 	.word	0x08002a55
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a75 	.word	0x08002a75
 8002a2c:	08002a75 	.word	0x08002a75
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002a75 	.word	0x08002a75
 8002a3c:	08002a75 	.word	0x08002a75
 8002a40:	08002a5d 	.word	0x08002a5d
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a75 	.word	0x08002a75
 8002a4c:	08002a75 	.word	0x08002a75
 8002a50:	08002a6d 	.word	0x08002a6d
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a5a:	e098      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a62:	e094      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002a64:	2304      	movs	r3, #4
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a6a:	e090      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a72:	e08c      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002a74:	2310      	movs	r3, #16
 8002a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a7a:	e088      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5f      	ldr	r2, [pc, #380]	@ (8002c00 <UART_SetConfig+0x2f0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d125      	bne.n	8002ad2 <UART_SetConfig+0x1c2>
 8002a86:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf8 <UART_SetConfig+0x2e8>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a90:	2b30      	cmp	r3, #48	@ 0x30
 8002a92:	d016      	beq.n	8002ac2 <UART_SetConfig+0x1b2>
 8002a94:	2b30      	cmp	r3, #48	@ 0x30
 8002a96:	d818      	bhi.n	8002aca <UART_SetConfig+0x1ba>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d00a      	beq.n	8002ab2 <UART_SetConfig+0x1a2>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d814      	bhi.n	8002aca <UART_SetConfig+0x1ba>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <UART_SetConfig+0x19a>
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d008      	beq.n	8002aba <UART_SetConfig+0x1aa>
 8002aa8:	e00f      	b.n	8002aca <UART_SetConfig+0x1ba>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ab0:	e06d      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ab8:	e069      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002aba:	2304      	movs	r3, #4
 8002abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ac0:	e065      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ac8:	e061      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002aca:	2310      	movs	r3, #16
 8002acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad0:	e05d      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8002c04 <UART_SetConfig+0x2f4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d125      	bne.n	8002b28 <UART_SetConfig+0x218>
 8002adc:	4b46      	ldr	r3, [pc, #280]	@ (8002bf8 <UART_SetConfig+0x2e8>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ae8:	d016      	beq.n	8002b18 <UART_SetConfig+0x208>
 8002aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002aec:	d818      	bhi.n	8002b20 <UART_SetConfig+0x210>
 8002aee:	2b80      	cmp	r3, #128	@ 0x80
 8002af0:	d00a      	beq.n	8002b08 <UART_SetConfig+0x1f8>
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	d814      	bhi.n	8002b20 <UART_SetConfig+0x210>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <UART_SetConfig+0x1f0>
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d008      	beq.n	8002b10 <UART_SetConfig+0x200>
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x210>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b06:	e042      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b0e:	e03e      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b16:	e03a      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b18:	2308      	movs	r3, #8
 8002b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b1e:	e036      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b20:	2310      	movs	r3, #16
 8002b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b26:	e032      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a30      	ldr	r2, [pc, #192]	@ (8002bf0 <UART_SetConfig+0x2e0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12a      	bne.n	8002b88 <UART_SetConfig+0x278>
 8002b32:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <UART_SetConfig+0x2e8>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b40:	d01a      	beq.n	8002b78 <UART_SetConfig+0x268>
 8002b42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b46:	d81b      	bhi.n	8002b80 <UART_SetConfig+0x270>
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b4c:	d00c      	beq.n	8002b68 <UART_SetConfig+0x258>
 8002b4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b52:	d815      	bhi.n	8002b80 <UART_SetConfig+0x270>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <UART_SetConfig+0x250>
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5c:	d008      	beq.n	8002b70 <UART_SetConfig+0x260>
 8002b5e:	e00f      	b.n	8002b80 <UART_SetConfig+0x270>
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b66:	e012      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b6e:	e00e      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b70:	2304      	movs	r3, #4
 8002b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b76:	e00a      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b7e:	e006      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b80:	2310      	movs	r3, #16
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b86:	e002      	b.n	8002b8e <UART_SetConfig+0x27e>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <UART_SetConfig+0x2e0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f040 80a8 	bne.w	8002cea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d834      	bhi.n	8002c0c <UART_SetConfig+0x2fc>
 8002ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba8 <UART_SetConfig+0x298>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bcd 	.word	0x08002bcd
 8002bac:	08002c0d 	.word	0x08002c0d
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002c0d 	.word	0x08002c0d
 8002bb8:	08002bdb 	.word	0x08002bdb
 8002bbc:	08002c0d 	.word	0x08002c0d
 8002bc0:	08002c0d 	.word	0x08002c0d
 8002bc4:	08002c0d 	.word	0x08002c0d
 8002bc8:	08002be3 	.word	0x08002be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bcc:	f7ff f808 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bd2:	e021      	b.n	8002c18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <UART_SetConfig+0x2f8>)
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bd8:	e01e      	b.n	8002c18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bda:	f7fe ff93 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8002bde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002be0:	e01a      	b.n	8002c18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002be8:	e016      	b.n	8002c18 <UART_SetConfig+0x308>
 8002bea:	bf00      	nop
 8002bec:	cfff69f3 	.word	0xcfff69f3
 8002bf0:	40008000 	.word	0x40008000
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40004800 	.word	0x40004800
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 812a 	beq.w	8002e74 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	4a9e      	ldr	r2, [pc, #632]	@ (8002ea0 <UART_SetConfig+0x590>)
 8002c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d305      	bcc.n	8002c50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d903      	bls.n	8002c58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c56:	e10d      	b.n	8002e74 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	60fa      	str	r2, [r7, #12]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea0 <UART_SetConfig+0x590>)
 8002c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c7a:	f7fd facd 	bl	8000218 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	020b      	lsls	r3, r1, #8
 8002c90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c94:	0202      	lsls	r2, r0, #8
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	6849      	ldr	r1, [r1, #4]
 8002c9a:	0849      	lsrs	r1, r1, #1
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	eb12 0804 	adds.w	r8, r2, r4
 8002ca6:	eb43 0905 	adc.w	r9, r3, r5
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	4693      	mov	fp, r2
 8002cb4:	4652      	mov	r2, sl
 8002cb6:	465b      	mov	r3, fp
 8002cb8:	4640      	mov	r0, r8
 8002cba:	4649      	mov	r1, r9
 8002cbc:	f7fd faac 	bl	8000218 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cce:	d308      	bcc.n	8002ce2 <UART_SetConfig+0x3d2>
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cd6:	d204      	bcs.n	8002ce2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	e0c8      	b.n	8002e74 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ce8:	e0c4      	b.n	8002e74 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf2:	d167      	bne.n	8002dc4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d828      	bhi.n	8002d4e <UART_SetConfig+0x43e>
 8002cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0x3f4>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d4f 	.word	0x08002d4f
 8002d14:	08002d3f 	.word	0x08002d3f
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d47 	.word	0x08002d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7fe ff5a 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d2e:	e014      	b.n	8002d5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7fe ff6c 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d36:	e010      	b.n	8002d5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea4 <UART_SetConfig+0x594>)
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d3c:	e00d      	b.n	8002d5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3e:	f7fe fee1 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8002d42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d44:	e009      	b.n	8002d5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d4c:	e005      	b.n	8002d5a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8089 	beq.w	8002e74 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea0 <UART_SetConfig+0x590>)
 8002d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	441a      	add	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	d916      	bls.n	8002dbc <UART_SetConfig+0x4ac>
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d94:	d212      	bcs.n	8002dbc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f023 030f 	bic.w	r3, r3, #15
 8002d9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	8bfb      	ldrh	r3, [r7, #30]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	8bfa      	ldrh	r2, [r7, #30]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e05b      	b.n	8002e74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002dc2:	e057      	b.n	8002e74 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d828      	bhi.n	8002e1e <UART_SetConfig+0x50e>
 8002dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <UART_SetConfig+0x4c4>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002e09 	.word	0x08002e09
 8002de0:	08002e1f 	.word	0x08002e1f
 8002de4:	08002e0f 	.word	0x08002e0f
 8002de8:	08002e1f 	.word	0x08002e1f
 8002dec:	08002e1f 	.word	0x08002e1f
 8002df0:	08002e1f 	.word	0x08002e1f
 8002df4:	08002e17 	.word	0x08002e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df8:	f7fe fef2 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dfe:	e014      	b.n	8002e2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7fe ff04 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 8002e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e06:	e010      	b.n	8002e2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b26      	ldr	r3, [pc, #152]	@ (8002ea4 <UART_SetConfig+0x594>)
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e0c:	e00d      	b.n	8002e2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7fe fe79 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8002e12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e14:	e009      	b.n	8002e2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e1c:	e005      	b.n	8002e2a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e28:	bf00      	nop
    }

    if (pclk != 0U)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d021      	beq.n	8002e74 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea0 <UART_SetConfig+0x590>)
 8002e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	441a      	add	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d909      	bls.n	8002e6e <UART_SetConfig+0x55e>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e60:	d205      	bcs.n	8002e6e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e002      	b.n	8002e74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3730      	adds	r7, #48	@ 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	08003e80 	.word	0x08003e80
 8002ea4:	00f42400 	.word	0x00f42400

08002ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01a      	beq.n	8002fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa6:	d10a      	bne.n	8002fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b098      	sub	sp, #96	@ 0x60
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ffc:	f7fd fdbe 	bl	8000b7c <HAL_GetTick>
 8003000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b08      	cmp	r3, #8
 800300e:	d12f      	bne.n	8003070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f88e 	bl	8003140 <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d022      	beq.n	8003070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800303e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800304e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e063      	b.n	8003138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d149      	bne.n	8003112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003086:	2200      	movs	r2, #0
 8003088:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f857 	bl	8003140 <UART_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03c      	beq.n	8003112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	623b      	str	r3, [r7, #32]
   return(result);
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e6      	bne.n	8003098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3308      	adds	r3, #8
 80030d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ea:	61fa      	str	r2, [r7, #28]
 80030ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	617b      	str	r3, [r7, #20]
   return(result);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e012      	b.n	8003138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3758      	adds	r7, #88	@ 0x58
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003150:	e04f      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d04b      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fd fd0f 	bl	8000b7c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <UART_WaitOnFlagUntilTimeout+0x30>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e04e      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d037      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	d034      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b40      	cmp	r3, #64	@ 0x40
 800318c:	d031      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d110      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2208      	movs	r2, #8
 80031a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f838 	bl	800321a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2208      	movs	r2, #8
 80031ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e029      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031cc:	d111      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f81e 	bl	800321a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0a0      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800321a:	b480      	push	{r7}
 800321c:	b095      	sub	sp, #84	@ 0x54
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003240:	643b      	str	r3, [r7, #64]	@ 0x40
 8003242:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e6      	bne.n	8003222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	61fb      	str	r3, [r7, #28]
   return(result);
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3308      	adds	r3, #8
 8003276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003278:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800327e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e3      	bne.n	8003254 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d118      	bne.n	80032c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f023 0310 	bic.w	r3, r3, #16
 80032a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	613b      	str	r3, [r7, #16]
   return(result);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e6      	bne.n	8003294 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032da:	bf00      	nop
 80032dc:	3754      	adds	r7, #84	@ 0x54
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_UARTEx_DisableFifoMode+0x16>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e027      	b.n	800334c <HAL_UARTEx_DisableFifoMode+0x66>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	@ 0x24
 8003308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800332a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800336c:	2302      	movs	r3, #2
 800336e:	e02d      	b.n	80033cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	@ 0x24
 800337c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f84f 	bl	8003450 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e02d      	b.n	8003448 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	@ 0x24
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f811 	bl	8003450 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800345c:	2b00      	cmp	r3, #0
 800345e:	d108      	bne.n	8003472 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003470:	e031      	b.n	80034d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003472:	2308      	movs	r3, #8
 8003474:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003476:	2308      	movs	r3, #8
 8003478:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	0e5b      	lsrs	r3, r3, #25
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	0f5b      	lsrs	r3, r3, #29
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800349a:	7bbb      	ldrb	r3, [r7, #14]
 800349c:	7b3a      	ldrb	r2, [r7, #12]
 800349e:	4911      	ldr	r1, [pc, #68]	@ (80034e4 <UARTEx_SetNbDataToProcess+0x94>)
 80034a0:	5c8a      	ldrb	r2, [r1, r2]
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80034a6:	7b3a      	ldrb	r2, [r7, #12]
 80034a8:	490f      	ldr	r1, [pc, #60]	@ (80034e8 <UARTEx_SetNbDataToProcess+0x98>)
 80034aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	7b7a      	ldrb	r2, [r7, #13]
 80034bc:	4909      	ldr	r1, [pc, #36]	@ (80034e4 <UARTEx_SetNbDataToProcess+0x94>)
 80034be:	5c8a      	ldrb	r2, [r1, r2]
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80034c4:	7b7a      	ldrb	r2, [r7, #13]
 80034c6:	4908      	ldr	r1, [pc, #32]	@ (80034e8 <UARTEx_SetNbDataToProcess+0x98>)
 80034c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	08003e98 	.word	0x08003e98
 80034e8:	08003ea0 	.word	0x08003ea0

080034ec <std>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b510      	push	{r4, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	e9c0 3300 	strd	r3, r3, [r0]
 80034f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034fa:	6083      	str	r3, [r0, #8]
 80034fc:	8181      	strh	r1, [r0, #12]
 80034fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003500:	81c2      	strh	r2, [r0, #14]
 8003502:	6183      	str	r3, [r0, #24]
 8003504:	4619      	mov	r1, r3
 8003506:	2208      	movs	r2, #8
 8003508:	305c      	adds	r0, #92	@ 0x5c
 800350a:	f000 f9e7 	bl	80038dc <memset>
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <std+0x58>)
 8003510:	6263      	str	r3, [r4, #36]	@ 0x24
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <std+0x5c>)
 8003514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <std+0x60>)
 8003518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <std+0x64>)
 800351c:	6323      	str	r3, [r4, #48]	@ 0x30
 800351e:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <std+0x68>)
 8003520:	6224      	str	r4, [r4, #32]
 8003522:	429c      	cmp	r4, r3
 8003524:	d006      	beq.n	8003534 <std+0x48>
 8003526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800352a:	4294      	cmp	r4, r2
 800352c:	d002      	beq.n	8003534 <std+0x48>
 800352e:	33d0      	adds	r3, #208	@ 0xd0
 8003530:	429c      	cmp	r4, r3
 8003532:	d105      	bne.n	8003540 <std+0x54>
 8003534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	f000 ba46 	b.w	80039cc <__retarget_lock_init_recursive>
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	0800372d 	.word	0x0800372d
 8003548:	0800374f 	.word	0x0800374f
 800354c:	08003787 	.word	0x08003787
 8003550:	080037ab 	.word	0x080037ab
 8003554:	2000016c 	.word	0x2000016c

08003558 <stdio_exit_handler>:
 8003558:	4a02      	ldr	r2, [pc, #8]	@ (8003564 <stdio_exit_handler+0xc>)
 800355a:	4903      	ldr	r1, [pc, #12]	@ (8003568 <stdio_exit_handler+0x10>)
 800355c:	4803      	ldr	r0, [pc, #12]	@ (800356c <stdio_exit_handler+0x14>)
 800355e:	f000 b869 	b.w	8003634 <_fwalk_sglue>
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c
 8003568:	08003ccd 	.word	0x08003ccd
 800356c:	2000001c 	.word	0x2000001c

08003570 <cleanup_stdio>:
 8003570:	6841      	ldr	r1, [r0, #4]
 8003572:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <cleanup_stdio+0x34>)
 8003574:	4299      	cmp	r1, r3
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	d001      	beq.n	8003580 <cleanup_stdio+0x10>
 800357c:	f000 fba6 	bl	8003ccc <_fflush_r>
 8003580:	68a1      	ldr	r1, [r4, #8]
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <cleanup_stdio+0x38>)
 8003584:	4299      	cmp	r1, r3
 8003586:	d002      	beq.n	800358e <cleanup_stdio+0x1e>
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fb9f 	bl	8003ccc <_fflush_r>
 800358e:	68e1      	ldr	r1, [r4, #12]
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <cleanup_stdio+0x3c>)
 8003592:	4299      	cmp	r1, r3
 8003594:	d004      	beq.n	80035a0 <cleanup_stdio+0x30>
 8003596:	4620      	mov	r0, r4
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f000 bb96 	b.w	8003ccc <_fflush_r>
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	bf00      	nop
 80035a4:	2000016c 	.word	0x2000016c
 80035a8:	200001d4 	.word	0x200001d4
 80035ac:	2000023c 	.word	0x2000023c

080035b0 <global_stdio_init.part.0>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <global_stdio_init.part.0+0x30>)
 80035b4:	4c0b      	ldr	r4, [pc, #44]	@ (80035e4 <global_stdio_init.part.0+0x34>)
 80035b6:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <global_stdio_init.part.0+0x38>)
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	4620      	mov	r0, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	2104      	movs	r1, #4
 80035c0:	f7ff ff94 	bl	80034ec <std>
 80035c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035c8:	2201      	movs	r2, #1
 80035ca:	2109      	movs	r1, #9
 80035cc:	f7ff ff8e 	bl	80034ec <std>
 80035d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035d4:	2202      	movs	r2, #2
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035da:	2112      	movs	r1, #18
 80035dc:	f7ff bf86 	b.w	80034ec <std>
 80035e0:	200002a4 	.word	0x200002a4
 80035e4:	2000016c 	.word	0x2000016c
 80035e8:	08003559 	.word	0x08003559

080035ec <__sfp_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	@ (80035f4 <__sfp_lock_acquire+0x8>)
 80035ee:	f000 b9ee 	b.w	80039ce <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	200002ad 	.word	0x200002ad

080035f8 <__sfp_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	@ (8003600 <__sfp_lock_release+0x8>)
 80035fa:	f000 b9e9 	b.w	80039d0 <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	200002ad 	.word	0x200002ad

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sfp_lock_acquire>
 800360c:	6a23      	ldr	r3, [r4, #32]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sfp_lock_release>
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <__sinit+0x28>)
 800361a:	6223      	str	r3, [r4, #32]
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <__sinit+0x2c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f5      	bne.n	8003610 <__sinit+0xc>
 8003624:	f7ff ffc4 	bl	80035b0 <global_stdio_init.part.0>
 8003628:	e7f2      	b.n	8003610 <__sinit+0xc>
 800362a:	bf00      	nop
 800362c:	08003571 	.word	0x08003571
 8003630:	200002a4 	.word	0x200002a4

08003634 <_fwalk_sglue>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	4607      	mov	r7, r0
 800363a:	4688      	mov	r8, r1
 800363c:	4614      	mov	r4, r2
 800363e:	2600      	movs	r6, #0
 8003640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003644:	f1b9 0901 	subs.w	r9, r9, #1
 8003648:	d505      	bpl.n	8003656 <_fwalk_sglue+0x22>
 800364a:	6824      	ldr	r4, [r4, #0]
 800364c:	2c00      	cmp	r4, #0
 800364e:	d1f7      	bne.n	8003640 <_fwalk_sglue+0xc>
 8003650:	4630      	mov	r0, r6
 8003652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d907      	bls.n	800366c <_fwalk_sglue+0x38>
 800365c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003660:	3301      	adds	r3, #1
 8003662:	d003      	beq.n	800366c <_fwalk_sglue+0x38>
 8003664:	4629      	mov	r1, r5
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	4306      	orrs	r6, r0
 800366c:	3568      	adds	r5, #104	@ 0x68
 800366e:	e7e9      	b.n	8003644 <_fwalk_sglue+0x10>

08003670 <_puts_r>:
 8003670:	6a03      	ldr	r3, [r0, #32]
 8003672:	b570      	push	{r4, r5, r6, lr}
 8003674:	6884      	ldr	r4, [r0, #8]
 8003676:	4605      	mov	r5, r0
 8003678:	460e      	mov	r6, r1
 800367a:	b90b      	cbnz	r3, 8003680 <_puts_r+0x10>
 800367c:	f7ff ffc2 	bl	8003604 <__sinit>
 8003680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003682:	07db      	lsls	r3, r3, #31
 8003684:	d405      	bmi.n	8003692 <_puts_r+0x22>
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	0598      	lsls	r0, r3, #22
 800368a:	d402      	bmi.n	8003692 <_puts_r+0x22>
 800368c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800368e:	f000 f99e 	bl	80039ce <__retarget_lock_acquire_recursive>
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	0719      	lsls	r1, r3, #28
 8003696:	d502      	bpl.n	800369e <_puts_r+0x2e>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d135      	bne.n	800370a <_puts_r+0x9a>
 800369e:	4621      	mov	r1, r4
 80036a0:	4628      	mov	r0, r5
 80036a2:	f000 f8c5 	bl	8003830 <__swsetup_r>
 80036a6:	b380      	cbz	r0, 800370a <_puts_r+0x9a>
 80036a8:	f04f 35ff 	mov.w	r5, #4294967295
 80036ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ae:	07da      	lsls	r2, r3, #31
 80036b0:	d405      	bmi.n	80036be <_puts_r+0x4e>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	059b      	lsls	r3, r3, #22
 80036b6:	d402      	bmi.n	80036be <_puts_r+0x4e>
 80036b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ba:	f000 f989 	bl	80039d0 <__retarget_lock_release_recursive>
 80036be:	4628      	mov	r0, r5
 80036c0:	bd70      	pop	{r4, r5, r6, pc}
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da04      	bge.n	80036d0 <_puts_r+0x60>
 80036c6:	69a2      	ldr	r2, [r4, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dc17      	bgt.n	80036fc <_puts_r+0x8c>
 80036cc:	290a      	cmp	r1, #10
 80036ce:	d015      	beq.n	80036fc <_puts_r+0x8c>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	6022      	str	r2, [r4, #0]
 80036d6:	7019      	strb	r1, [r3, #0]
 80036d8:	68a3      	ldr	r3, [r4, #8]
 80036da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036de:	3b01      	subs	r3, #1
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d1ed      	bne.n	80036c2 <_puts_r+0x52>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da11      	bge.n	800370e <_puts_r+0x9e>
 80036ea:	4622      	mov	r2, r4
 80036ec:	210a      	movs	r1, #10
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 f85f 	bl	80037b2 <__swbuf_r>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d0d7      	beq.n	80036a8 <_puts_r+0x38>
 80036f8:	250a      	movs	r5, #10
 80036fa:	e7d7      	b.n	80036ac <_puts_r+0x3c>
 80036fc:	4622      	mov	r2, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f857 	bl	80037b2 <__swbuf_r>
 8003704:	3001      	adds	r0, #1
 8003706:	d1e7      	bne.n	80036d8 <_puts_r+0x68>
 8003708:	e7ce      	b.n	80036a8 <_puts_r+0x38>
 800370a:	3e01      	subs	r6, #1
 800370c:	e7e4      	b.n	80036d8 <_puts_r+0x68>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	220a      	movs	r2, #10
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e7ee      	b.n	80036f8 <_puts_r+0x88>
	...

0800371c <puts>:
 800371c:	4b02      	ldr	r3, [pc, #8]	@ (8003728 <puts+0xc>)
 800371e:	4601      	mov	r1, r0
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	f7ff bfa5 	b.w	8003670 <_puts_r>
 8003726:	bf00      	nop
 8003728:	20000018 	.word	0x20000018

0800372c <__sread>:
 800372c:	b510      	push	{r4, lr}
 800372e:	460c      	mov	r4, r1
 8003730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003734:	f000 f8fc 	bl	8003930 <_read_r>
 8003738:	2800      	cmp	r0, #0
 800373a:	bfab      	itete	ge
 800373c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800373e:	89a3      	ldrhlt	r3, [r4, #12]
 8003740:	181b      	addge	r3, r3, r0
 8003742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003746:	bfac      	ite	ge
 8003748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800374a:	81a3      	strhlt	r3, [r4, #12]
 800374c:	bd10      	pop	{r4, pc}

0800374e <__swrite>:
 800374e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003752:	461f      	mov	r7, r3
 8003754:	898b      	ldrh	r3, [r1, #12]
 8003756:	05db      	lsls	r3, r3, #23
 8003758:	4605      	mov	r5, r0
 800375a:	460c      	mov	r4, r1
 800375c:	4616      	mov	r6, r2
 800375e:	d505      	bpl.n	800376c <__swrite+0x1e>
 8003760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003764:	2302      	movs	r3, #2
 8003766:	2200      	movs	r2, #0
 8003768:	f000 f8d0 	bl	800390c <_lseek_r>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	4632      	mov	r2, r6
 800377a:	463b      	mov	r3, r7
 800377c:	4628      	mov	r0, r5
 800377e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003782:	f000 b8e7 	b.w	8003954 <_write_r>

08003786 <__sseek>:
 8003786:	b510      	push	{r4, lr}
 8003788:	460c      	mov	r4, r1
 800378a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378e:	f000 f8bd 	bl	800390c <_lseek_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	bf15      	itete	ne
 8003798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800379a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800379e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037a2:	81a3      	strheq	r3, [r4, #12]
 80037a4:	bf18      	it	ne
 80037a6:	81a3      	strhne	r3, [r4, #12]
 80037a8:	bd10      	pop	{r4, pc}

080037aa <__sclose>:
 80037aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ae:	f000 b89d 	b.w	80038ec <_close_r>

080037b2 <__swbuf_r>:
 80037b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b4:	460e      	mov	r6, r1
 80037b6:	4614      	mov	r4, r2
 80037b8:	4605      	mov	r5, r0
 80037ba:	b118      	cbz	r0, 80037c4 <__swbuf_r+0x12>
 80037bc:	6a03      	ldr	r3, [r0, #32]
 80037be:	b90b      	cbnz	r3, 80037c4 <__swbuf_r+0x12>
 80037c0:	f7ff ff20 	bl	8003604 <__sinit>
 80037c4:	69a3      	ldr	r3, [r4, #24]
 80037c6:	60a3      	str	r3, [r4, #8]
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	071a      	lsls	r2, r3, #28
 80037cc:	d501      	bpl.n	80037d2 <__swbuf_r+0x20>
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	b943      	cbnz	r3, 80037e4 <__swbuf_r+0x32>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 f82b 	bl	8003830 <__swsetup_r>
 80037da:	b118      	cbz	r0, 80037e4 <__swbuf_r+0x32>
 80037dc:	f04f 37ff 	mov.w	r7, #4294967295
 80037e0:	4638      	mov	r0, r7
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	6922      	ldr	r2, [r4, #16]
 80037e8:	1a98      	subs	r0, r3, r2
 80037ea:	6963      	ldr	r3, [r4, #20]
 80037ec:	b2f6      	uxtb	r6, r6
 80037ee:	4283      	cmp	r3, r0
 80037f0:	4637      	mov	r7, r6
 80037f2:	dc05      	bgt.n	8003800 <__swbuf_r+0x4e>
 80037f4:	4621      	mov	r1, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	f000 fa68 	bl	8003ccc <_fflush_r>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d1ed      	bne.n	80037dc <__swbuf_r+0x2a>
 8003800:	68a3      	ldr	r3, [r4, #8]
 8003802:	3b01      	subs	r3, #1
 8003804:	60a3      	str	r3, [r4, #8]
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	6022      	str	r2, [r4, #0]
 800380c:	701e      	strb	r6, [r3, #0]
 800380e:	6962      	ldr	r2, [r4, #20]
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	429a      	cmp	r2, r3
 8003814:	d004      	beq.n	8003820 <__swbuf_r+0x6e>
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	07db      	lsls	r3, r3, #31
 800381a:	d5e1      	bpl.n	80037e0 <__swbuf_r+0x2e>
 800381c:	2e0a      	cmp	r6, #10
 800381e:	d1df      	bne.n	80037e0 <__swbuf_r+0x2e>
 8003820:	4621      	mov	r1, r4
 8003822:	4628      	mov	r0, r5
 8003824:	f000 fa52 	bl	8003ccc <_fflush_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	d0d9      	beq.n	80037e0 <__swbuf_r+0x2e>
 800382c:	e7d6      	b.n	80037dc <__swbuf_r+0x2a>
	...

08003830 <__swsetup_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4b29      	ldr	r3, [pc, #164]	@ (80038d8 <__swsetup_r+0xa8>)
 8003834:	4605      	mov	r5, r0
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	460c      	mov	r4, r1
 800383a:	b118      	cbz	r0, 8003844 <__swsetup_r+0x14>
 800383c:	6a03      	ldr	r3, [r0, #32]
 800383e:	b90b      	cbnz	r3, 8003844 <__swsetup_r+0x14>
 8003840:	f7ff fee0 	bl	8003604 <__sinit>
 8003844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003848:	0719      	lsls	r1, r3, #28
 800384a:	d422      	bmi.n	8003892 <__swsetup_r+0x62>
 800384c:	06da      	lsls	r2, r3, #27
 800384e:	d407      	bmi.n	8003860 <__swsetup_r+0x30>
 8003850:	2209      	movs	r2, #9
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	e033      	b.n	80038c8 <__swsetup_r+0x98>
 8003860:	0758      	lsls	r0, r3, #29
 8003862:	d512      	bpl.n	800388a <__swsetup_r+0x5a>
 8003864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003866:	b141      	cbz	r1, 800387a <__swsetup_r+0x4a>
 8003868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800386c:	4299      	cmp	r1, r3
 800386e:	d002      	beq.n	8003876 <__swsetup_r+0x46>
 8003870:	4628      	mov	r0, r5
 8003872:	f000 f8af 	bl	80039d4 <_free_r>
 8003876:	2300      	movs	r3, #0
 8003878:	6363      	str	r3, [r4, #52]	@ 0x34
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003880:	81a3      	strh	r3, [r4, #12]
 8003882:	2300      	movs	r3, #0
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	6923      	ldr	r3, [r4, #16]
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f043 0308 	orr.w	r3, r3, #8
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	b94b      	cbnz	r3, 80038aa <__swsetup_r+0x7a>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800389c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a0:	d003      	beq.n	80038aa <__swsetup_r+0x7a>
 80038a2:	4621      	mov	r1, r4
 80038a4:	4628      	mov	r0, r5
 80038a6:	f000 fa5f 	bl	8003d68 <__smakebuf_r>
 80038aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ae:	f013 0201 	ands.w	r2, r3, #1
 80038b2:	d00a      	beq.n	80038ca <__swsetup_r+0x9a>
 80038b4:	2200      	movs	r2, #0
 80038b6:	60a2      	str	r2, [r4, #8]
 80038b8:	6962      	ldr	r2, [r4, #20]
 80038ba:	4252      	negs	r2, r2
 80038bc:	61a2      	str	r2, [r4, #24]
 80038be:	6922      	ldr	r2, [r4, #16]
 80038c0:	b942      	cbnz	r2, 80038d4 <__swsetup_r+0xa4>
 80038c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038c6:	d1c5      	bne.n	8003854 <__swsetup_r+0x24>
 80038c8:	bd38      	pop	{r3, r4, r5, pc}
 80038ca:	0799      	lsls	r1, r3, #30
 80038cc:	bf58      	it	pl
 80038ce:	6962      	ldrpl	r2, [r4, #20]
 80038d0:	60a2      	str	r2, [r4, #8]
 80038d2:	e7f4      	b.n	80038be <__swsetup_r+0x8e>
 80038d4:	2000      	movs	r0, #0
 80038d6:	e7f7      	b.n	80038c8 <__swsetup_r+0x98>
 80038d8:	20000018 	.word	0x20000018

080038dc <memset>:
 80038dc:	4402      	add	r2, r0
 80038de:	4603      	mov	r3, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <_close_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	@ (8003908 <_close_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fc ffcb 	bl	8000892 <_close>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_close_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_close_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	200002a8 	.word	0x200002a8

0800390c <_lseek_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d07      	ldr	r5, [pc, #28]	@ (800392c <_lseek_r+0x20>)
 8003910:	4604      	mov	r4, r0
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	2200      	movs	r2, #0
 8003918:	602a      	str	r2, [r5, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f7fc ffe0 	bl	80008e0 <_lseek>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_lseek_r+0x1e>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_lseek_r+0x1e>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	200002a8 	.word	0x200002a8

08003930 <_read_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d07      	ldr	r5, [pc, #28]	@ (8003950 <_read_r+0x20>)
 8003934:	4604      	mov	r4, r0
 8003936:	4608      	mov	r0, r1
 8003938:	4611      	mov	r1, r2
 800393a:	2200      	movs	r2, #0
 800393c:	602a      	str	r2, [r5, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fc ff6e 	bl	8000820 <_read>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_read_r+0x1e>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_read_r+0x1e>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	200002a8 	.word	0x200002a8

08003954 <_write_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_write_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fc ff79 	bl	800085a <_write>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_write_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_write_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	200002a8 	.word	0x200002a8

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	@ (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000018 	.word	0x20000018

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	@ (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	@ (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	@ (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 fa54 	bl	8003e44 <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08003eb0 	.word	0x08003eb0
 80039c0:	08003eb0 	.word	0x08003eb0
 80039c4:	08003eb0 	.word	0x08003eb0
 80039c8:	08003eb4 	.word	0x08003eb4

080039cc <__retarget_lock_init_recursive>:
 80039cc:	4770      	bx	lr

080039ce <__retarget_lock_acquire_recursive>:
 80039ce:	4770      	bx	lr

080039d0 <__retarget_lock_release_recursive>:
 80039d0:	4770      	bx	lr
	...

080039d4 <_free_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4605      	mov	r5, r0
 80039d8:	2900      	cmp	r1, #0
 80039da:	d041      	beq.n	8003a60 <_free_r+0x8c>
 80039dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e0:	1f0c      	subs	r4, r1, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bfb8      	it	lt
 80039e6:	18e4      	addlt	r4, r4, r3
 80039e8:	f000 f8e0 	bl	8003bac <__malloc_lock>
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <_free_r+0x90>)
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	b933      	cbnz	r3, 8003a00 <_free_r+0x2c>
 80039f2:	6063      	str	r3, [r4, #4]
 80039f4:	6014      	str	r4, [r2, #0]
 80039f6:	4628      	mov	r0, r5
 80039f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039fc:	f000 b8dc 	b.w	8003bb8 <__malloc_unlock>
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	d908      	bls.n	8003a16 <_free_r+0x42>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	1821      	adds	r1, r4, r0
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	bf01      	itttt	eq
 8003a0c:	6819      	ldreq	r1, [r3, #0]
 8003a0e:	685b      	ldreq	r3, [r3, #4]
 8003a10:	1809      	addeq	r1, r1, r0
 8003a12:	6021      	streq	r1, [r4, #0]
 8003a14:	e7ed      	b.n	80039f2 <_free_r+0x1e>
 8003a16:	461a      	mov	r2, r3
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b10b      	cbz	r3, 8003a20 <_free_r+0x4c>
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	d9fa      	bls.n	8003a16 <_free_r+0x42>
 8003a20:	6811      	ldr	r1, [r2, #0]
 8003a22:	1850      	adds	r0, r2, r1
 8003a24:	42a0      	cmp	r0, r4
 8003a26:	d10b      	bne.n	8003a40 <_free_r+0x6c>
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	4401      	add	r1, r0
 8003a2c:	1850      	adds	r0, r2, r1
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	6011      	str	r1, [r2, #0]
 8003a32:	d1e0      	bne.n	80039f6 <_free_r+0x22>
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	6053      	str	r3, [r2, #4]
 8003a3a:	4408      	add	r0, r1
 8003a3c:	6010      	str	r0, [r2, #0]
 8003a3e:	e7da      	b.n	80039f6 <_free_r+0x22>
 8003a40:	d902      	bls.n	8003a48 <_free_r+0x74>
 8003a42:	230c      	movs	r3, #12
 8003a44:	602b      	str	r3, [r5, #0]
 8003a46:	e7d6      	b.n	80039f6 <_free_r+0x22>
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	1821      	adds	r1, r4, r0
 8003a4c:	428b      	cmp	r3, r1
 8003a4e:	bf04      	itt	eq
 8003a50:	6819      	ldreq	r1, [r3, #0]
 8003a52:	685b      	ldreq	r3, [r3, #4]
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	bf04      	itt	eq
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	6054      	str	r4, [r2, #4]
 8003a5e:	e7ca      	b.n	80039f6 <_free_r+0x22>
 8003a60:	bd38      	pop	{r3, r4, r5, pc}
 8003a62:	bf00      	nop
 8003a64:	200002b4 	.word	0x200002b4

08003a68 <sbrk_aligned>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003aa8 <sbrk_aligned+0x40>)
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	6831      	ldr	r1, [r6, #0]
 8003a70:	4605      	mov	r5, r0
 8003a72:	b911      	cbnz	r1, 8003a7a <sbrk_aligned+0x12>
 8003a74:	f000 f9d6 	bl	8003e24 <_sbrk_r>
 8003a78:	6030      	str	r0, [r6, #0]
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 f9d1 	bl	8003e24 <_sbrk_r>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	d103      	bne.n	8003a8e <sbrk_aligned+0x26>
 8003a86:	f04f 34ff 	mov.w	r4, #4294967295
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
 8003a8e:	1cc4      	adds	r4, r0, #3
 8003a90:	f024 0403 	bic.w	r4, r4, #3
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d0f8      	beq.n	8003a8a <sbrk_aligned+0x22>
 8003a98:	1a21      	subs	r1, r4, r0
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 f9c2 	bl	8003e24 <_sbrk_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d1f2      	bne.n	8003a8a <sbrk_aligned+0x22>
 8003aa4:	e7ef      	b.n	8003a86 <sbrk_aligned+0x1e>
 8003aa6:	bf00      	nop
 8003aa8:	200002b0 	.word	0x200002b0

08003aac <_malloc_r>:
 8003aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab0:	1ccd      	adds	r5, r1, #3
 8003ab2:	f025 0503 	bic.w	r5, r5, #3
 8003ab6:	3508      	adds	r5, #8
 8003ab8:	2d0c      	cmp	r5, #12
 8003aba:	bf38      	it	cc
 8003abc:	250c      	movcc	r5, #12
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	db01      	blt.n	8003ac8 <_malloc_r+0x1c>
 8003ac4:	42a9      	cmp	r1, r5
 8003ac6:	d904      	bls.n	8003ad2 <_malloc_r+0x26>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	2000      	movs	r0, #0
 8003ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ba8 <_malloc_r+0xfc>
 8003ad6:	f000 f869 	bl	8003bac <__malloc_lock>
 8003ada:	f8d8 3000 	ldr.w	r3, [r8]
 8003ade:	461c      	mov	r4, r3
 8003ae0:	bb44      	cbnz	r4, 8003b34 <_malloc_r+0x88>
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff ffbf 	bl	8003a68 <sbrk_aligned>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	4604      	mov	r4, r0
 8003aee:	d158      	bne.n	8003ba2 <_malloc_r+0xf6>
 8003af0:	f8d8 4000 	ldr.w	r4, [r8]
 8003af4:	4627      	mov	r7, r4
 8003af6:	2f00      	cmp	r7, #0
 8003af8:	d143      	bne.n	8003b82 <_malloc_r+0xd6>
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	d04b      	beq.n	8003b96 <_malloc_r+0xea>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	4639      	mov	r1, r7
 8003b02:	4630      	mov	r0, r6
 8003b04:	eb04 0903 	add.w	r9, r4, r3
 8003b08:	f000 f98c 	bl	8003e24 <_sbrk_r>
 8003b0c:	4581      	cmp	r9, r0
 8003b0e:	d142      	bne.n	8003b96 <_malloc_r+0xea>
 8003b10:	6821      	ldr	r1, [r4, #0]
 8003b12:	1a6d      	subs	r5, r5, r1
 8003b14:	4629      	mov	r1, r5
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7ff ffa6 	bl	8003a68 <sbrk_aligned>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d03a      	beq.n	8003b96 <_malloc_r+0xea>
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	442b      	add	r3, r5
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	f8d8 3000 	ldr.w	r3, [r8]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	bb62      	cbnz	r2, 8003b88 <_malloc_r+0xdc>
 8003b2e:	f8c8 7000 	str.w	r7, [r8]
 8003b32:	e00f      	b.n	8003b54 <_malloc_r+0xa8>
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	1b52      	subs	r2, r2, r5
 8003b38:	d420      	bmi.n	8003b7c <_malloc_r+0xd0>
 8003b3a:	2a0b      	cmp	r2, #11
 8003b3c:	d917      	bls.n	8003b6e <_malloc_r+0xc2>
 8003b3e:	1961      	adds	r1, r4, r5
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	6025      	str	r5, [r4, #0]
 8003b44:	bf18      	it	ne
 8003b46:	6059      	strne	r1, [r3, #4]
 8003b48:	6863      	ldr	r3, [r4, #4]
 8003b4a:	bf08      	it	eq
 8003b4c:	f8c8 1000 	streq.w	r1, [r8]
 8003b50:	5162      	str	r2, [r4, r5]
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	4630      	mov	r0, r6
 8003b56:	f000 f82f 	bl	8003bb8 <__malloc_unlock>
 8003b5a:	f104 000b 	add.w	r0, r4, #11
 8003b5e:	1d23      	adds	r3, r4, #4
 8003b60:	f020 0007 	bic.w	r0, r0, #7
 8003b64:	1ac2      	subs	r2, r0, r3
 8003b66:	bf1c      	itt	ne
 8003b68:	1a1b      	subne	r3, r3, r0
 8003b6a:	50a3      	strne	r3, [r4, r2]
 8003b6c:	e7af      	b.n	8003ace <_malloc_r+0x22>
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	bf0c      	ite	eq
 8003b74:	f8c8 2000 	streq.w	r2, [r8]
 8003b78:	605a      	strne	r2, [r3, #4]
 8003b7a:	e7eb      	b.n	8003b54 <_malloc_r+0xa8>
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	6864      	ldr	r4, [r4, #4]
 8003b80:	e7ae      	b.n	8003ae0 <_malloc_r+0x34>
 8003b82:	463c      	mov	r4, r7
 8003b84:	687f      	ldr	r7, [r7, #4]
 8003b86:	e7b6      	b.n	8003af6 <_malloc_r+0x4a>
 8003b88:	461a      	mov	r2, r3
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d1fb      	bne.n	8003b88 <_malloc_r+0xdc>
 8003b90:	2300      	movs	r3, #0
 8003b92:	6053      	str	r3, [r2, #4]
 8003b94:	e7de      	b.n	8003b54 <_malloc_r+0xa8>
 8003b96:	230c      	movs	r3, #12
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 f80c 	bl	8003bb8 <__malloc_unlock>
 8003ba0:	e794      	b.n	8003acc <_malloc_r+0x20>
 8003ba2:	6005      	str	r5, [r0, #0]
 8003ba4:	e7d6      	b.n	8003b54 <_malloc_r+0xa8>
 8003ba6:	bf00      	nop
 8003ba8:	200002b4 	.word	0x200002b4

08003bac <__malloc_lock>:
 8003bac:	4801      	ldr	r0, [pc, #4]	@ (8003bb4 <__malloc_lock+0x8>)
 8003bae:	f7ff bf0e 	b.w	80039ce <__retarget_lock_acquire_recursive>
 8003bb2:	bf00      	nop
 8003bb4:	200002ac 	.word	0x200002ac

08003bb8 <__malloc_unlock>:
 8003bb8:	4801      	ldr	r0, [pc, #4]	@ (8003bc0 <__malloc_unlock+0x8>)
 8003bba:	f7ff bf09 	b.w	80039d0 <__retarget_lock_release_recursive>
 8003bbe:	bf00      	nop
 8003bc0:	200002ac 	.word	0x200002ac

08003bc4 <__sflush_r>:
 8003bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bcc:	0716      	lsls	r6, r2, #28
 8003bce:	4605      	mov	r5, r0
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	d454      	bmi.n	8003c7e <__sflush_r+0xba>
 8003bd4:	684b      	ldr	r3, [r1, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	dc02      	bgt.n	8003be0 <__sflush_r+0x1c>
 8003bda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dd48      	ble.n	8003c72 <__sflush_r+0xae>
 8003be0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	d045      	beq.n	8003c72 <__sflush_r+0xae>
 8003be6:	2300      	movs	r3, #0
 8003be8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bec:	682f      	ldr	r7, [r5, #0]
 8003bee:	6a21      	ldr	r1, [r4, #32]
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	d030      	beq.n	8003c56 <__sflush_r+0x92>
 8003bf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	0759      	lsls	r1, r3, #29
 8003bfa:	d505      	bpl.n	8003c08 <__sflush_r+0x44>
 8003bfc:	6863      	ldr	r3, [r4, #4]
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c02:	b10b      	cbz	r3, 8003c08 <__sflush_r+0x44>
 8003c04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c0c:	6a21      	ldr	r1, [r4, #32]
 8003c0e:	4628      	mov	r0, r5
 8003c10:	47b0      	blx	r6
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	d106      	bne.n	8003c26 <__sflush_r+0x62>
 8003c18:	6829      	ldr	r1, [r5, #0]
 8003c1a:	291d      	cmp	r1, #29
 8003c1c:	d82b      	bhi.n	8003c76 <__sflush_r+0xb2>
 8003c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc8 <__sflush_r+0x104>)
 8003c20:	410a      	asrs	r2, r1
 8003c22:	07d6      	lsls	r6, r2, #31
 8003c24:	d427      	bmi.n	8003c76 <__sflush_r+0xb2>
 8003c26:	2200      	movs	r2, #0
 8003c28:	6062      	str	r2, [r4, #4]
 8003c2a:	04d9      	lsls	r1, r3, #19
 8003c2c:	6922      	ldr	r2, [r4, #16]
 8003c2e:	6022      	str	r2, [r4, #0]
 8003c30:	d504      	bpl.n	8003c3c <__sflush_r+0x78>
 8003c32:	1c42      	adds	r2, r0, #1
 8003c34:	d101      	bne.n	8003c3a <__sflush_r+0x76>
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	b903      	cbnz	r3, 8003c3c <__sflush_r+0x78>
 8003c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c3e:	602f      	str	r7, [r5, #0]
 8003c40:	b1b9      	cbz	r1, 8003c72 <__sflush_r+0xae>
 8003c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c46:	4299      	cmp	r1, r3
 8003c48:	d002      	beq.n	8003c50 <__sflush_r+0x8c>
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f7ff fec2 	bl	80039d4 <_free_r>
 8003c50:	2300      	movs	r3, #0
 8003c52:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c54:	e00d      	b.n	8003c72 <__sflush_r+0xae>
 8003c56:	2301      	movs	r3, #1
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b0      	blx	r6
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	1c50      	adds	r0, r2, #1
 8003c60:	d1c9      	bne.n	8003bf6 <__sflush_r+0x32>
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0c6      	beq.n	8003bf6 <__sflush_r+0x32>
 8003c68:	2b1d      	cmp	r3, #29
 8003c6a:	d001      	beq.n	8003c70 <__sflush_r+0xac>
 8003c6c:	2b16      	cmp	r3, #22
 8003c6e:	d11e      	bne.n	8003cae <__sflush_r+0xea>
 8003c70:	602f      	str	r7, [r5, #0]
 8003c72:	2000      	movs	r0, #0
 8003c74:	e022      	b.n	8003cbc <__sflush_r+0xf8>
 8003c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	e01b      	b.n	8003cb6 <__sflush_r+0xf2>
 8003c7e:	690f      	ldr	r7, [r1, #16]
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	d0f6      	beq.n	8003c72 <__sflush_r+0xae>
 8003c84:	0793      	lsls	r3, r2, #30
 8003c86:	680e      	ldr	r6, [r1, #0]
 8003c88:	bf08      	it	eq
 8003c8a:	694b      	ldreq	r3, [r1, #20]
 8003c8c:	600f      	str	r7, [r1, #0]
 8003c8e:	bf18      	it	ne
 8003c90:	2300      	movne	r3, #0
 8003c92:	eba6 0807 	sub.w	r8, r6, r7
 8003c96:	608b      	str	r3, [r1, #8]
 8003c98:	f1b8 0f00 	cmp.w	r8, #0
 8003c9c:	dde9      	ble.n	8003c72 <__sflush_r+0xae>
 8003c9e:	6a21      	ldr	r1, [r4, #32]
 8003ca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ca2:	4643      	mov	r3, r8
 8003ca4:	463a      	mov	r2, r7
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	47b0      	blx	r6
 8003caa:	2800      	cmp	r0, #0
 8003cac:	dc08      	bgt.n	8003cc0 <__sflush_r+0xfc>
 8003cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cb6:	81a3      	strh	r3, [r4, #12]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc0:	4407      	add	r7, r0
 8003cc2:	eba8 0800 	sub.w	r8, r8, r0
 8003cc6:	e7e7      	b.n	8003c98 <__sflush_r+0xd4>
 8003cc8:	dfbffffe 	.word	0xdfbffffe

08003ccc <_fflush_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	690b      	ldr	r3, [r1, #16]
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	b913      	cbnz	r3, 8003cdc <_fflush_r+0x10>
 8003cd6:	2500      	movs	r5, #0
 8003cd8:	4628      	mov	r0, r5
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	b118      	cbz	r0, 8003ce6 <_fflush_r+0x1a>
 8003cde:	6a03      	ldr	r3, [r0, #32]
 8003ce0:	b90b      	cbnz	r3, 8003ce6 <_fflush_r+0x1a>
 8003ce2:	f7ff fc8f 	bl	8003604 <__sinit>
 8003ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f3      	beq.n	8003cd6 <_fflush_r+0xa>
 8003cee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cf0:	07d0      	lsls	r0, r2, #31
 8003cf2:	d404      	bmi.n	8003cfe <_fflush_r+0x32>
 8003cf4:	0599      	lsls	r1, r3, #22
 8003cf6:	d402      	bmi.n	8003cfe <_fflush_r+0x32>
 8003cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cfa:	f7ff fe68 	bl	80039ce <__retarget_lock_acquire_recursive>
 8003cfe:	4628      	mov	r0, r5
 8003d00:	4621      	mov	r1, r4
 8003d02:	f7ff ff5f 	bl	8003bc4 <__sflush_r>
 8003d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d08:	07da      	lsls	r2, r3, #31
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	d4e4      	bmi.n	8003cd8 <_fflush_r+0xc>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	059b      	lsls	r3, r3, #22
 8003d12:	d4e1      	bmi.n	8003cd8 <_fflush_r+0xc>
 8003d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d16:	f7ff fe5b 	bl	80039d0 <__retarget_lock_release_recursive>
 8003d1a:	e7dd      	b.n	8003cd8 <_fflush_r+0xc>

08003d1c <__swhatbuf_r>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	460c      	mov	r4, r1
 8003d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d24:	2900      	cmp	r1, #0
 8003d26:	b096      	sub	sp, #88	@ 0x58
 8003d28:	4615      	mov	r5, r2
 8003d2a:	461e      	mov	r6, r3
 8003d2c:	da0d      	bge.n	8003d4a <__swhatbuf_r+0x2e>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	bf14      	ite	ne
 8003d3a:	2340      	movne	r3, #64	@ 0x40
 8003d3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d40:	2000      	movs	r0, #0
 8003d42:	6031      	str	r1, [r6, #0]
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	b016      	add	sp, #88	@ 0x58
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	466a      	mov	r2, sp
 8003d4c:	f000 f848 	bl	8003de0 <_fstat_r>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	dbec      	blt.n	8003d2e <__swhatbuf_r+0x12>
 8003d54:	9901      	ldr	r1, [sp, #4]
 8003d56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d5e:	4259      	negs	r1, r3
 8003d60:	4159      	adcs	r1, r3
 8003d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d66:	e7eb      	b.n	8003d40 <__swhatbuf_r+0x24>

08003d68 <__smakebuf_r>:
 8003d68:	898b      	ldrh	r3, [r1, #12]
 8003d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6c:	079d      	lsls	r5, r3, #30
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	d507      	bpl.n	8003d84 <__smakebuf_r+0x1c>
 8003d74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	6123      	str	r3, [r4, #16]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	6163      	str	r3, [r4, #20]
 8003d80:	b003      	add	sp, #12
 8003d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d84:	ab01      	add	r3, sp, #4
 8003d86:	466a      	mov	r2, sp
 8003d88:	f7ff ffc8 	bl	8003d1c <__swhatbuf_r>
 8003d8c:	9f00      	ldr	r7, [sp, #0]
 8003d8e:	4605      	mov	r5, r0
 8003d90:	4639      	mov	r1, r7
 8003d92:	4630      	mov	r0, r6
 8003d94:	f7ff fe8a 	bl	8003aac <_malloc_r>
 8003d98:	b948      	cbnz	r0, 8003dae <__smakebuf_r+0x46>
 8003d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d9e:	059a      	lsls	r2, r3, #22
 8003da0:	d4ee      	bmi.n	8003d80 <__smakebuf_r+0x18>
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	81a3      	strh	r3, [r4, #12]
 8003dac:	e7e2      	b.n	8003d74 <__smakebuf_r+0xc>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	6020      	str	r0, [r4, #0]
 8003db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003dbe:	b15b      	cbz	r3, 8003dd8 <__smakebuf_r+0x70>
 8003dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f000 f81d 	bl	8003e04 <_isatty_r>
 8003dca:	b128      	cbz	r0, 8003dd8 <__smakebuf_r+0x70>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	81a3      	strh	r3, [r4, #12]
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	431d      	orrs	r5, r3
 8003ddc:	81a5      	strh	r5, [r4, #12]
 8003dde:	e7cf      	b.n	8003d80 <__smakebuf_r+0x18>

08003de0 <_fstat_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d07      	ldr	r5, [pc, #28]	@ (8003e00 <_fstat_r+0x20>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	f7fc fd5c 	bl	80008aa <_fstat>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d102      	bne.n	8003dfc <_fstat_r+0x1c>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	b103      	cbz	r3, 8003dfc <_fstat_r+0x1c>
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	200002a8 	.word	0x200002a8

08003e04 <_isatty_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	@ (8003e20 <_isatty_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc fd5b 	bl	80008ca <_isatty>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_isatty_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_isatty_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	200002a8 	.word	0x200002a8

08003e24 <_sbrk_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d06      	ldr	r5, [pc, #24]	@ (8003e40 <_sbrk_r+0x1c>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	f7fc fd64 	bl	80008fc <_sbrk>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_sbrk_r+0x1a>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_sbrk_r+0x1a>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	200002a8 	.word	0x200002a8

08003e44 <_init>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr

08003e50 <_fini>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr
