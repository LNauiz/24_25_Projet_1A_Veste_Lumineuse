
Batterie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d8  080064d8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e0  080064e0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080064e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08006550  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006550  00008324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001804e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a1  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00023288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104e  00000000  00000000  000247a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021eb5  00000000  00000000  000257ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019291  00000000  00000000  000476a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd23e  00000000  00000000  00060934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013db72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006278  00000000  00000000  0013dbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00143e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006430 	.word	0x08006430

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006430 	.word	0x08006430

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	@ 0x30
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2220      	movs	r2, #32
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fdbf 	bl	8005928 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000daa:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000db0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000db2:	4b30      	ldr	r3, [pc, #192]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000db8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dba:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e14:	4817      	ldr	r0, [pc, #92]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000e16:	f000 fe8d 	bl	8001b34 <HAL_ADC_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e20:	f000 f96c 	bl	80010fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000e30:	f001 fe42 	bl	8002ab8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e3a:	f000 f95f 	bl	80010fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_ADC1_Init+0xec>)
 8000e40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e42:	2306      	movs	r3, #6
 8000e44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000e46:	2306      	movs	r3, #6
 8000e48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e4a:	237f      	movs	r3, #127	@ 0x7f
 8000e4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_ADC1_Init+0xe8>)
 8000e5c:	f001 f990 	bl	8002180 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e66:	f000 f949 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	@ 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000084 	.word	0x20000084
 8000e78:	04300002 	.word	0x04300002

08000e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09a      	sub	sp, #104	@ 0x68
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	2244      	movs	r2, #68	@ 0x44
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fd43 	bl	8005928 <memset>
  if(adcHandle->Instance==ADC1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eaa:	d134      	bne.n	8000f16 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eb2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 ff47 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ec8:	f000 f918 	bl	80010fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <HAL_ADC_MspInit+0xa4>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <HAL_ADC_MspInit+0xa4>)
 8000ed2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_ADC_MspInit+0xa4>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_ADC_MspInit+0xa4>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <HAL_ADC_MspInit+0xa4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_ADC_MspInit+0xa4>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 8000efc:	2301      	movs	r3, #1
 8000efe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f00:	2303      	movs	r3, #3
 8000f02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f12:	f001 ff55 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3768      	adds	r7, #104	@ 0x68
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <MX_GPIO_Init+0x78>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <MX_GPIO_Init+0x78>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <MX_GPIO_Init+0x78>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|STAT1_Pin|STAT2_Pin|LED_STATUS_Pin
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f002 f8b3 	bl	80030c4 <HAL_GPIO_WritePin>
                          |LED_PLAYING_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CE_Pin STAT1_Pin STAT2_Pin LED_STATUS_Pin
                           LED_PLAYING_Pin */
  GPIO_InitStruct.Pin = CE_Pin|STAT1_Pin|STAT2_Pin|LED_STATUS_Pin
 8000f5e:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8000f62:	607b      	str	r3, [r7, #4]
                          |LED_PLAYING_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f78:	f001 ff22 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYS_Pin */
  GPIO_InitStruct.Pin = SYS_Pin;
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	2303      	movs	r3, #3
 8000f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SYS_GPIO_Port, &GPIO_InitStruct);
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f90:	f001 ff16 	bl	8002dc0 <HAL_GPIO_Init>

}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000fa8:	1d39      	adds	r1, r7, #4
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <__io_putchar+0x20>)
 8000fb2:	f003 fc33 	bl	800481c <HAL_UART_Transmit>

	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000140 	.word	0x20000140

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fb2e 	bl	800162a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f843 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f7ff ffa7 	bl	8000f24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 fa17 	bl	8001408 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fda:	f7ff fed7 	bl	8000d8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("BONJOUR\r\n");
 8000fde:	481d      	ldr	r0, [pc, #116]	@ (8001054 <main+0x90>)
 8000fe0:	f004 fbc2 	bl	8005768 <puts>

	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f002 f882 	bl	80030f4 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		uint32_t voltage=read_analog_input();
 8000ff0:	f000 faae 	bl	8001550 <read_analog_input>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	607b      	str	r3, [r7, #4]
		HAL_Delay(500);
 8000ff8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ffc:	f000 fb4c 	bl	8001698 <HAL_Delay>

		if (voltage==0){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <main+0x50>
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,1);
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f002 f859 	bl	80030c4 <HAL_GPIO_WritePin>
 8001012:	e7ed      	b.n	8000ff0 <main+0x2c>
		}
		else if(voltage<4){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d80d      	bhi.n	8001036 <main+0x72>
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,0);
 800101a:	2200      	movs	r2, #0
 800101c:	2110      	movs	r1, #16
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f002 f84f 	bl	80030c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PLAYING_GPIO_Port, LED_PLAYING_Pin, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f002 f848 	bl	80030c4 <HAL_GPIO_WritePin>
 8001034:	e7dc      	b.n	8000ff0 <main+0x2c>

		}
		else{
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,1);
 8001036:	2201      	movs	r2, #1
 8001038:	2110      	movs	r1, #16
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f002 f841 	bl	80030c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PLAYING_GPIO_Port, LED_PLAYING_Pin, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f002 f83a 	bl	80030c4 <HAL_GPIO_WritePin>
	{
 8001050:	e7ce      	b.n	8000ff0 <main+0x2c>
 8001052:	bf00      	nop
 8001054:	08006448 	.word	0x08006448

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	@ 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	2238      	movs	r2, #56	@ 0x38
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f004 fc5e 	bl	8005928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800107e:	f002 f853 	bl	8003128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108c:	2340      	movs	r3, #64	@ 0x40
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f8f9 	bl	8003290 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010a4:	f000 f82a 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ac:	2301      	movs	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fbf7 	bl	80038b4 <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010cc:	f000 f816 	bl	80010fc <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3750      	adds	r7, #80	@ 0x50
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ea:	f000 fab7 	bl	800165c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40001000 	.word	0x40001000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <HAL_MspInit+0x44>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6613      	str	r3, [r2, #96]	@ 0x60
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800113e:	f002 f897 	bl	8003270 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001160:	4b2c      	ldr	r3, [pc, #176]	@ (8001214 <HAL_InitTick+0xc4>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001164:	4a2b      	ldr	r2, [pc, #172]	@ (8001214 <HAL_InitTick+0xc4>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6593      	str	r3, [r2, #88]	@ 0x58
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_InitTick+0xc4>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fd6c 	bl	8003c60 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001188:	f002 fd3e 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 800118c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <HAL_InitTick+0xc8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	3b01      	subs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <HAL_InitTick+0xcc>)
 800119e:	4a20      	ldr	r2, [pc, #128]	@ (8001220 <HAL_InitTick+0xd0>)
 80011a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <HAL_InitTick+0xcc>)
 80011a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_InitTick+0xcc>)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_InitTick+0xcc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_InitTick+0xcc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011bc:	4817      	ldr	r0, [pc, #92]	@ (800121c <HAL_InitTick+0xcc>)
 80011be:	f002 ffb7 	bl	8004130 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11b      	bne.n	8001208 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011d0:	4812      	ldr	r0, [pc, #72]	@ (800121c <HAL_InitTick+0xcc>)
 80011d2:	f003 f80f 	bl	80041f4 <HAL_TIM_Base_Start_IT>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d111      	bne.n	8001208 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e4:	2036      	movs	r0, #54	@ 0x36
 80011e6:	f001 fddd 	bl	8002da4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d808      	bhi.n	8001202 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	2036      	movs	r0, #54	@ 0x36
 80011f6:	f001 fdbb 	bl	8002d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_InitTick+0xd4>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e002      	b.n	8001208 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800120c:	4618      	mov	r0, r3
 800120e:	3730      	adds	r7, #48	@ 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000
 8001218:	431bde83 	.word	0x431bde83
 800121c:	200000f0 	.word	0x200000f0
 8001220:	40001000 	.word	0x40001000
 8001224:	20000004 	.word	0x20000004

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f003 f81b 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000f0 	.word	0x200000f0

0800129c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e00a      	b.n	80012c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ae:	f3af 8000 	nop.w
 80012b2:	4601      	mov	r1, r0
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	b2ca      	uxtb	r2, r1
 80012bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf0      	blt.n	80012ae <_read+0x12>
  }

  return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	e009      	b.n	80012fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe55 	bl	8000fa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbf1      	blt.n	80012e8 <_write+0x12>
  }
  return len;
 8001304:	687b      	ldr	r3, [r7, #4]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_close>:

int _close(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001336:	605a      	str	r2, [r3, #4]
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_isatty>:

int _isatty(int file)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f004 fb0c 	bl	80059c4 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20008000 	.word	0x20008000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	2000013c 	.word	0x2000013c
 80013e0:	20000328 	.word	0x20000328

080013e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 800140e:	4a23      	ldr	r2, [pc, #140]	@ (800149c <MX_USART2_UART_Init+0x94>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001450:	4811      	ldr	r0, [pc, #68]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001452:	f003 f993 	bl	800477c <HAL_UART_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800145c:	f7ff fe4e 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001464:	f003 ff8c 	bl	8005380 <HAL_UARTEx_SetTxFifoThreshold>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800146e:	f7ff fe45 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4808      	ldr	r0, [pc, #32]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001476:	f003 ffc1 	bl	80053fc <HAL_UARTEx_SetRxFifoThreshold>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001480:	f7ff fe3c 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_USART2_UART_Init+0x90>)
 8001486:	f003 ff42 	bl	800530e <HAL_UARTEx_DisableFifoMode>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001490:	f7ff fe34 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000140 	.word	0x20000140
 800149c:	40004400 	.word	0x40004400

080014a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	@ 0x68
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2244      	movs	r2, #68	@ 0x44
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fa31 	bl	8005928 <memset>
  if(uartHandle->Instance==USART2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001548 <HAL_UART_MspInit+0xa8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d136      	bne.n	800153e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fc37 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e8:	f7ff fe08 	bl	80010fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <HAL_UART_MspInit+0xac>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	4a16      	ldr	r2, [pc, #88]	@ (800154c <HAL_UART_MspInit+0xac>)
 80014f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_UART_MspInit+0xac>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_UART_MspInit+0xac>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	4a10      	ldr	r2, [pc, #64]	@ (800154c <HAL_UART_MspInit+0xac>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <HAL_UART_MspInit+0xac>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800151c:	230c      	movs	r3, #12
 800151e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152c:	2307      	movs	r3, #7
 800152e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f001 fc41 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	3768      	adds	r7, #104	@ 0x68
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40004400 	.word	0x40004400
 800154c:	40021000 	.word	0x40021000

08001550 <read_analog_input>:



float VMAX=5; //Tension Maximale de la batterie

int read_analog_input(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

	uint32_t raw_value;
	uint32_t voltage;

	HAL_ADC_Start(&hadc1);
 8001556:	481e      	ldr	r0, [pc, #120]	@ (80015d0 <read_analog_input+0x80>)
 8001558:	f000 fc70 	bl	8001e3c <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	481b      	ldr	r0, [pc, #108]	@ (80015d0 <read_analog_input+0x80>)
 8001562:	f000 fd27 	bl	8001fb4 <HAL_ADC_PollForConversion>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d122      	bne.n	80015b2 <read_analog_input+0x62>
    	raw_value = HAL_ADC_GetValue(&hadc1);
 800156c:	4818      	ldr	r0, [pc, #96]	@ (80015d0 <read_analog_input+0x80>)
 800156e:	f000 fdf9 	bl	8002164 <HAL_ADC_GetValue>
 8001572:	6078      	str	r0, [r7, #4]
    	voltage=raw_value*4.04/1596;
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7fe ffe5 	bl	8000544 <__aeabi_ui2d>
 800157a:	a311      	add	r3, pc, #68	@ (adr r3, 80015c0 <read_analog_input+0x70>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f85a 	bl	8000638 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	a30e      	add	r3, pc, #56	@ (adr r3, 80015c8 <read_analog_input+0x78>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f97b 	bl	800088c <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fa5d 	bl	8000a5c <__aeabi_d2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	603b      	str	r3, [r7, #0]

    	printf("Tension=%lu V\r\n", voltage);
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	480a      	ldr	r0, [pc, #40]	@ (80015d4 <read_analog_input+0x84>)
 80015aa:	f004 f875 	bl	8005698 <iprintf>
    	return voltage;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	e000      	b.n	80015b4 <read_analog_input+0x64>
    }

    return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	f3af 8000 	nop.w
 80015c0:	c28f5c29 	.word	0xc28f5c29
 80015c4:	401028f5 	.word	0x401028f5
 80015c8:	00000000 	.word	0x00000000
 80015cc:	4098f000 	.word	0x4098f000
 80015d0:	20000084 	.word	0x20000084
 80015d4:	08006454 	.word	0x08006454

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff ff02 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f004 f9e3 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fcdb 	bl	8000fc4 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   r0, =_estack
 8001610:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800161c:	080064e8 	.word	0x080064e8
  ldr r2, =_sbss
 8001620:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001624:	20000324 	.word	0x20000324

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>

0800162a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f001 fb90 	bl	8002d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff fd88 	bl	8001150 <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	e001      	b.n	8001650 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164c:	f7ff fd5c 	bl	8001108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001650:	79fb      	ldrb	r3, [r7, #7]

}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_IncTick+0x1c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x20>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4413      	add	r3, r2
 800166a:	4a03      	ldr	r2, [pc, #12]	@ (8001678 <HAL_IncTick+0x1c>)
 800166c:	6013      	str	r3, [r2, #0]
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	200001d4 	.word	0x200001d4
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200001d4 	.word	0x200001d4

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d004      	beq.n	80016bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_Delay+0x40>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016bc:	bf00      	nop
 80016be:	f7ff ffdf 	bl	8001680 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d8f7      	bhi.n	80016be <HAL_Delay+0x26>
  {
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000008 	.word	0x20000008

080016dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3360      	adds	r3, #96	@ 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <LL_ADC_SetOffset+0x44>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	4313      	orrs	r3, r2
 8001774:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	03fff000 	.word	0x03fff000

0800178c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3360      	adds	r3, #96	@ 0x60
 800179a:	461a      	mov	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3360      	adds	r3, #96	@ 0x60
 80017c8:	461a      	mov	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b087      	sub	sp, #28
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3360      	adds	r3, #96	@ 0x60
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	431a      	orrs	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3360      	adds	r3, #96	@ 0x60
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	615a      	str	r2, [r3, #20]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b087      	sub	sp, #28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3330      	adds	r3, #48	@ 0x30
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	4413      	add	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	211f      	movs	r1, #31
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	401a      	ands	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	f003 011f 	and.w	r1, r3, #31
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018fe:	b480      	push	{r7}
 8001900:	b087      	sub	sp, #28
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3314      	adds	r3, #20
 800190e:	461a      	mov	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	0e5b      	lsrs	r3, r3, #25
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0d1b      	lsrs	r3, r3, #20
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2107      	movs	r1, #7
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	0d1b      	lsrs	r3, r3, #20
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0318 	and.w	r3, r3, #24
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001978:	40d9      	lsrs	r1, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	400b      	ands	r3, r1
 800197e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001982:	431a      	orrs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	0007ffff 	.word	0x0007ffff

0800199c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80019e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6093      	str	r3, [r2, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a0c:	d101      	bne.n	8001a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a5c:	d101      	bne.n	8001a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <LL_ADC_IsEnabled+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_ADC_IsEnabled+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ace:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ad2:	f043 0204 	orr.w	r2, r3, #4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d101      	bne.n	8001afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e167      	b.n	8001e1e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff f98d 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff3f 	bl	80019f8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff25 	bl	80019d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff5a 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff3e 	bl	8001a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba4:	4ba0      	ldr	r3, [pc, #640]	@ (8001e28 <HAL_ADC_Init+0x2f4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	4aa0      	ldr	r2, [pc, #640]	@ (8001e2c <HAL_ADC_Init+0x2f8>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	099b      	lsrs	r3, r3, #6
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff3c 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff75 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001bfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 8100 	bne.w	8001e0c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 80fc 	bne.w	8001e0c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff35 	bl	8001a98 <LL_ADC_IsEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c38:	f7ff ff2e 	bl	8001a98 <LL_ADC_IsEnabled>
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	487c      	ldr	r0, [pc, #496]	@ (8001e30 <HAL_ADC_Init+0x2fc>)
 8001c40:	f7ff ff2a 	bl	8001a98 <LL_ADC_IsEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4323      	orrs	r3, r4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4878      	ldr	r0, [pc, #480]	@ (8001e34 <HAL_ADC_Init+0x300>)
 8001c54:	f7ff fd42 	bl	80016dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7f5b      	ldrb	r3, [r3, #29]
 8001c5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d106      	bne.n	8001c94 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	045b      	lsls	r3, r3, #17
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d009      	beq.n	8001cb0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b60      	ldr	r3, [pc, #384]	@ (8001e38 <HAL_ADC_Init+0x304>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	69b9      	ldr	r1, [r7, #24]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff14 	bl	8001b0c <LL_ADC_INJ_IsConversionOngoing>
 8001ce4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d16d      	bne.n	8001dc8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d16a      	bne.n	8001dc8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cfe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d0e:	f023 0302 	bic.w	r3, r3, #2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d017      	beq.n	8001d54 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001d32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6911      	ldr	r1, [r2, #16]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001d52:	e013      	b.n	8001d7c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001d62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d78:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d118      	bne.n	8001db8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001da8:	430a      	orrs	r2, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	e007      	b.n	8001dc8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d10c      	bne.n	8001dea <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f023 010f 	bic.w	r1, r3, #15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	1e5a      	subs	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001de8:	e007      	b.n	8001dfa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 020f 	bic.w	r2, r2, #15
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e0a:	e007      	b.n	8001e1c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	f043 0210 	orr.w	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	053e2d63 	.word	0x053e2d63
 8001e30:	50000100 	.word	0x50000100
 8001e34:	50000300 	.word	0x50000300
 8001e38:	fff04007 	.word	0xfff04007

08001e3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e44:	4859      	ldr	r0, [pc, #356]	@ (8001fac <HAL_ADC_Start+0x170>)
 8001e46:	f7ff fda9 	bl	800199c <LL_ADC_GetMultimode>
 8001e4a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fe48 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 809f 	bne.w	8001f9c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_Start+0x30>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e09a      	b.n	8001fa2 <HAL_ADC_Start+0x166>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fd73 	bl	8002960 <ADC_Enable>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 8086 	bne.w	8001f92 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a44      	ldr	r2, [pc, #272]	@ (8001fb0 <HAL_ADC_Start+0x174>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d002      	beq.n	8001eaa <HAL_ADC_Start+0x6e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e001      	b.n	8001eae <HAL_ADC_Start+0x72>
 8001eaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d002      	beq.n	8001ebc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eda:	f023 0206 	bic.w	r2, r3, #6
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	661a      	str	r2, [r3, #96]	@ 0x60
 8001ee2:	e002      	b.n	8001eea <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	221c      	movs	r2, #28
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb0 <HAL_ADC_Start+0x174>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d002      	beq.n	8001f0a <HAL_ADC_Start+0xce>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	e001      	b.n	8001f0e <HAL_ADC_Start+0xd2>
 8001f0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d008      	beq.n	8001f28 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d002      	beq.n	8001f28 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d114      	bne.n	8001f52 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f3e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fdb7 	bl	8001abe <LL_ADC_REG_StartConversion>
 8001f50:	e026      	b.n	8001fa0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a13      	ldr	r2, [pc, #76]	@ (8001fb0 <HAL_ADC_Start+0x174>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_Start+0x132>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e001      	b.n	8001f72 <HAL_ADC_Start+0x136>
 8001f6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00f      	beq.n	8001fa0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f90:	e006      	b.n	8001fa0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001f9a:	e001      	b.n	8001fa0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	50000300 	.word	0x50000300
 8001fb0:	50000100 	.word	0x50000100

08001fb4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fbe:	4867      	ldr	r0, [pc, #412]	@ (800215c <HAL_ADC_PollForConversion+0x1a8>)
 8001fc0:	f7ff fcec 	bl	800199c <LL_ADC_GetMultimode>
 8001fc4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d102      	bne.n	8001fd4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e02a      	b.n	800202a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d002      	beq.n	8001fe6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d111      	bne.n	800200a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0a6      	b.n	8002152 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002004:	2304      	movs	r3, #4
 8002006:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002008:	e00f      	b.n	800202a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800200a:	4854      	ldr	r0, [pc, #336]	@ (800215c <HAL_ADC_PollForConversion+0x1a8>)
 800200c:	f7ff fcd4 	bl	80019b8 <LL_ADC_GetMultiDMATransfer>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e095      	b.n	8002152 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002026:	2304      	movs	r3, #4
 8002028:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800202a:	f7ff fb29 	bl	8001680 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002030:	e021      	b.n	8002076 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d01d      	beq.n	8002076 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800203a:	f7ff fb21 	bl	8001680 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d302      	bcc.n	8002050 <HAL_ADC_PollForConversion+0x9c>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d112      	bne.n	8002076 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10b      	bne.n	8002076 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	f043 0204 	orr.w	r2, r3, #4
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e06d      	b.n	8002152 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0d6      	beq.n	8002032 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fbf3 	bl	8001880 <LL_ADC_REG_IsTriggerSourceSWStart>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7f5b      	ldrb	r3, [r3, #29]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d118      	bne.n	80020da <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d111      	bne.n	80020da <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a20      	ldr	r2, [pc, #128]	@ (8002160 <HAL_ADC_PollForConversion+0x1ac>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d002      	beq.n	80020ea <HAL_ADC_PollForConversion+0x136>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e001      	b.n	80020ee <HAL_ADC_PollForConversion+0x13a>
 80020ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d008      	beq.n	8002108 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d002      	beq.n	8002108 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d104      	bne.n	8002112 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	e00d      	b.n	800212e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_ADC_PollForConversion+0x1ac>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d002      	beq.n	8002122 <HAL_ADC_PollForConversion+0x16e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e001      	b.n	8002126 <HAL_ADC_PollForConversion+0x172>
 8002122:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002126:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d104      	bne.n	800213e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2208      	movs	r2, #8
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e008      	b.n	8002150 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	220c      	movs	r2, #12
 800214e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	50000300 	.word	0x50000300
 8002160:	50000100 	.word	0x50000100

08002164 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0b6      	sub	sp, #216	@ 0xd8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x22>
 800219e:	2302      	movs	r3, #2
 80021a0:	e3c8      	b.n	8002934 <HAL_ADC_ConfigChannel+0x7b4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fc99 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 83ad 	bne.w	8002916 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7ff fb6c 	bl	80018a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fc87 	bl	8001ae6 <LL_ADC_REG_IsConversionOngoing>
 80021d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fc93 	bl	8001b0c <LL_ADC_INJ_IsConversionOngoing>
 80021e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 81d9 	bne.w	80025a6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 81d4 	bne.w	80025a6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002206:	d10f      	bne.n	8002228 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	f7ff fb73 	bl	80018fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fb1a 	bl	800185a <LL_ADC_SetSamplingTimeCommonConfig>
 8002226:	e00e      	b.n	8002246 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	461a      	mov	r2, r3
 8002236:	f7ff fb62 	bl	80018fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb0a 	bl	800185a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d022      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002278:	f7ff fa64 	bl	8001744 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6919      	ldr	r1, [r3, #16]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff fab0 	bl	80017ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x124>
 800229e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x126>
 80022a4:	2300      	movs	r3, #0
 80022a6:	461a      	mov	r2, r3
 80022a8:	f7ff fabc 	bl	8001824 <LL_ADC_SetOffsetSaturation>
 80022ac:	e17b      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fa69 	bl	800178c <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <HAL_ADC_ConfigChannel+0x15a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fa5e 	bl	800178c <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	e01e      	b.n	8002318 <HAL_ADC_ConfigChannel+0x198>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa53 	bl	800178c <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e004      	b.n	8002316 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800230c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x1b0>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	e018      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1e2>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800234c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e004      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002362:	429a      	cmp	r2, r3
 8002364:	d106      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fa22 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fa06 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x220>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f9fb 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	e01e      	b.n	80023de <HAL_ADC_ConfigChannel+0x25e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f9f0 	bl	800178c <LL_ADC_GetOffsetChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80023be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80023c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e004      	b.n	80023dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80023d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x276>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	e018      	b.n	8002428 <HAL_ADC_ConfigChannel+0x2a8>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800240a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002412:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e004      	b.n	8002428 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800241e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f9bf 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff f9a3 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x2e6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f998 	bl	800178c <LL_ADC_GetOffsetChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	e01e      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x324>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f98d 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002484:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002488:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800248c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e004      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x33c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	e016      	b.n	80024ea <HAL_ADC_ConfigChannel+0x36a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80024ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80024d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e004      	b.n	80024ea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d106      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2102      	movs	r1, #2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f95e 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2103      	movs	r1, #3
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f942 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x3a8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2103      	movs	r1, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f937 	bl	800178c <LL_ADC_GetOffsetChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	e017      	b.n	8002558 <HAL_ADC_ConfigChannel+0x3d8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2103      	movs	r1, #3
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f92c 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002542:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800254e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x3f0>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	e011      	b.n	8002594 <HAL_ADC_ConfigChannel+0x414>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800257e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e003      	b.n	8002594 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800258c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	2103      	movs	r1, #3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f909 	bl	80017b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fa74 	bl	8001a98 <LL_ADC_IsEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8140 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f7ff f9c5 	bl	8001954 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a8f      	ldr	r2, [pc, #572]	@ (800280c <HAL_ADC_ConfigChannel+0x68c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	f040 8131 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x47e>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	3301      	adds	r3, #1
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	bf94      	ite	ls
 80025f6:	2301      	movls	r3, #1
 80025f8:	2300      	movhi	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e019      	b.n	8002632 <HAL_ADC_ConfigChannel+0x4b2>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800260c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800260e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800261a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2b09      	cmp	r3, #9
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002632:	2b00      	cmp	r3, #0
 8002634:	d079      	beq.n	800272a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	2b00      	cmp	r3, #0
 8002640:	d107      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x4d2>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	3301      	adds	r3, #1
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002650:	e015      	b.n	800267e <HAL_ADC_ConfigChannel+0x4fe>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002662:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800266e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_ConfigChannel+0x51e>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	3301      	adds	r3, #1
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	e017      	b.n	80026ce <HAL_ADC_ConfigChannel+0x54e>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80026ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80026b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80026ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	ea42 0103 	orr.w	r1, r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x574>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	e018      	b.n	8002726 <HAL_ADC_ConfigChannel+0x5a6>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e003      	b.n	8002718 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f003 021f 	and.w	r2, r3, #31
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002726:	430b      	orrs	r3, r1
 8002728:	e081      	b.n	800282e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x5c6>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	069b      	lsls	r3, r3, #26
 8002740:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002744:	e015      	b.n	8002772 <HAL_ADC_ConfigChannel+0x5f2>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e003      	b.n	800276a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x612>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	3301      	adds	r3, #1
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	e017      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x642>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	61fb      	str	r3, [r7, #28]
  return result;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	ea42 0103 	orr.w	r1, r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x66e>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	3301      	adds	r3, #1
 80027da:	f003 021f 	and.w	r2, r3, #31
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	3b1e      	subs	r3, #30
 80027e6:	051b      	lsls	r3, r3, #20
 80027e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ec:	e01e      	b.n	800282c <HAL_ADC_ConfigChannel+0x6ac>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	613b      	str	r3, [r7, #16]
  return result;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e006      	b.n	8002818 <HAL_ADC_ConfigChannel+0x698>
 800280a:	bf00      	nop
 800280c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	3b1e      	subs	r3, #30
 8002826:	051b      	lsls	r3, r3, #20
 8002828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002832:	4619      	mov	r1, r3
 8002834:	f7ff f863 	bl	80018fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <HAL_ADC_ConfigChannel+0x7bc>)
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d071      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002844:	483e      	ldr	r0, [pc, #248]	@ (8002940 <HAL_ADC_ConfigChannel+0x7c0>)
 8002846:	f7fe ff6f 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 800284a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a3c      	ldr	r2, [pc, #240]	@ (8002944 <HAL_ADC_ConfigChannel+0x7c4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x6e2>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3a      	ldr	r2, [pc, #232]	@ (8002948 <HAL_ADC_ConfigChannel+0x7c8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d127      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d121      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002876:	d157      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800287c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002880:	4619      	mov	r1, r3
 8002882:	482f      	ldr	r0, [pc, #188]	@ (8002940 <HAL_ADC_ConfigChannel+0x7c0>)
 8002884:	f7fe ff3d 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002888:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_ADC_ConfigChannel+0x7cc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	4a30      	ldr	r2, [pc, #192]	@ (8002950 <HAL_ADC_ConfigChannel+0x7d0>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028a2:	e002      	b.n	80028aa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f9      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b0:	e03a      	b.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <HAL_ADC_ConfigChannel+0x7d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d113      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <HAL_ADC_ConfigChannel+0x7d8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02a      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	4619      	mov	r1, r3
 80028dc:	4818      	ldr	r0, [pc, #96]	@ (8002940 <HAL_ADC_ConfigChannel+0x7c0>)
 80028de:	f7fe ff10 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e2:	e021      	b.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <HAL_ADC_ConfigChannel+0x7dc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d11c      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_ADC_ConfigChannel+0x7d8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d011      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002908:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800290c:	4619      	mov	r1, r3
 800290e:	480c      	ldr	r0, [pc, #48]	@ (8002940 <HAL_ADC_ConfigChannel+0x7c0>)
 8002910:	f7fe fef7 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 8002914:	e008      	b.n	8002928 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002930:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002934:	4618      	mov	r0, r3
 8002936:	37d8      	adds	r7, #216	@ 0xd8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	80080000 	.word	0x80080000
 8002940:	50000300 	.word	0x50000300
 8002944:	c3210000 	.word	0xc3210000
 8002948:	90c00010 	.word	0x90c00010
 800294c:	20000000 	.word	0x20000000
 8002950:	053e2d63 	.word	0x053e2d63
 8002954:	c7520000 	.word	0xc7520000
 8002958:	50000100 	.word	0x50000100
 800295c:	cb840000 	.word	0xcb840000

08002960 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f891 	bl	8001a98 <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d169      	bne.n	8002a50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <ADC_Enable+0xfc>)
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e055      	b.n	8002a52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f860 	bl	8001a70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029b0:	482b      	ldr	r0, [pc, #172]	@ (8002a60 <ADC_Enable+0x100>)
 80029b2:	f7fe feb9 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 80029b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c0:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <ADC_Enable+0x104>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	4a28      	ldr	r2, [pc, #160]	@ (8002a68 <ADC_Enable+0x108>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029da:	e002      	b.n	80029e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	3b01      	subs	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f9      	bne.n	80029dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fe4a 	bl	8001680 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ee:	e028      	b.n	8002a42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff f84f 	bl	8001a98 <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d104      	bne.n	8002a0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f833 	bl	8001a70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a0a:	f7fe fe39 	bl	8001680 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d914      	bls.n	8002a42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d00d      	beq.n	8002a42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e007      	b.n	8002a52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d1cf      	bne.n	80029f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	8000003f 	.word	0x8000003f
 8002a60:	50000300 	.word	0x50000300
 8002a64:	20000000 	.word	0x20000000
 8002a68:	053e2d63 	.word	0x053e2d63

08002a6c <LL_ADC_IsEnabled>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_IsEnabled+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_IsEnabled+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d101      	bne.n	8002aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b0a1      	sub	sp, #132	@ 0x84
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e08b      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aee:	d102      	bne.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002af0:	4b41      	ldr	r3, [pc, #260]	@ (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	e001      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e06a      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ffb9 	bl	8002a92 <LL_ADC_REG_IsConversionOngoing>
 8002b20:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffb3 	bl	8002a92 <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14c      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d149      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b38:	4b30      	ldr	r3, [pc, #192]	@ (8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b3a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d028      	beq.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b56:	035b      	lsls	r3, r3, #13
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b60:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b64:	f7ff ff82 	bl	8002a6c <LL_ADC_IsEnabled>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	4823      	ldr	r0, [pc, #140]	@ (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b6c:	f7ff ff7e 	bl	8002a6c <LL_ADC_IsEnabled>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4323      	orrs	r3, r4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d133      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b80:	f023 030f 	bic.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	6811      	ldr	r1, [r2, #0]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	6892      	ldr	r2, [r2, #8]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b92:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b94:	e024      	b.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ba6:	f7ff ff61 	bl	8002a6c <LL_ADC_IsEnabled>
 8002baa:	4604      	mov	r4, r0
 8002bac:	4812      	ldr	r0, [pc, #72]	@ (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bae:	f7ff ff5d 	bl	8002a6c <LL_ADC_IsEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4323      	orrs	r3, r4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bc2:	f023 030f 	bic.w	r3, r3, #15
 8002bc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002bc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bca:	e009      	b.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bde:	e000      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3784      	adds	r7, #132	@ 0x84
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	50000100 	.word	0x50000100
 8002bfc:	50000300 	.word	0x50000300

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	@ (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	@ (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff4c 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7e:	f7ff ff63 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002d82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6978      	ldr	r0, [r7, #20]
 8002d8a:	f7ff ffb3 	bl	8002cf4 <NVIC_EncodePriority>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff82 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff56 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dce:	e15a      	b.n	8003086 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 814c 	beq.w	8003080 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d005      	beq.n	8002e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d130      	bne.n	8002e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e36:	2201      	movs	r2, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 0201 	and.w	r2, r3, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d017      	beq.n	8002e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d123      	bne.n	8002ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	6939      	ldr	r1, [r7, #16]
 8002eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80a6 	beq.w	8003080 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	4b5b      	ldr	r3, [pc, #364]	@ (80030a4 <HAL_GPIO_Init+0x2e4>)
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	4a5a      	ldr	r2, [pc, #360]	@ (80030a4 <HAL_GPIO_Init+0x2e4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f40:	4b58      	ldr	r3, [pc, #352]	@ (80030a4 <HAL_GPIO_Init+0x2e4>)
 8002f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4c:	4a56      	ldr	r2, [pc, #344]	@ (80030a8 <HAL_GPIO_Init+0x2e8>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f76:	d01f      	beq.n	8002fb8 <HAL_GPIO_Init+0x1f8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80030ac <HAL_GPIO_Init+0x2ec>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d019      	beq.n	8002fb4 <HAL_GPIO_Init+0x1f4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a4b      	ldr	r2, [pc, #300]	@ (80030b0 <HAL_GPIO_Init+0x2f0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1f0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80030b4 <HAL_GPIO_Init+0x2f4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1ec>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a49      	ldr	r2, [pc, #292]	@ (80030b8 <HAL_GPIO_Init+0x2f8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a48      	ldr	r2, [pc, #288]	@ (80030bc <HAL_GPIO_Init+0x2fc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002fa0:	2305      	movs	r3, #5
 8002fa2:	e00a      	b.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	e008      	b.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002fac:	2303      	movs	r3, #3
 8002fae:	e004      	b.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fca:	4937      	ldr	r1, [pc, #220]	@ (80030a8 <HAL_GPIO_Init+0x2e8>)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fd8:	4b39      	ldr	r3, [pc, #228]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ffc:	4a30      	ldr	r2, [pc, #192]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003002:	4b2f      	ldr	r3, [pc, #188]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003026:	4a26      	ldr	r2, [pc, #152]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800302c:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003050:	4a1b      	ldr	r2, [pc, #108]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f ae9d 	bne.w	8002dd0 <HAL_GPIO_Init+0x10>
  }
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40010000 	.word	0x40010000
 80030ac:	48000400 	.word	0x48000400
 80030b0:	48000800 	.word	0x48000800
 80030b4:	48000c00 	.word	0x48000c00
 80030b8:	48001000 	.word	0x48001000
 80030bc:	48001400 	.word	0x48001400
 80030c0:	40010400 	.word	0x40010400

080030c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	807b      	strh	r3, [r7, #2]
 80030d0:	4613      	mov	r3, r2
 80030d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4013      	ands	r3, r2
 800310c:	041a      	lsls	r2, r3, #16
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43d9      	mvns	r1, r3
 8003112:	887b      	ldrh	r3, [r7, #2]
 8003114:	400b      	ands	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d141      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b4b      	ldr	r3, [pc, #300]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003142:	d131      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003144:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314a:	4a46      	ldr	r2, [pc, #280]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	4b43      	ldr	r3, [pc, #268]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800315c:	4a41      	ldr	r2, [pc, #260]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003164:	4b40      	ldr	r3, [pc, #256]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2232      	movs	r2, #50	@ 0x32
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a3f      	ldr	r2, [pc, #252]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317a:	e002      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003182:	4b38      	ldr	r3, [pc, #224]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318e:	d102      	bne.n	8003196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f2      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003196:	4b33      	ldr	r3, [pc, #204]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a2:	d158      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e057      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031b8:	e04d      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c0:	d141      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d131      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d6:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2232      	movs	r2, #50	@ 0x32
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	e002      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d102      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d112      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e011      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323a:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003244:	e007      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324e:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40007000 	.word	0x40007000
 8003268:	20000000 	.word	0x20000000
 800326c:	431bde83 	.word	0x431bde83

08003270 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800327a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800327e:	6093      	str	r3, [r2, #8]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007000 	.word	0x40007000

08003290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e2fe      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d075      	beq.n	800339a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ae:	4b97      	ldr	r3, [pc, #604]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	4b94      	ldr	r3, [pc, #592]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x3e>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_OscConfig+0x44>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	4b8d      	ldr	r3, [pc, #564]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <HAL_RCC_OscConfig+0x108>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d157      	bne.n	8003398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e2d9      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x74>
 80032f6:	4b85      	ldr	r3, [pc, #532]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a84      	ldr	r2, [pc, #528]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x98>
 800330e:	4b7f      	ldr	r3, [pc, #508]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7e      	ldr	r2, [pc, #504]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b7c      	ldr	r3, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7b      	ldr	r2, [pc, #492]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003328:	4b78      	ldr	r3, [pc, #480]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a77      	ldr	r2, [pc, #476]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b75      	ldr	r3, [pc, #468]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a74      	ldr	r2, [pc, #464]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe f99a 	bl	8001680 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe f996 	bl	8001680 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	@ 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e29e      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003362:	4b6a      	ldr	r3, [pc, #424]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xc0>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe f986 	bl	8001680 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe f982 	bl	8001680 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e28a      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800338a:	4b60      	ldr	r3, [pc, #384]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0xe8>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b56      	ldr	r3, [pc, #344]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d102      	bne.n	80033c6 <HAL_RCC_OscConfig+0x136>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_OscConfig+0x13c>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d11f      	bne.n	800340c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033cc:	4b4f      	ldr	r3, [pc, #316]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_OscConfig+0x154>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e25d      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b49      	ldr	r3, [pc, #292]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	4946      	ldr	r1, [pc, #280]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033f8:	4b45      	ldr	r3, [pc, #276]	@ (8003510 <HAL_RCC_OscConfig+0x280>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fea7 	bl	8001150 <HAL_InitTick>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d043      	beq.n	8003490 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e249      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003414:	4b3d      	ldr	r3, [pc, #244]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe f92e 	bl	8001680 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe f92a 	bl	8001680 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e232      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343a:	4b34      	ldr	r3, [pc, #208]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b31      	ldr	r3, [pc, #196]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	492d      	ldr	r1, [pc, #180]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
 800345a:	e01a      	b.n	8003492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345c:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2a      	ldr	r2, [pc, #168]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f90a 	bl	8001680 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe f906 	bl	8001680 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e20e      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003482:	4b22      	ldr	r3, [pc, #136]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1e0>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d041      	beq.n	8003522 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b19      	ldr	r3, [pc, #100]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ac:	4a17      	ldr	r2, [pc, #92]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe f8e3 	bl	8001680 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fe f8df 	bl	8001680 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1e7      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d0:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ef      	beq.n	80034be <HAL_RCC_OscConfig+0x22e>
 80034de:	e020      	b.n	8003522 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e0:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	4a09      	ldr	r2, [pc, #36]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe f8c6 	bl	8001680 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f6:	e00d      	b.n	8003514 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe f8c2 	bl	8001680 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d906      	bls.n	8003514 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1ca      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003514:	4b8c      	ldr	r3, [pc, #560]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ea      	bne.n	80034f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80a6 	beq.w	800367c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003534:	4b84      	ldr	r3, [pc, #528]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_OscConfig+0x2b4>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x2b6>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b7f      	ldr	r3, [pc, #508]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	4a7e      	ldr	r2, [pc, #504]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	@ 0x58
 8003556:	4b7c      	ldr	r3, [pc, #496]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003566:	4b79      	ldr	r3, [pc, #484]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003572:	4b76      	ldr	r3, [pc, #472]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fe f87f 	bl	8001680 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe f87b 	bl	8001680 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e183      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003598:	4b6c      	ldr	r3, [pc, #432]	@ (800374c <HAL_RCC_OscConfig+0x4bc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_RCC_OscConfig+0x32e>
 80035ac:	4b66      	ldr	r3, [pc, #408]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	4a65      	ldr	r2, [pc, #404]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035bc:	e024      	b.n	8003608 <HAL_RCC_OscConfig+0x378>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d110      	bne.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035c6:	4b60      	ldr	r3, [pc, #384]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e6:	e00f      	b.n	8003608 <HAL_RCC_OscConfig+0x378>
 80035e8:	4b57      	ldr	r3, [pc, #348]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	4a56      	ldr	r2, [pc, #344]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe f836 	bl	8001680 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe f832 	bl	8001680 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e138      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362e:	4b46      	ldr	r3, [pc, #280]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ed      	beq.n	8003618 <HAL_RCC_OscConfig+0x388>
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe f81f 	bl	8001680 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe f81b 	bl	8001680 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e121      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800365c:	4b3a      	ldr	r3, [pc, #232]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ed      	bne.n	8003646 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	4a34      	ldr	r2, [pc, #208]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d03c      	beq.n	8003702 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003690:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003696:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd ffee 	bl	8001680 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a8:	f7fd ffea 	bl	8001680 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0f2      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ba:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <HAL_RCC_OscConfig+0x418>
 80036c8:	e01b      	b.n	8003702 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd ffd1 	bl	8001680 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e2:	f7fd ffcd 	bl	8001680 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0d5      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f4:	4b14      	ldr	r3, [pc, #80]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ef      	bne.n	80036e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80c9 	beq.w	800389e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b0c      	cmp	r3, #12
 8003716:	f000 8083 	beq.w	8003820 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d15e      	bne.n	80037e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a08      	ldr	r2, [pc, #32]	@ (8003748 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd ffa7 	bl	8001680 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	e00c      	b.n	8003750 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7fd ffa3 	bl	8001680 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d905      	bls.n	8003750 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0ab      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003750:	4b55      	ldr	r3, [pc, #340]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ec      	bne.n	8003736 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375c:	4b52      	ldr	r3, [pc, #328]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_RCC_OscConfig+0x61c>)
 8003762:	4013      	ands	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6a11      	ldr	r1, [r2, #32]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800376c:	3a01      	subs	r2, #1
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003776:	0212      	lsls	r2, r2, #8
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800377e:	0852      	lsrs	r2, r2, #1
 8003780:	3a01      	subs	r2, #1
 8003782:	0552      	lsls	r2, r2, #21
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0652      	lsls	r2, r2, #25
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003796:	06d2      	lsls	r2, r2, #27
 8003798:	430a      	orrs	r2, r1
 800379a:	4943      	ldr	r1, [pc, #268]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 800379c:	4313      	orrs	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b41      	ldr	r3, [pc, #260]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a40      	ldr	r2, [pc, #256]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037ac:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a3d      	ldr	r2, [pc, #244]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd ff62 	bl	8001680 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fd ff5e 	bl	8001680 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e066      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	4b35      	ldr	r3, [pc, #212]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x530>
 80037de:	e05e      	b.n	800389e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 80037e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd ff48 	bl	8001680 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd ff44 	bl	8001680 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04c      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003806:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003812:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4924      	ldr	r1, [pc, #144]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 8003818:	4b25      	ldr	r3, [pc, #148]	@ (80038b0 <HAL_RCC_OscConfig+0x620>)
 800381a:	4013      	ands	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
 800381e:	e03e      	b.n	800389e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e039      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800382c:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <HAL_RCC_OscConfig+0x618>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d12c      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	3b01      	subs	r3, #1
 800384c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d123      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11b      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d113      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d109      	bne.n	800389a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	019f800c 	.word	0x019f800c
 80038b0:	feeefffc 	.word	0xfeeefffc

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e11e      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b91      	ldr	r3, [pc, #580]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d910      	bls.n	80038fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b8e      	ldr	r3, [pc, #568]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 020f 	bic.w	r2, r3, #15
 80038e2:	498c      	ldr	r1, [pc, #560]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e106      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d073      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d129      	bne.n	8003964 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003910:	4b81      	ldr	r3, [pc, #516]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0f4      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003920:	f000 f9d0 	bl	8003cc4 <RCC_GetSysClockFreqFromPLLSource>
 8003924:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4a7c      	ldr	r2, [pc, #496]	@ (8003b1c <HAL_RCC_ClockConfig+0x268>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d93f      	bls.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d033      	beq.n	80039ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d12f      	bne.n	80039ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800394e:	4b72      	ldr	r3, [pc, #456]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003956:	4a70      	ldr	r2, [pc, #448]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800395e:	2380      	movs	r3, #128	@ 0x80
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e024      	b.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0c6      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800397c:	4b66      	ldr	r3, [pc, #408]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0be      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800398c:	f000 f8ce 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003990:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4a61      	ldr	r2, [pc, #388]	@ (8003b1c <HAL_RCC_ClockConfig+0x268>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d909      	bls.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399a:	4b5f      	ldr	r3, [pc, #380]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4957      	ldr	r1, [pc, #348]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c0:	f7fd fe5e 	bl	8001680 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fe5a 	bl	8001680 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e095      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b4e      	ldr	r3, [pc, #312]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a20:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a28:	4a3b      	ldr	r2, [pc, #236]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4936      	ldr	r1, [pc, #216]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b80      	cmp	r3, #128	@ 0x80
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a4a:	4b33      	ldr	r3, [pc, #204]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4a32      	ldr	r2, [pc, #200]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a56:	4b2f      	ldr	r3, [pc, #188]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d21d      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 020f 	bic.w	r2, r3, #15
 8003a6c:	4929      	ldr	r1, [pc, #164]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a74:	f7fd fe04 	bl	8001680 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fd fe00 	bl	8001680 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e03b      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1ed      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4917      	ldr	r1, [pc, #92]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490f      	ldr	r1, [pc, #60]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ade:	f000 f825 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490c      	ldr	r1, [pc, #48]	@ (8003b20 <HAL_RCC_ClockConfig+0x26c>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_RCC_ClockConfig+0x270>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003afe:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x274>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fb24 	bl	8001150 <HAL_InitTick>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	04c4b400 	.word	0x04c4b400
 8003b20:	08006464 	.word	0x08006464
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b32:	4b2c      	ldr	r3, [pc, #176]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e047      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b44:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b50:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e03e      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b56:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d136      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b62:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b80:	4a1a      	ldr	r2, [pc, #104]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8a:	68d2      	ldr	r2, [r2, #12]
 8003b8c:	0a12      	lsrs	r2, r2, #8
 8003b8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9a:	4a13      	ldr	r2, [pc, #76]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	0a12      	lsrs	r2, r2, #8
 8003ba8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
      break;
 8003bb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0e5b      	lsrs	r3, r3, #25
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e001      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd4:	693b      	ldr	r3, [r7, #16]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	007a1200 	.word	0x007a1200

08003bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000000 	.word	0x20000000

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c0c:	f7ff fff0 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4904      	ldr	r1, [pc, #16]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	08006474 	.word	0x08006474

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c38:	f7ff ffda 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0adb      	lsrs	r3, r3, #11
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4904      	ldr	r1, [pc, #16]	@ (8003c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08006474 	.word	0x08006474

08003c60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c70:	4b12      	ldr	r3, [pc, #72]	@ (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0203 	and.w	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	08db      	lsrs	r3, r3, #3
 8003c9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ca2:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <HAL_RCC_GetClockConfig+0x60>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40022000 	.word	0x40022000

08003cc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cca:	4b1e      	ldr	r3, [pc, #120]	@ (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d10c      	bne.n	8003d02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce8:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf2:	68d2      	ldr	r2, [r2, #12]
 8003cf4:	0a12      	lsrs	r2, r2, #8
 8003cf6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
    break;
 8003d00:	e00c      	b.n	8003d1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d02:	4a12      	ldr	r2, [pc, #72]	@ (8003d4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	0a12      	lsrs	r2, r2, #8
 8003d10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d14:	fb02 f303 	mul.w	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]
    break;
 8003d1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	0e5b      	lsrs	r3, r3, #25
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	3301      	adds	r3, #1
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d36:	687b      	ldr	r3, [r7, #4]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40021000 	.word	0x40021000
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	00f42400 	.word	0x00f42400

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d58:	2300      	movs	r3, #0
 8003d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8098 	beq.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b43      	ldr	r3, [pc, #268]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	4b40      	ldr	r3, [pc, #256]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	4a3f      	ldr	r2, [pc, #252]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d96:	2301      	movs	r3, #1
 8003d98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a39      	ldr	r2, [pc, #228]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da6:	f7fd fc6b 	bl	8001680 <HAL_GetTick>
 8003daa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dac:	e009      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fd fc67 	bl	8001680 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d902      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	74fb      	strb	r3, [r7, #19]
        break;
 8003dc0:	e005      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc2:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ef      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d159      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d019      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003df0:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dfc:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e1c:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fc27 	bl	8001680 <HAL_GetTick>
 8003e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e34:	e00b      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd fc23 	bl	8001680 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d902      	bls.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ec      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	74bb      	strb	r3, [r7, #18]
 8003e7e:	e005      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8c:	7c7b      	ldrb	r3, [r7, #17]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	4ba6      	ldr	r3, [pc, #664]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	4aa5      	ldr	r2, [pc, #660]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f023 0203 	bic.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	499c      	ldr	r1, [pc, #624]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ecc:	4b97      	ldr	r3, [pc, #604]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f023 020c 	bic.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	4994      	ldr	r1, [pc, #592]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eee:	4b8f      	ldr	r3, [pc, #572]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	498b      	ldr	r1, [pc, #556]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f10:	4b86      	ldr	r3, [pc, #536]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4983      	ldr	r1, [pc, #524]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f32:	4b7e      	ldr	r3, [pc, #504]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	497a      	ldr	r1, [pc, #488]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f54:	4b75      	ldr	r3, [pc, #468]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	4972      	ldr	r1, [pc, #456]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f76:	4b6d      	ldr	r3, [pc, #436]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4969      	ldr	r1, [pc, #420]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f98:	4b64      	ldr	r3, [pc, #400]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4961      	ldr	r1, [pc, #388]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fba:	4b5c      	ldr	r3, [pc, #368]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	4958      	ldr	r1, [pc, #352]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fdc:	4b53      	ldr	r3, [pc, #332]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	4950      	ldr	r1, [pc, #320]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffa:	d105      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a4a      	ldr	r2, [pc, #296]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004006:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004014:	4b45      	ldr	r3, [pc, #276]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	4942      	ldr	r1, [pc, #264]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004032:	d105      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4b3d      	ldr	r3, [pc, #244]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a3c      	ldr	r2, [pc, #240]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800404c:	4b37      	ldr	r3, [pc, #220]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	4934      	ldr	r1, [pc, #208]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b2f      	ldr	r3, [pc, #188]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a2e      	ldr	r2, [pc, #184]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004084:	4b29      	ldr	r3, [pc, #164]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004092:	4926      	ldr	r1, [pc, #152]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a20      	ldr	r2, [pc, #128]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d015      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040bc:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	4918      	ldr	r1, [pc, #96]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040da:	d105      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040dc:	4b13      	ldr	r3, [pc, #76]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a12      	ldr	r2, [pc, #72]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d015      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	490a      	ldr	r1, [pc, #40]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004112:	d105      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a04      	ldr	r2, [pc, #16]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004120:	7cbb      	ldrb	r3, [r7, #18]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e049      	b.n	80041d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f841 	bl	80041de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f000 fa22 	bl	80045b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d001      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e04a      	b.n	80042a2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a21      	ldr	r2, [pc, #132]	@ (80042b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d018      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x6c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004236:	d013      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x6c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1d      	ldr	r2, [pc, #116]	@ (80042b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x6c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1c      	ldr	r2, [pc, #112]	@ (80042b8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x6c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1a      	ldr	r2, [pc, #104]	@ (80042bc <HAL_TIM_Base_Start_IT+0xc8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x6c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a19      	ldr	r2, [pc, #100]	@ (80042c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d115      	bne.n	800428c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	4b17      	ldr	r3, [pc, #92]	@ (80042c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b06      	cmp	r3, #6
 8004270:	d015      	beq.n	800429e <HAL_TIM_Base_Start_IT+0xaa>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004278:	d011      	beq.n	800429e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	e008      	b.n	800429e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e000      	b.n	80042a0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	00010007 	.word	0x00010007

080042c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d020      	beq.n	800432c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0202 	mvn.w	r2, #2
 80042fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f931 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f923 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f934 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d020      	beq.n	8004378 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0204 	mvn.w	r2, #4
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f90b 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8fd 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f90e 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d020      	beq.n	80043c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0208 	mvn.w	r2, #8
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2204      	movs	r2, #4
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8e5 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f8d7 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f8e8 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d020      	beq.n	8004410 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8bf 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8b1 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8c2 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0201 	mvn.w	r2, #1
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fc fe52 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800445a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f951 	bl	8004704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f949 	bl	8004718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f87c 	bl	80045a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0220 	mvn.w	r2, #32
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f911 	bl	80046f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00c      	beq.n	8004516 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f915 	bl	8004740 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f90d 	bl	8004754 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f905 	bl	8004768 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a42      	ldr	r2, [pc, #264]	@ (80046d4 <TIM_Base_SetConfig+0x11c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00f      	beq.n	80045f0 <TIM_Base_SetConfig+0x38>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d6:	d00b      	beq.n	80045f0 <TIM_Base_SetConfig+0x38>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3f      	ldr	r2, [pc, #252]	@ (80046d8 <TIM_Base_SetConfig+0x120>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <TIM_Base_SetConfig+0x38>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3e      	ldr	r2, [pc, #248]	@ (80046dc <TIM_Base_SetConfig+0x124>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0x38>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	@ (80046e0 <TIM_Base_SetConfig+0x128>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d108      	bne.n	8004602 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a33      	ldr	r2, [pc, #204]	@ (80046d4 <TIM_Base_SetConfig+0x11c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01b      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004610:	d017      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <TIM_Base_SetConfig+0x120>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2f      	ldr	r2, [pc, #188]	@ (80046dc <TIM_Base_SetConfig+0x124>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00f      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2e      	ldr	r2, [pc, #184]	@ (80046e0 <TIM_Base_SetConfig+0x128>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <TIM_Base_SetConfig+0x12c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2c      	ldr	r2, [pc, #176]	@ (80046e8 <TIM_Base_SetConfig+0x130>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2b      	ldr	r2, [pc, #172]	@ (80046ec <TIM_Base_SetConfig+0x134>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d108      	bne.n	8004654 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <TIM_Base_SetConfig+0x11c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0xe8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <TIM_Base_SetConfig+0x128>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0xe8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a16      	ldr	r2, [pc, #88]	@ (80046e4 <TIM_Base_SetConfig+0x12c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0xe8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a15      	ldr	r2, [pc, #84]	@ (80046e8 <TIM_Base_SetConfig+0x130>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0xe8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a14      	ldr	r2, [pc, #80]	@ (80046ec <TIM_Base_SetConfig+0x134>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d103      	bne.n	80046a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	611a      	str	r2, [r3, #16]
  }
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40013400 	.word	0x40013400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800

080046f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e042      	b.n	8004814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fc fe7d 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2224      	movs	r2, #36	@ 0x24
 80047aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fb82 	bl	8004ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8b3 	bl	8004938 <UART_SetConfig>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e01b      	b.n	8004814 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fc01 	bl	8005014 <UART_CheckIdleState>
 8004812:	4603      	mov	r3, r0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	2b20      	cmp	r3, #32
 8004834:	d17b      	bne.n	800492e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_Transmit+0x26>
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e074      	b.n	8004930 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2221      	movs	r2, #33	@ 0x21
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004856:	f7fc ff13 	bl	8001680 <HAL_GetTick>
 800485a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004874:	d108      	bne.n	8004888 <HAL_UART_Transmit+0x6c>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	e003      	b.n	8004890 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004890:	e030      	b.n	80048f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	2180      	movs	r1, #128	@ 0x80
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fc63 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e03d      	b.n	8004930 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10b      	bne.n	80048d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	3302      	adds	r3, #2
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e007      	b.n	80048e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	781a      	ldrb	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1c8      	bne.n	8004892 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2200      	movs	r2, #0
 8004908:	2140      	movs	r1, #64	@ 0x40
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fc2c 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e006      	b.n	8004930 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b08c      	sub	sp, #48	@ 0x30
 800493e:	af00      	add	r7, sp, #0
 8004940:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4313      	orrs	r3, r2
 800495e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4bab      	ldr	r3, [pc, #684]	@ (8004c14 <UART_SetConfig+0x2dc>)
 8004968:	4013      	ands	r3, r2
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004970:	430b      	orrs	r3, r1
 8004972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4aa0      	ldr	r2, [pc, #640]	@ (8004c18 <UART_SetConfig+0x2e0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a0:	4313      	orrs	r3, r2
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	f023 010f 	bic.w	r1, r3, #15
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a91      	ldr	r2, [pc, #580]	@ (8004c1c <UART_SetConfig+0x2e4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d125      	bne.n	8004a28 <UART_SetConfig+0xf0>
 80049dc:	4b90      	ldr	r3, [pc, #576]	@ (8004c20 <UART_SetConfig+0x2e8>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d81a      	bhi.n	8004a20 <UART_SetConfig+0xe8>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <UART_SetConfig+0xb8>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a06:	e0d6      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0e:	e0d2      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a16:	e0ce      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a1e:	e0ca      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a26:	e0c6      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a7d      	ldr	r2, [pc, #500]	@ (8004c24 <UART_SetConfig+0x2ec>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d138      	bne.n	8004aa4 <UART_SetConfig+0x16c>
 8004a32:	4b7b      	ldr	r3, [pc, #492]	@ (8004c20 <UART_SetConfig+0x2e8>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	d82d      	bhi.n	8004a9c <UART_SetConfig+0x164>
 8004a40:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <UART_SetConfig+0x110>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004a9d 	.word	0x08004a9d
 8004a50:	08004a9d 	.word	0x08004a9d
 8004a54:	08004a9d 	.word	0x08004a9d
 8004a58:	08004a8d 	.word	0x08004a8d
 8004a5c:	08004a9d 	.word	0x08004a9d
 8004a60:	08004a9d 	.word	0x08004a9d
 8004a64:	08004a9d 	.word	0x08004a9d
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	08004a9d 	.word	0x08004a9d
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004a95 	.word	0x08004a95
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	e098      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a84:	2302      	movs	r3, #2
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8a:	e094      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a92:	e090      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a94:	2308      	movs	r3, #8
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9a:	e08c      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa2:	e088      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8004c28 <UART_SetConfig+0x2f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d125      	bne.n	8004afa <UART_SetConfig+0x1c2>
 8004aae:	4b5c      	ldr	r3, [pc, #368]	@ (8004c20 <UART_SetConfig+0x2e8>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ab8:	2b30      	cmp	r3, #48	@ 0x30
 8004aba:	d016      	beq.n	8004aea <UART_SetConfig+0x1b2>
 8004abc:	2b30      	cmp	r3, #48	@ 0x30
 8004abe:	d818      	bhi.n	8004af2 <UART_SetConfig+0x1ba>
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d00a      	beq.n	8004ada <UART_SetConfig+0x1a2>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d814      	bhi.n	8004af2 <UART_SetConfig+0x1ba>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <UART_SetConfig+0x19a>
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d008      	beq.n	8004ae2 <UART_SetConfig+0x1aa>
 8004ad0:	e00f      	b.n	8004af2 <UART_SetConfig+0x1ba>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad8:	e06d      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004ada:	2302      	movs	r3, #2
 8004adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae0:	e069      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae8:	e065      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004aea:	2308      	movs	r3, #8
 8004aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af0:	e061      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004af2:	2310      	movs	r3, #16
 8004af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af8:	e05d      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a4b      	ldr	r2, [pc, #300]	@ (8004c2c <UART_SetConfig+0x2f4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d125      	bne.n	8004b50 <UART_SetConfig+0x218>
 8004b04:	4b46      	ldr	r3, [pc, #280]	@ (8004c20 <UART_SetConfig+0x2e8>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b10:	d016      	beq.n	8004b40 <UART_SetConfig+0x208>
 8004b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b14:	d818      	bhi.n	8004b48 <UART_SetConfig+0x210>
 8004b16:	2b80      	cmp	r3, #128	@ 0x80
 8004b18:	d00a      	beq.n	8004b30 <UART_SetConfig+0x1f8>
 8004b1a:	2b80      	cmp	r3, #128	@ 0x80
 8004b1c:	d814      	bhi.n	8004b48 <UART_SetConfig+0x210>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <UART_SetConfig+0x1f0>
 8004b22:	2b40      	cmp	r3, #64	@ 0x40
 8004b24:	d008      	beq.n	8004b38 <UART_SetConfig+0x200>
 8004b26:	e00f      	b.n	8004b48 <UART_SetConfig+0x210>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2e:	e042      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b36:	e03e      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3e:	e03a      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b40:	2308      	movs	r3, #8
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e036      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e032      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a30      	ldr	r2, [pc, #192]	@ (8004c18 <UART_SetConfig+0x2e0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d12a      	bne.n	8004bb0 <UART_SetConfig+0x278>
 8004b5a:	4b31      	ldr	r3, [pc, #196]	@ (8004c20 <UART_SetConfig+0x2e8>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b68:	d01a      	beq.n	8004ba0 <UART_SetConfig+0x268>
 8004b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0x270>
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b74:	d00c      	beq.n	8004b90 <UART_SetConfig+0x258>
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7a:	d815      	bhi.n	8004ba8 <UART_SetConfig+0x270>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <UART_SetConfig+0x250>
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b84:	d008      	beq.n	8004b98 <UART_SetConfig+0x260>
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x270>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e012      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e00e      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	e00a      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e006      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bae:	e002      	b.n	8004bb6 <UART_SetConfig+0x27e>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <UART_SetConfig+0x2e0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f040 80a8 	bne.w	8004d12 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d834      	bhi.n	8004c34 <UART_SetConfig+0x2fc>
 8004bca:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0x298>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c35 	.word	0x08004c35
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c35 	.word	0x08004c35
 8004be0:	08004c03 	.word	0x08004c03
 8004be4:	08004c35 	.word	0x08004c35
 8004be8:	08004c35 	.word	0x08004c35
 8004bec:	08004c35 	.word	0x08004c35
 8004bf0:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7ff f808 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bfa:	e021      	b.n	8004c40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c30 <UART_SetConfig+0x2f8>)
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c00:	e01e      	b.n	8004c40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fe ff93 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8004c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c08:	e01a      	b.n	8004c40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c10:	e016      	b.n	8004c40 <UART_SetConfig+0x308>
 8004c12:	bf00      	nop
 8004c14:	cfff69f3 	.word	0xcfff69f3
 8004c18:	40008000 	.word	0x40008000
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40004400 	.word	0x40004400
 8004c28:	40004800 	.word	0x40004800
 8004c2c:	40004c00 	.word	0x40004c00
 8004c30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 812a 	beq.w	8004e9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ec8 <UART_SetConfig+0x590>)
 8004c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c52:	461a      	mov	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d305      	bcc.n	8004c78 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d903      	bls.n	8004c80 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c7e:	e10d      	b.n	8004e9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	2200      	movs	r2, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	60fa      	str	r2, [r7, #12]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	4a8e      	ldr	r2, [pc, #568]	@ (8004ec8 <UART_SetConfig+0x590>)
 8004c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2200      	movs	r2, #0
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ca2:	f7fb fefb 	bl	8000a9c <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	020b      	lsls	r3, r1, #8
 8004cb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cbc:	0202      	lsls	r2, r0, #8
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	6849      	ldr	r1, [r1, #4]
 8004cc2:	0849      	lsrs	r1, r1, #1
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4605      	mov	r5, r0
 8004cca:	eb12 0804 	adds.w	r8, r2, r4
 8004cce:	eb43 0905 	adc.w	r9, r3, r5
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	469a      	mov	sl, r3
 8004cda:	4693      	mov	fp, r2
 8004cdc:	4652      	mov	r2, sl
 8004cde:	465b      	mov	r3, fp
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb feda 	bl	8000a9c <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf6:	d308      	bcc.n	8004d0a <UART_SetConfig+0x3d2>
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cfe:	d204      	bcs.n	8004d0a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	60da      	str	r2, [r3, #12]
 8004d08:	e0c8      	b.n	8004e9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d10:	e0c4      	b.n	8004e9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1a:	d167      	bne.n	8004dec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d828      	bhi.n	8004d76 <UART_SetConfig+0x43e>
 8004d24:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <UART_SetConfig+0x3f4>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d77 	.word	0x08004d77
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d77 	.word	0x08004d77
 8004d44:	08004d77 	.word	0x08004d77
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fe ff5a 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8004d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d56:	e014      	b.n	8004d82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe ff6c 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b5a      	ldr	r3, [pc, #360]	@ (8004ecc <UART_SetConfig+0x594>)
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d64:	e00d      	b.n	8004d82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe fee1 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8004d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d6c:	e009      	b.n	8004d82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d74:	e005      	b.n	8004d82 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8089 	beq.w	8004e9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec8 <UART_SetConfig+0x590>)
 8004d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d94:	461a      	mov	r2, r3
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9c:	005a      	lsls	r2, r3, #1
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	441a      	add	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d916      	bls.n	8004de4 <UART_SetConfig+0x4ac>
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d212      	bcs.n	8004de4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f023 030f 	bic.w	r3, r3, #15
 8004dc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	8bfb      	ldrh	r3, [r7, #30]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	8bfa      	ldrh	r2, [r7, #30]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	e05b      	b.n	8004e9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004dea:	e057      	b.n	8004e9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d828      	bhi.n	8004e46 <UART_SetConfig+0x50e>
 8004df4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dfc <UART_SetConfig+0x4c4>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e47 	.word	0x08004e47
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e47 	.word	0x08004e47
 8004e14:	08004e47 	.word	0x08004e47
 8004e18:	08004e47 	.word	0x08004e47
 8004e1c:	08004e3f 	.word	0x08004e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7fe fef2 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8004e24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e26:	e014      	b.n	8004e52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7fe ff04 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e2e:	e010      	b.n	8004e52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e30:	4b26      	ldr	r3, [pc, #152]	@ (8004ecc <UART_SetConfig+0x594>)
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e34:	e00d      	b.n	8004e52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e36:	f7fe fe79 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8004e3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e3c:	e009      	b.n	8004e52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e44:	e005      	b.n	8004e52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e50:	bf00      	nop
    }

    if (pclk != 0U)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d021      	beq.n	8004e9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec8 <UART_SetConfig+0x590>)
 8004e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	441a      	add	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d909      	bls.n	8004e96 <UART_SetConfig+0x55e>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e88:	d205      	bcs.n	8004e96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
 8004e94:	e002      	b.n	8004e9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004eb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3730      	adds	r7, #48	@ 0x30
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	0800647c 	.word	0x0800647c
 8004ecc:	00f42400 	.word	0x00f42400

08004ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fce:	d10a      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b098      	sub	sp, #96	@ 0x60
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005024:	f7fc fb2c 	bl	8001680 <HAL_GetTick>
 8005028:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d12f      	bne.n	8005098 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f88e 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d022      	beq.n	8005098 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005066:	653b      	str	r3, [r7, #80]	@ 0x50
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005070:	647b      	str	r3, [r7, #68]	@ 0x44
 8005072:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e063      	b.n	8005160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d149      	bne.n	800513a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ae:	2200      	movs	r2, #0
 80050b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f857 	bl	8005168 <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03c      	beq.n	800513a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	623b      	str	r3, [r7, #32]
   return(result);
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050de:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e6      	bne.n	80050c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	60fb      	str	r3, [r7, #12]
   return(result);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005112:	61fa      	str	r2, [r7, #28]
 8005114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	617b      	str	r3, [r7, #20]
   return(result);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e012      	b.n	8005160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3758      	adds	r7, #88	@ 0x58
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005178:	e04f      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d04b      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fc fa7d 	bl	8001680 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <UART_WaitOnFlagUntilTimeout+0x30>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e04e      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d037      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0xb2>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b80      	cmp	r3, #128	@ 0x80
 80051ae:	d034      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0xb2>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d031      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d110      	bne.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2208      	movs	r2, #8
 80051ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f838 	bl	8005242 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2208      	movs	r2, #8
 80051d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e029      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f4:	d111      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f81e 	bl	8005242 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e00f      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	429a      	cmp	r2, r3
 8005236:	d0a0      	beq.n	800517a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b095      	sub	sp, #84	@ 0x54
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800525e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005268:	643b      	str	r3, [r7, #64]	@ 0x40
 800526a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800526e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e6      	bne.n	800524a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	61fb      	str	r3, [r7, #28]
   return(result);
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e3      	bne.n	800527c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d118      	bne.n	80052ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	613b      	str	r3, [r7, #16]
   return(result);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e6      	bne.n	80052bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005302:	bf00      	nop
 8005304:	3754      	adds	r7, #84	@ 0x54
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UARTEx_DisableFifoMode+0x16>
 8005320:	2302      	movs	r3, #2
 8005322:	e027      	b.n	8005374 <HAL_UARTEx_DisableFifoMode+0x66>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	@ 0x24
 8005330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005352:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e02d      	b.n	80053f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	@ 0x24
 80053a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0201 	bic.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f84f 	bl	8005478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005410:	2302      	movs	r3, #2
 8005412:	e02d      	b.n	8005470 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	@ 0x24
 8005420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f811 	bl	8005478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005484:	2b00      	cmp	r3, #0
 8005486:	d108      	bne.n	800549a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005498:	e031      	b.n	80054fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800549a:	2308      	movs	r3, #8
 800549c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800549e:	2308      	movs	r3, #8
 80054a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	0e5b      	lsrs	r3, r3, #25
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	0f5b      	lsrs	r3, r3, #29
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054c2:	7bbb      	ldrb	r3, [r7, #14]
 80054c4:	7b3a      	ldrb	r2, [r7, #12]
 80054c6:	4911      	ldr	r1, [pc, #68]	@ (800550c <UARTEx_SetNbDataToProcess+0x94>)
 80054c8:	5c8a      	ldrb	r2, [r1, r2]
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054ce:	7b3a      	ldrb	r2, [r7, #12]
 80054d0:	490f      	ldr	r1, [pc, #60]	@ (8005510 <UARTEx_SetNbDataToProcess+0x98>)
 80054d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054d8:	b29a      	uxth	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	7b7a      	ldrb	r2, [r7, #13]
 80054e4:	4909      	ldr	r1, [pc, #36]	@ (800550c <UARTEx_SetNbDataToProcess+0x94>)
 80054e6:	5c8a      	ldrb	r2, [r1, r2]
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054ec:	7b7a      	ldrb	r2, [r7, #13]
 80054ee:	4908      	ldr	r1, [pc, #32]	@ (8005510 <UARTEx_SetNbDataToProcess+0x98>)
 80054f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	08006494 	.word	0x08006494
 8005510:	0800649c 	.word	0x0800649c

08005514 <std>:
 8005514:	2300      	movs	r3, #0
 8005516:	b510      	push	{r4, lr}
 8005518:	4604      	mov	r4, r0
 800551a:	e9c0 3300 	strd	r3, r3, [r0]
 800551e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005522:	6083      	str	r3, [r0, #8]
 8005524:	8181      	strh	r1, [r0, #12]
 8005526:	6643      	str	r3, [r0, #100]	@ 0x64
 8005528:	81c2      	strh	r2, [r0, #14]
 800552a:	6183      	str	r3, [r0, #24]
 800552c:	4619      	mov	r1, r3
 800552e:	2208      	movs	r2, #8
 8005530:	305c      	adds	r0, #92	@ 0x5c
 8005532:	f000 f9f9 	bl	8005928 <memset>
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <std+0x58>)
 8005538:	6263      	str	r3, [r4, #36]	@ 0x24
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <std+0x5c>)
 800553c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <std+0x60>)
 8005540:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <std+0x64>)
 8005544:	6323      	str	r3, [r4, #48]	@ 0x30
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <std+0x68>)
 8005548:	6224      	str	r4, [r4, #32]
 800554a:	429c      	cmp	r4, r3
 800554c:	d006      	beq.n	800555c <std+0x48>
 800554e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005552:	4294      	cmp	r4, r2
 8005554:	d002      	beq.n	800555c <std+0x48>
 8005556:	33d0      	adds	r3, #208	@ 0xd0
 8005558:	429c      	cmp	r4, r3
 800555a:	d105      	bne.n	8005568 <std+0x54>
 800555c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005564:	f000 ba58 	b.w	8005a18 <__retarget_lock_init_recursive>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	bf00      	nop
 800556c:	08005779 	.word	0x08005779
 8005570:	0800579b 	.word	0x0800579b
 8005574:	080057d3 	.word	0x080057d3
 8005578:	080057f7 	.word	0x080057f7
 800557c:	200001d8 	.word	0x200001d8

08005580 <stdio_exit_handler>:
 8005580:	4a02      	ldr	r2, [pc, #8]	@ (800558c <stdio_exit_handler+0xc>)
 8005582:	4903      	ldr	r1, [pc, #12]	@ (8005590 <stdio_exit_handler+0x10>)
 8005584:	4803      	ldr	r0, [pc, #12]	@ (8005594 <stdio_exit_handler+0x14>)
 8005586:	f000 b869 	b.w	800565c <_fwalk_sglue>
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c
 8005590:	080062b9 	.word	0x080062b9
 8005594:	2000001c 	.word	0x2000001c

08005598 <cleanup_stdio>:
 8005598:	6841      	ldr	r1, [r0, #4]
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <cleanup_stdio+0x34>)
 800559c:	4299      	cmp	r1, r3
 800559e:	b510      	push	{r4, lr}
 80055a0:	4604      	mov	r4, r0
 80055a2:	d001      	beq.n	80055a8 <cleanup_stdio+0x10>
 80055a4:	f000 fe88 	bl	80062b8 <_fflush_r>
 80055a8:	68a1      	ldr	r1, [r4, #8]
 80055aa:	4b09      	ldr	r3, [pc, #36]	@ (80055d0 <cleanup_stdio+0x38>)
 80055ac:	4299      	cmp	r1, r3
 80055ae:	d002      	beq.n	80055b6 <cleanup_stdio+0x1e>
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fe81 	bl	80062b8 <_fflush_r>
 80055b6:	68e1      	ldr	r1, [r4, #12]
 80055b8:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <cleanup_stdio+0x3c>)
 80055ba:	4299      	cmp	r1, r3
 80055bc:	d004      	beq.n	80055c8 <cleanup_stdio+0x30>
 80055be:	4620      	mov	r0, r4
 80055c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c4:	f000 be78 	b.w	80062b8 <_fflush_r>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	bf00      	nop
 80055cc:	200001d8 	.word	0x200001d8
 80055d0:	20000240 	.word	0x20000240
 80055d4:	200002a8 	.word	0x200002a8

080055d8 <global_stdio_init.part.0>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <global_stdio_init.part.0+0x30>)
 80055dc:	4c0b      	ldr	r4, [pc, #44]	@ (800560c <global_stdio_init.part.0+0x34>)
 80055de:	4a0c      	ldr	r2, [pc, #48]	@ (8005610 <global_stdio_init.part.0+0x38>)
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	4620      	mov	r0, r4
 80055e4:	2200      	movs	r2, #0
 80055e6:	2104      	movs	r1, #4
 80055e8:	f7ff ff94 	bl	8005514 <std>
 80055ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055f0:	2201      	movs	r2, #1
 80055f2:	2109      	movs	r1, #9
 80055f4:	f7ff ff8e 	bl	8005514 <std>
 80055f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055fc:	2202      	movs	r2, #2
 80055fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005602:	2112      	movs	r1, #18
 8005604:	f7ff bf86 	b.w	8005514 <std>
 8005608:	20000310 	.word	0x20000310
 800560c:	200001d8 	.word	0x200001d8
 8005610:	08005581 	.word	0x08005581

08005614 <__sfp_lock_acquire>:
 8005614:	4801      	ldr	r0, [pc, #4]	@ (800561c <__sfp_lock_acquire+0x8>)
 8005616:	f000 ba00 	b.w	8005a1a <__retarget_lock_acquire_recursive>
 800561a:	bf00      	nop
 800561c:	20000319 	.word	0x20000319

08005620 <__sfp_lock_release>:
 8005620:	4801      	ldr	r0, [pc, #4]	@ (8005628 <__sfp_lock_release+0x8>)
 8005622:	f000 b9fb 	b.w	8005a1c <__retarget_lock_release_recursive>
 8005626:	bf00      	nop
 8005628:	20000319 	.word	0x20000319

0800562c <__sinit>:
 800562c:	b510      	push	{r4, lr}
 800562e:	4604      	mov	r4, r0
 8005630:	f7ff fff0 	bl	8005614 <__sfp_lock_acquire>
 8005634:	6a23      	ldr	r3, [r4, #32]
 8005636:	b11b      	cbz	r3, 8005640 <__sinit+0x14>
 8005638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563c:	f7ff bff0 	b.w	8005620 <__sfp_lock_release>
 8005640:	4b04      	ldr	r3, [pc, #16]	@ (8005654 <__sinit+0x28>)
 8005642:	6223      	str	r3, [r4, #32]
 8005644:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <__sinit+0x2c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f5      	bne.n	8005638 <__sinit+0xc>
 800564c:	f7ff ffc4 	bl	80055d8 <global_stdio_init.part.0>
 8005650:	e7f2      	b.n	8005638 <__sinit+0xc>
 8005652:	bf00      	nop
 8005654:	08005599 	.word	0x08005599
 8005658:	20000310 	.word	0x20000310

0800565c <_fwalk_sglue>:
 800565c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005660:	4607      	mov	r7, r0
 8005662:	4688      	mov	r8, r1
 8005664:	4614      	mov	r4, r2
 8005666:	2600      	movs	r6, #0
 8005668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800566c:	f1b9 0901 	subs.w	r9, r9, #1
 8005670:	d505      	bpl.n	800567e <_fwalk_sglue+0x22>
 8005672:	6824      	ldr	r4, [r4, #0]
 8005674:	2c00      	cmp	r4, #0
 8005676:	d1f7      	bne.n	8005668 <_fwalk_sglue+0xc>
 8005678:	4630      	mov	r0, r6
 800567a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d907      	bls.n	8005694 <_fwalk_sglue+0x38>
 8005684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005688:	3301      	adds	r3, #1
 800568a:	d003      	beq.n	8005694 <_fwalk_sglue+0x38>
 800568c:	4629      	mov	r1, r5
 800568e:	4638      	mov	r0, r7
 8005690:	47c0      	blx	r8
 8005692:	4306      	orrs	r6, r0
 8005694:	3568      	adds	r5, #104	@ 0x68
 8005696:	e7e9      	b.n	800566c <_fwalk_sglue+0x10>

08005698 <iprintf>:
 8005698:	b40f      	push	{r0, r1, r2, r3}
 800569a:	b507      	push	{r0, r1, r2, lr}
 800569c:	4906      	ldr	r1, [pc, #24]	@ (80056b8 <iprintf+0x20>)
 800569e:	ab04      	add	r3, sp, #16
 80056a0:	6808      	ldr	r0, [r1, #0]
 80056a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a6:	6881      	ldr	r1, [r0, #8]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	f000 fadb 	bl	8005c64 <_vfiprintf_r>
 80056ae:	b003      	add	sp, #12
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	b004      	add	sp, #16
 80056b6:	4770      	bx	lr
 80056b8:	20000018 	.word	0x20000018

080056bc <_puts_r>:
 80056bc:	6a03      	ldr	r3, [r0, #32]
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	6884      	ldr	r4, [r0, #8]
 80056c2:	4605      	mov	r5, r0
 80056c4:	460e      	mov	r6, r1
 80056c6:	b90b      	cbnz	r3, 80056cc <_puts_r+0x10>
 80056c8:	f7ff ffb0 	bl	800562c <__sinit>
 80056cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ce:	07db      	lsls	r3, r3, #31
 80056d0:	d405      	bmi.n	80056de <_puts_r+0x22>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	0598      	lsls	r0, r3, #22
 80056d6:	d402      	bmi.n	80056de <_puts_r+0x22>
 80056d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056da:	f000 f99e 	bl	8005a1a <__retarget_lock_acquire_recursive>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	0719      	lsls	r1, r3, #28
 80056e2:	d502      	bpl.n	80056ea <_puts_r+0x2e>
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d135      	bne.n	8005756 <_puts_r+0x9a>
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 f8c5 	bl	800587c <__swsetup_r>
 80056f2:	b380      	cbz	r0, 8005756 <_puts_r+0x9a>
 80056f4:	f04f 35ff 	mov.w	r5, #4294967295
 80056f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056fa:	07da      	lsls	r2, r3, #31
 80056fc:	d405      	bmi.n	800570a <_puts_r+0x4e>
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	059b      	lsls	r3, r3, #22
 8005702:	d402      	bmi.n	800570a <_puts_r+0x4e>
 8005704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005706:	f000 f989 	bl	8005a1c <__retarget_lock_release_recursive>
 800570a:	4628      	mov	r0, r5
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	2b00      	cmp	r3, #0
 8005710:	da04      	bge.n	800571c <_puts_r+0x60>
 8005712:	69a2      	ldr	r2, [r4, #24]
 8005714:	429a      	cmp	r2, r3
 8005716:	dc17      	bgt.n	8005748 <_puts_r+0x8c>
 8005718:	290a      	cmp	r1, #10
 800571a:	d015      	beq.n	8005748 <_puts_r+0x8c>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	7019      	strb	r1, [r3, #0]
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800572a:	3b01      	subs	r3, #1
 800572c:	60a3      	str	r3, [r4, #8]
 800572e:	2900      	cmp	r1, #0
 8005730:	d1ed      	bne.n	800570e <_puts_r+0x52>
 8005732:	2b00      	cmp	r3, #0
 8005734:	da11      	bge.n	800575a <_puts_r+0x9e>
 8005736:	4622      	mov	r2, r4
 8005738:	210a      	movs	r1, #10
 800573a:	4628      	mov	r0, r5
 800573c:	f000 f85f 	bl	80057fe <__swbuf_r>
 8005740:	3001      	adds	r0, #1
 8005742:	d0d7      	beq.n	80056f4 <_puts_r+0x38>
 8005744:	250a      	movs	r5, #10
 8005746:	e7d7      	b.n	80056f8 <_puts_r+0x3c>
 8005748:	4622      	mov	r2, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f000 f857 	bl	80057fe <__swbuf_r>
 8005750:	3001      	adds	r0, #1
 8005752:	d1e7      	bne.n	8005724 <_puts_r+0x68>
 8005754:	e7ce      	b.n	80056f4 <_puts_r+0x38>
 8005756:	3e01      	subs	r6, #1
 8005758:	e7e4      	b.n	8005724 <_puts_r+0x68>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	220a      	movs	r2, #10
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e7ee      	b.n	8005744 <_puts_r+0x88>
	...

08005768 <puts>:
 8005768:	4b02      	ldr	r3, [pc, #8]	@ (8005774 <puts+0xc>)
 800576a:	4601      	mov	r1, r0
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	f7ff bfa5 	b.w	80056bc <_puts_r>
 8005772:	bf00      	nop
 8005774:	20000018 	.word	0x20000018

08005778 <__sread>:
 8005778:	b510      	push	{r4, lr}
 800577a:	460c      	mov	r4, r1
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	f000 f8fc 	bl	800597c <_read_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	bfab      	itete	ge
 8005788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800578a:	89a3      	ldrhlt	r3, [r4, #12]
 800578c:	181b      	addge	r3, r3, r0
 800578e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005792:	bfac      	ite	ge
 8005794:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005796:	81a3      	strhlt	r3, [r4, #12]
 8005798:	bd10      	pop	{r4, pc}

0800579a <__swrite>:
 800579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	461f      	mov	r7, r3
 80057a0:	898b      	ldrh	r3, [r1, #12]
 80057a2:	05db      	lsls	r3, r3, #23
 80057a4:	4605      	mov	r5, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	4616      	mov	r6, r2
 80057aa:	d505      	bpl.n	80057b8 <__swrite+0x1e>
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	2302      	movs	r3, #2
 80057b2:	2200      	movs	r2, #0
 80057b4:	f000 f8d0 	bl	8005958 <_lseek_r>
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	4628      	mov	r0, r5
 80057ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	f000 b8e7 	b.w	80059a0 <_write_r>

080057d2 <__sseek>:
 80057d2:	b510      	push	{r4, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057da:	f000 f8bd 	bl	8005958 <_lseek_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	bf15      	itete	ne
 80057e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057ee:	81a3      	strheq	r3, [r4, #12]
 80057f0:	bf18      	it	ne
 80057f2:	81a3      	strhne	r3, [r4, #12]
 80057f4:	bd10      	pop	{r4, pc}

080057f6 <__sclose>:
 80057f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fa:	f000 b89d 	b.w	8005938 <_close_r>

080057fe <__swbuf_r>:
 80057fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005800:	460e      	mov	r6, r1
 8005802:	4614      	mov	r4, r2
 8005804:	4605      	mov	r5, r0
 8005806:	b118      	cbz	r0, 8005810 <__swbuf_r+0x12>
 8005808:	6a03      	ldr	r3, [r0, #32]
 800580a:	b90b      	cbnz	r3, 8005810 <__swbuf_r+0x12>
 800580c:	f7ff ff0e 	bl	800562c <__sinit>
 8005810:	69a3      	ldr	r3, [r4, #24]
 8005812:	60a3      	str	r3, [r4, #8]
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	071a      	lsls	r2, r3, #28
 8005818:	d501      	bpl.n	800581e <__swbuf_r+0x20>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	b943      	cbnz	r3, 8005830 <__swbuf_r+0x32>
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f82b 	bl	800587c <__swsetup_r>
 8005826:	b118      	cbz	r0, 8005830 <__swbuf_r+0x32>
 8005828:	f04f 37ff 	mov.w	r7, #4294967295
 800582c:	4638      	mov	r0, r7
 800582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	6922      	ldr	r2, [r4, #16]
 8005834:	1a98      	subs	r0, r3, r2
 8005836:	6963      	ldr	r3, [r4, #20]
 8005838:	b2f6      	uxtb	r6, r6
 800583a:	4283      	cmp	r3, r0
 800583c:	4637      	mov	r7, r6
 800583e:	dc05      	bgt.n	800584c <__swbuf_r+0x4e>
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fd38 	bl	80062b8 <_fflush_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	d1ed      	bne.n	8005828 <__swbuf_r+0x2a>
 800584c:	68a3      	ldr	r3, [r4, #8]
 800584e:	3b01      	subs	r3, #1
 8005850:	60a3      	str	r3, [r4, #8]
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	6022      	str	r2, [r4, #0]
 8005858:	701e      	strb	r6, [r3, #0]
 800585a:	6962      	ldr	r2, [r4, #20]
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	429a      	cmp	r2, r3
 8005860:	d004      	beq.n	800586c <__swbuf_r+0x6e>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	07db      	lsls	r3, r3, #31
 8005866:	d5e1      	bpl.n	800582c <__swbuf_r+0x2e>
 8005868:	2e0a      	cmp	r6, #10
 800586a:	d1df      	bne.n	800582c <__swbuf_r+0x2e>
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fd22 	bl	80062b8 <_fflush_r>
 8005874:	2800      	cmp	r0, #0
 8005876:	d0d9      	beq.n	800582c <__swbuf_r+0x2e>
 8005878:	e7d6      	b.n	8005828 <__swbuf_r+0x2a>
	...

0800587c <__swsetup_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4b29      	ldr	r3, [pc, #164]	@ (8005924 <__swsetup_r+0xa8>)
 8005880:	4605      	mov	r5, r0
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	460c      	mov	r4, r1
 8005886:	b118      	cbz	r0, 8005890 <__swsetup_r+0x14>
 8005888:	6a03      	ldr	r3, [r0, #32]
 800588a:	b90b      	cbnz	r3, 8005890 <__swsetup_r+0x14>
 800588c:	f7ff fece 	bl	800562c <__sinit>
 8005890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005894:	0719      	lsls	r1, r3, #28
 8005896:	d422      	bmi.n	80058de <__swsetup_r+0x62>
 8005898:	06da      	lsls	r2, r3, #27
 800589a:	d407      	bmi.n	80058ac <__swsetup_r+0x30>
 800589c:	2209      	movs	r2, #9
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058a4:	81a3      	strh	r3, [r4, #12]
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	e033      	b.n	8005914 <__swsetup_r+0x98>
 80058ac:	0758      	lsls	r0, r3, #29
 80058ae:	d512      	bpl.n	80058d6 <__swsetup_r+0x5a>
 80058b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058b2:	b141      	cbz	r1, 80058c6 <__swsetup_r+0x4a>
 80058b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058b8:	4299      	cmp	r1, r3
 80058ba:	d002      	beq.n	80058c2 <__swsetup_r+0x46>
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 f8af 	bl	8005a20 <_free_r>
 80058c2:	2300      	movs	r3, #0
 80058c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	f043 0308 	orr.w	r3, r3, #8
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	b94b      	cbnz	r3, 80058f6 <__swsetup_r+0x7a>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ec:	d003      	beq.n	80058f6 <__swsetup_r+0x7a>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fd2f 	bl	8006354 <__smakebuf_r>
 80058f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fa:	f013 0201 	ands.w	r2, r3, #1
 80058fe:	d00a      	beq.n	8005916 <__swsetup_r+0x9a>
 8005900:	2200      	movs	r2, #0
 8005902:	60a2      	str	r2, [r4, #8]
 8005904:	6962      	ldr	r2, [r4, #20]
 8005906:	4252      	negs	r2, r2
 8005908:	61a2      	str	r2, [r4, #24]
 800590a:	6922      	ldr	r2, [r4, #16]
 800590c:	b942      	cbnz	r2, 8005920 <__swsetup_r+0xa4>
 800590e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005912:	d1c5      	bne.n	80058a0 <__swsetup_r+0x24>
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	0799      	lsls	r1, r3, #30
 8005918:	bf58      	it	pl
 800591a:	6962      	ldrpl	r2, [r4, #20]
 800591c:	60a2      	str	r2, [r4, #8]
 800591e:	e7f4      	b.n	800590a <__swsetup_r+0x8e>
 8005920:	2000      	movs	r0, #0
 8005922:	e7f7      	b.n	8005914 <__swsetup_r+0x98>
 8005924:	20000018 	.word	0x20000018

08005928 <memset>:
 8005928:	4402      	add	r2, r0
 800592a:	4603      	mov	r3, r0
 800592c:	4293      	cmp	r3, r2
 800592e:	d100      	bne.n	8005932 <memset+0xa>
 8005930:	4770      	bx	lr
 8005932:	f803 1b01 	strb.w	r1, [r3], #1
 8005936:	e7f9      	b.n	800592c <memset+0x4>

08005938 <_close_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d06      	ldr	r5, [pc, #24]	@ (8005954 <_close_r+0x1c>)
 800593c:	2300      	movs	r3, #0
 800593e:	4604      	mov	r4, r0
 8005940:	4608      	mov	r0, r1
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	f7fb fce3 	bl	800130e <_close>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_close_r+0x1a>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_close_r+0x1a>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000314 	.word	0x20000314

08005958 <_lseek_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	@ (8005978 <_lseek_r+0x20>)
 800595c:	4604      	mov	r4, r0
 800595e:	4608      	mov	r0, r1
 8005960:	4611      	mov	r1, r2
 8005962:	2200      	movs	r2, #0
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fb fcf8 	bl	800135c <_lseek>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_lseek_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_lseek_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000314 	.word	0x20000314

0800597c <_read_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d07      	ldr	r5, [pc, #28]	@ (800599c <_read_r+0x20>)
 8005980:	4604      	mov	r4, r0
 8005982:	4608      	mov	r0, r1
 8005984:	4611      	mov	r1, r2
 8005986:	2200      	movs	r2, #0
 8005988:	602a      	str	r2, [r5, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f7fb fc86 	bl	800129c <_read>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_read_r+0x1e>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_read_r+0x1e>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20000314 	.word	0x20000314

080059a0 <_write_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d07      	ldr	r5, [pc, #28]	@ (80059c0 <_write_r+0x20>)
 80059a4:	4604      	mov	r4, r0
 80059a6:	4608      	mov	r0, r1
 80059a8:	4611      	mov	r1, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	602a      	str	r2, [r5, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f7fb fc91 	bl	80012d6 <_write>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_write_r+0x1e>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_write_r+0x1e>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000314 	.word	0x20000314

080059c4 <__errno>:
 80059c4:	4b01      	ldr	r3, [pc, #4]	@ (80059cc <__errno+0x8>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000018 	.word	0x20000018

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005a08 <__libc_init_array+0x38>)
 80059d4:	4c0d      	ldr	r4, [pc, #52]	@ (8005a0c <__libc_init_array+0x3c>)
 80059d6:	1b64      	subs	r4, r4, r5
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	2600      	movs	r6, #0
 80059dc:	42a6      	cmp	r6, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005a10 <__libc_init_array+0x40>)
 80059e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005a14 <__libc_init_array+0x44>)
 80059e4:	f000 fd24 	bl	8006430 <_init>
 80059e8:	1b64      	subs	r4, r4, r5
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	2600      	movs	r6, #0
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f8:	4798      	blx	r3
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a02:	4798      	blx	r3
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	080064e0 	.word	0x080064e0
 8005a0c:	080064e0 	.word	0x080064e0
 8005a10:	080064e0 	.word	0x080064e0
 8005a14:	080064e4 	.word	0x080064e4

08005a18 <__retarget_lock_init_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_acquire_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <__retarget_lock_release_recursive>:
 8005a1c:	4770      	bx	lr
	...

08005a20 <_free_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4605      	mov	r5, r0
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d041      	beq.n	8005aac <_free_r+0x8c>
 8005a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2c:	1f0c      	subs	r4, r1, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bfb8      	it	lt
 8005a32:	18e4      	addlt	r4, r4, r3
 8005a34:	f000 f8e0 	bl	8005bf8 <__malloc_lock>
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <_free_r+0x90>)
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	b933      	cbnz	r3, 8005a4c <_free_r+0x2c>
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	6014      	str	r4, [r2, #0]
 8005a42:	4628      	mov	r0, r5
 8005a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a48:	f000 b8dc 	b.w	8005c04 <__malloc_unlock>
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	d908      	bls.n	8005a62 <_free_r+0x42>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	1821      	adds	r1, r4, r0
 8005a54:	428b      	cmp	r3, r1
 8005a56:	bf01      	itttt	eq
 8005a58:	6819      	ldreq	r1, [r3, #0]
 8005a5a:	685b      	ldreq	r3, [r3, #4]
 8005a5c:	1809      	addeq	r1, r1, r0
 8005a5e:	6021      	streq	r1, [r4, #0]
 8005a60:	e7ed      	b.n	8005a3e <_free_r+0x1e>
 8005a62:	461a      	mov	r2, r3
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b10b      	cbz	r3, 8005a6c <_free_r+0x4c>
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	d9fa      	bls.n	8005a62 <_free_r+0x42>
 8005a6c:	6811      	ldr	r1, [r2, #0]
 8005a6e:	1850      	adds	r0, r2, r1
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d10b      	bne.n	8005a8c <_free_r+0x6c>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	4401      	add	r1, r0
 8005a78:	1850      	adds	r0, r2, r1
 8005a7a:	4283      	cmp	r3, r0
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	d1e0      	bne.n	8005a42 <_free_r+0x22>
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	6053      	str	r3, [r2, #4]
 8005a86:	4408      	add	r0, r1
 8005a88:	6010      	str	r0, [r2, #0]
 8005a8a:	e7da      	b.n	8005a42 <_free_r+0x22>
 8005a8c:	d902      	bls.n	8005a94 <_free_r+0x74>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	e7d6      	b.n	8005a42 <_free_r+0x22>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	1821      	adds	r1, r4, r0
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	bf04      	itt	eq
 8005a9c:	6819      	ldreq	r1, [r3, #0]
 8005a9e:	685b      	ldreq	r3, [r3, #4]
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	bf04      	itt	eq
 8005aa4:	1809      	addeq	r1, r1, r0
 8005aa6:	6021      	streq	r1, [r4, #0]
 8005aa8:	6054      	str	r4, [r2, #4]
 8005aaa:	e7ca      	b.n	8005a42 <_free_r+0x22>
 8005aac:	bd38      	pop	{r3, r4, r5, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000320 	.word	0x20000320

08005ab4 <sbrk_aligned>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8005af4 <sbrk_aligned+0x40>)
 8005ab8:	460c      	mov	r4, r1
 8005aba:	6831      	ldr	r1, [r6, #0]
 8005abc:	4605      	mov	r5, r0
 8005abe:	b911      	cbnz	r1, 8005ac6 <sbrk_aligned+0x12>
 8005ac0:	f000 fca6 	bl	8006410 <_sbrk_r>
 8005ac4:	6030      	str	r0, [r6, #0]
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 fca1 	bl	8006410 <_sbrk_r>
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	d103      	bne.n	8005ada <sbrk_aligned+0x26>
 8005ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
 8005ada:	1cc4      	adds	r4, r0, #3
 8005adc:	f024 0403 	bic.w	r4, r4, #3
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d0f8      	beq.n	8005ad6 <sbrk_aligned+0x22>
 8005ae4:	1a21      	subs	r1, r4, r0
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fc92 	bl	8006410 <_sbrk_r>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d1f2      	bne.n	8005ad6 <sbrk_aligned+0x22>
 8005af0:	e7ef      	b.n	8005ad2 <sbrk_aligned+0x1e>
 8005af2:	bf00      	nop
 8005af4:	2000031c 	.word	0x2000031c

08005af8 <_malloc_r>:
 8005af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005afc:	1ccd      	adds	r5, r1, #3
 8005afe:	f025 0503 	bic.w	r5, r5, #3
 8005b02:	3508      	adds	r5, #8
 8005b04:	2d0c      	cmp	r5, #12
 8005b06:	bf38      	it	cc
 8005b08:	250c      	movcc	r5, #12
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	db01      	blt.n	8005b14 <_malloc_r+0x1c>
 8005b10:	42a9      	cmp	r1, r5
 8005b12:	d904      	bls.n	8005b1e <_malloc_r+0x26>
 8005b14:	230c      	movs	r3, #12
 8005b16:	6033      	str	r3, [r6, #0]
 8005b18:	2000      	movs	r0, #0
 8005b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bf4 <_malloc_r+0xfc>
 8005b22:	f000 f869 	bl	8005bf8 <__malloc_lock>
 8005b26:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2a:	461c      	mov	r4, r3
 8005b2c:	bb44      	cbnz	r4, 8005b80 <_malloc_r+0x88>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7ff ffbf 	bl	8005ab4 <sbrk_aligned>
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	4604      	mov	r4, r0
 8005b3a:	d158      	bne.n	8005bee <_malloc_r+0xf6>
 8005b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b40:	4627      	mov	r7, r4
 8005b42:	2f00      	cmp	r7, #0
 8005b44:	d143      	bne.n	8005bce <_malloc_r+0xd6>
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	d04b      	beq.n	8005be2 <_malloc_r+0xea>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4630      	mov	r0, r6
 8005b50:	eb04 0903 	add.w	r9, r4, r3
 8005b54:	f000 fc5c 	bl	8006410 <_sbrk_r>
 8005b58:	4581      	cmp	r9, r0
 8005b5a:	d142      	bne.n	8005be2 <_malloc_r+0xea>
 8005b5c:	6821      	ldr	r1, [r4, #0]
 8005b5e:	1a6d      	subs	r5, r5, r1
 8005b60:	4629      	mov	r1, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7ff ffa6 	bl	8005ab4 <sbrk_aligned>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d03a      	beq.n	8005be2 <_malloc_r+0xea>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	442b      	add	r3, r5
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	f8d8 3000 	ldr.w	r3, [r8]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	bb62      	cbnz	r2, 8005bd4 <_malloc_r+0xdc>
 8005b7a:	f8c8 7000 	str.w	r7, [r8]
 8005b7e:	e00f      	b.n	8005ba0 <_malloc_r+0xa8>
 8005b80:	6822      	ldr	r2, [r4, #0]
 8005b82:	1b52      	subs	r2, r2, r5
 8005b84:	d420      	bmi.n	8005bc8 <_malloc_r+0xd0>
 8005b86:	2a0b      	cmp	r2, #11
 8005b88:	d917      	bls.n	8005bba <_malloc_r+0xc2>
 8005b8a:	1961      	adds	r1, r4, r5
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	6025      	str	r5, [r4, #0]
 8005b90:	bf18      	it	ne
 8005b92:	6059      	strne	r1, [r3, #4]
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	bf08      	it	eq
 8005b98:	f8c8 1000 	streq.w	r1, [r8]
 8005b9c:	5162      	str	r2, [r4, r5]
 8005b9e:	604b      	str	r3, [r1, #4]
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f000 f82f 	bl	8005c04 <__malloc_unlock>
 8005ba6:	f104 000b 	add.w	r0, r4, #11
 8005baa:	1d23      	adds	r3, r4, #4
 8005bac:	f020 0007 	bic.w	r0, r0, #7
 8005bb0:	1ac2      	subs	r2, r0, r3
 8005bb2:	bf1c      	itt	ne
 8005bb4:	1a1b      	subne	r3, r3, r0
 8005bb6:	50a3      	strne	r3, [r4, r2]
 8005bb8:	e7af      	b.n	8005b1a <_malloc_r+0x22>
 8005bba:	6862      	ldr	r2, [r4, #4]
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	bf0c      	ite	eq
 8005bc0:	f8c8 2000 	streq.w	r2, [r8]
 8005bc4:	605a      	strne	r2, [r3, #4]
 8005bc6:	e7eb      	b.n	8005ba0 <_malloc_r+0xa8>
 8005bc8:	4623      	mov	r3, r4
 8005bca:	6864      	ldr	r4, [r4, #4]
 8005bcc:	e7ae      	b.n	8005b2c <_malloc_r+0x34>
 8005bce:	463c      	mov	r4, r7
 8005bd0:	687f      	ldr	r7, [r7, #4]
 8005bd2:	e7b6      	b.n	8005b42 <_malloc_r+0x4a>
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d1fb      	bne.n	8005bd4 <_malloc_r+0xdc>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	6053      	str	r3, [r2, #4]
 8005be0:	e7de      	b.n	8005ba0 <_malloc_r+0xa8>
 8005be2:	230c      	movs	r3, #12
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 f80c 	bl	8005c04 <__malloc_unlock>
 8005bec:	e794      	b.n	8005b18 <_malloc_r+0x20>
 8005bee:	6005      	str	r5, [r0, #0]
 8005bf0:	e7d6      	b.n	8005ba0 <_malloc_r+0xa8>
 8005bf2:	bf00      	nop
 8005bf4:	20000320 	.word	0x20000320

08005bf8 <__malloc_lock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <__malloc_lock+0x8>)
 8005bfa:	f7ff bf0e 	b.w	8005a1a <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000318 	.word	0x20000318

08005c04 <__malloc_unlock>:
 8005c04:	4801      	ldr	r0, [pc, #4]	@ (8005c0c <__malloc_unlock+0x8>)
 8005c06:	f7ff bf09 	b.w	8005a1c <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000318 	.word	0x20000318

08005c10 <__sfputc_r>:
 8005c10:	6893      	ldr	r3, [r2, #8]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	b410      	push	{r4}
 8005c18:	6093      	str	r3, [r2, #8]
 8005c1a:	da08      	bge.n	8005c2e <__sfputc_r+0x1e>
 8005c1c:	6994      	ldr	r4, [r2, #24]
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	db01      	blt.n	8005c26 <__sfputc_r+0x16>
 8005c22:	290a      	cmp	r1, #10
 8005c24:	d103      	bne.n	8005c2e <__sfputc_r+0x1e>
 8005c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c2a:	f7ff bde8 	b.w	80057fe <__swbuf_r>
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	1c58      	adds	r0, r3, #1
 8005c32:	6010      	str	r0, [r2, #0]
 8005c34:	7019      	strb	r1, [r3, #0]
 8005c36:	4608      	mov	r0, r1
 8005c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <__sfputs_r>:
 8005c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c40:	4606      	mov	r6, r0
 8005c42:	460f      	mov	r7, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	18d5      	adds	r5, r2, r3
 8005c48:	42ac      	cmp	r4, r5
 8005c4a:	d101      	bne.n	8005c50 <__sfputs_r+0x12>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e007      	b.n	8005c60 <__sfputs_r+0x22>
 8005c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c54:	463a      	mov	r2, r7
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ffda 	bl	8005c10 <__sfputc_r>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d1f3      	bne.n	8005c48 <__sfputs_r+0xa>
 8005c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c64 <_vfiprintf_r>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	460d      	mov	r5, r1
 8005c6a:	b09d      	sub	sp, #116	@ 0x74
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	4698      	mov	r8, r3
 8005c70:	4606      	mov	r6, r0
 8005c72:	b118      	cbz	r0, 8005c7c <_vfiprintf_r+0x18>
 8005c74:	6a03      	ldr	r3, [r0, #32]
 8005c76:	b90b      	cbnz	r3, 8005c7c <_vfiprintf_r+0x18>
 8005c78:	f7ff fcd8 	bl	800562c <__sinit>
 8005c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c7e:	07d9      	lsls	r1, r3, #31
 8005c80:	d405      	bmi.n	8005c8e <_vfiprintf_r+0x2a>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	059a      	lsls	r2, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_vfiprintf_r+0x2a>
 8005c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c8a:	f7ff fec6 	bl	8005a1a <__retarget_lock_acquire_recursive>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	071b      	lsls	r3, r3, #28
 8005c92:	d501      	bpl.n	8005c98 <_vfiprintf_r+0x34>
 8005c94:	692b      	ldr	r3, [r5, #16]
 8005c96:	b99b      	cbnz	r3, 8005cc0 <_vfiprintf_r+0x5c>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f7ff fdee 	bl	800587c <__swsetup_r>
 8005ca0:	b170      	cbz	r0, 8005cc0 <_vfiprintf_r+0x5c>
 8005ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ca4:	07dc      	lsls	r4, r3, #31
 8005ca6:	d504      	bpl.n	8005cb2 <_vfiprintf_r+0x4e>
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	b01d      	add	sp, #116	@ 0x74
 8005cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	0598      	lsls	r0, r3, #22
 8005cb6:	d4f7      	bmi.n	8005ca8 <_vfiprintf_r+0x44>
 8005cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cba:	f7ff feaf 	bl	8005a1c <__retarget_lock_release_recursive>
 8005cbe:	e7f3      	b.n	8005ca8 <_vfiprintf_r+0x44>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cce:	2330      	movs	r3, #48	@ 0x30
 8005cd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e80 <_vfiprintf_r+0x21c>
 8005cd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cd8:	f04f 0901 	mov.w	r9, #1
 8005cdc:	4623      	mov	r3, r4
 8005cde:	469a      	mov	sl, r3
 8005ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce4:	b10a      	cbz	r2, 8005cea <_vfiprintf_r+0x86>
 8005ce6:	2a25      	cmp	r2, #37	@ 0x25
 8005ce8:	d1f9      	bne.n	8005cde <_vfiprintf_r+0x7a>
 8005cea:	ebba 0b04 	subs.w	fp, sl, r4
 8005cee:	d00b      	beq.n	8005d08 <_vfiprintf_r+0xa4>
 8005cf0:	465b      	mov	r3, fp
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f7ff ffa1 	bl	8005c3e <__sfputs_r>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f000 80a7 	beq.w	8005e50 <_vfiprintf_r+0x1ec>
 8005d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d04:	445a      	add	r2, fp
 8005d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d08:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 809f 	beq.w	8005e50 <_vfiprintf_r+0x1ec>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d1c:	f10a 0a01 	add.w	sl, sl, #1
 8005d20:	9304      	str	r3, [sp, #16]
 8005d22:	9307      	str	r3, [sp, #28]
 8005d24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d28:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d2a:	4654      	mov	r4, sl
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d32:	4853      	ldr	r0, [pc, #332]	@ (8005e80 <_vfiprintf_r+0x21c>)
 8005d34:	f7fa fa74 	bl	8000220 <memchr>
 8005d38:	9a04      	ldr	r2, [sp, #16]
 8005d3a:	b9d8      	cbnz	r0, 8005d74 <_vfiprintf_r+0x110>
 8005d3c:	06d1      	lsls	r1, r2, #27
 8005d3e:	bf44      	itt	mi
 8005d40:	2320      	movmi	r3, #32
 8005d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d46:	0713      	lsls	r3, r2, #28
 8005d48:	bf44      	itt	mi
 8005d4a:	232b      	movmi	r3, #43	@ 0x2b
 8005d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d50:	f89a 3000 	ldrb.w	r3, [sl]
 8005d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d56:	d015      	beq.n	8005d84 <_vfiprintf_r+0x120>
 8005d58:	9a07      	ldr	r2, [sp, #28]
 8005d5a:	4654      	mov	r4, sl
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f04f 0c0a 	mov.w	ip, #10
 8005d62:	4621      	mov	r1, r4
 8005d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d68:	3b30      	subs	r3, #48	@ 0x30
 8005d6a:	2b09      	cmp	r3, #9
 8005d6c:	d94b      	bls.n	8005e06 <_vfiprintf_r+0x1a2>
 8005d6e:	b1b0      	cbz	r0, 8005d9e <_vfiprintf_r+0x13a>
 8005d70:	9207      	str	r2, [sp, #28]
 8005d72:	e014      	b.n	8005d9e <_vfiprintf_r+0x13a>
 8005d74:	eba0 0308 	sub.w	r3, r0, r8
 8005d78:	fa09 f303 	lsl.w	r3, r9, r3
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	46a2      	mov	sl, r4
 8005d82:	e7d2      	b.n	8005d2a <_vfiprintf_r+0xc6>
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	1d19      	adds	r1, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	9103      	str	r1, [sp, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bfbb      	ittet	lt
 8005d90:	425b      	neglt	r3, r3
 8005d92:	f042 0202 	orrlt.w	r2, r2, #2
 8005d96:	9307      	strge	r3, [sp, #28]
 8005d98:	9307      	strlt	r3, [sp, #28]
 8005d9a:	bfb8      	it	lt
 8005d9c:	9204      	strlt	r2, [sp, #16]
 8005d9e:	7823      	ldrb	r3, [r4, #0]
 8005da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005da2:	d10a      	bne.n	8005dba <_vfiprintf_r+0x156>
 8005da4:	7863      	ldrb	r3, [r4, #1]
 8005da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005da8:	d132      	bne.n	8005e10 <_vfiprintf_r+0x1ac>
 8005daa:	9b03      	ldr	r3, [sp, #12]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	9203      	str	r2, [sp, #12]
 8005db2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005db6:	3402      	adds	r4, #2
 8005db8:	9305      	str	r3, [sp, #20]
 8005dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e90 <_vfiprintf_r+0x22c>
 8005dbe:	7821      	ldrb	r1, [r4, #0]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f7fa fa2c 	bl	8000220 <memchr>
 8005dc8:	b138      	cbz	r0, 8005dda <_vfiprintf_r+0x176>
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	eba0 000a 	sub.w	r0, r0, sl
 8005dd0:	2240      	movs	r2, #64	@ 0x40
 8005dd2:	4082      	lsls	r2, r0
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dde:	4829      	ldr	r0, [pc, #164]	@ (8005e84 <_vfiprintf_r+0x220>)
 8005de0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005de4:	2206      	movs	r2, #6
 8005de6:	f7fa fa1b 	bl	8000220 <memchr>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d03f      	beq.n	8005e6e <_vfiprintf_r+0x20a>
 8005dee:	4b26      	ldr	r3, [pc, #152]	@ (8005e88 <_vfiprintf_r+0x224>)
 8005df0:	bb1b      	cbnz	r3, 8005e3a <_vfiprintf_r+0x1d6>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	3307      	adds	r3, #7
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	9303      	str	r3, [sp, #12]
 8005dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e00:	443b      	add	r3, r7
 8005e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e04:	e76a      	b.n	8005cdc <_vfiprintf_r+0x78>
 8005e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	e7a8      	b.n	8005d62 <_vfiprintf_r+0xfe>
 8005e10:	2300      	movs	r3, #0
 8005e12:	3401      	adds	r4, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	4619      	mov	r1, r3
 8005e18:	f04f 0c0a 	mov.w	ip, #10
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e22:	3a30      	subs	r2, #48	@ 0x30
 8005e24:	2a09      	cmp	r2, #9
 8005e26:	d903      	bls.n	8005e30 <_vfiprintf_r+0x1cc>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0c6      	beq.n	8005dba <_vfiprintf_r+0x156>
 8005e2c:	9105      	str	r1, [sp, #20]
 8005e2e:	e7c4      	b.n	8005dba <_vfiprintf_r+0x156>
 8005e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e34:	4604      	mov	r4, r0
 8005e36:	2301      	movs	r3, #1
 8005e38:	e7f0      	b.n	8005e1c <_vfiprintf_r+0x1b8>
 8005e3a:	ab03      	add	r3, sp, #12
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4b12      	ldr	r3, [pc, #72]	@ (8005e8c <_vfiprintf_r+0x228>)
 8005e42:	a904      	add	r1, sp, #16
 8005e44:	4630      	mov	r0, r6
 8005e46:	f3af 8000 	nop.w
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	1c78      	adds	r0, r7, #1
 8005e4e:	d1d6      	bne.n	8005dfe <_vfiprintf_r+0x19a>
 8005e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x1fe>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x1fe>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e5e:	f7ff fddd 	bl	8005a1c <__retarget_lock_release_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	065b      	lsls	r3, r3, #25
 8005e66:	f53f af1f 	bmi.w	8005ca8 <_vfiprintf_r+0x44>
 8005e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e6c:	e71e      	b.n	8005cac <_vfiprintf_r+0x48>
 8005e6e:	ab03      	add	r3, sp, #12
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	462a      	mov	r2, r5
 8005e74:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <_vfiprintf_r+0x228>)
 8005e76:	a904      	add	r1, sp, #16
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f879 	bl	8005f70 <_printf_i>
 8005e7e:	e7e4      	b.n	8005e4a <_vfiprintf_r+0x1e6>
 8005e80:	080064a4 	.word	0x080064a4
 8005e84:	080064ae 	.word	0x080064ae
 8005e88:	00000000 	.word	0x00000000
 8005e8c:	08005c3f 	.word	0x08005c3f
 8005e90:	080064aa 	.word	0x080064aa

08005e94 <_printf_common>:
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	4616      	mov	r6, r2
 8005e9a:	4698      	mov	r8, r3
 8005e9c:	688a      	ldr	r2, [r1, #8]
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bfb8      	it	lt
 8005ea8:	4613      	movlt	r3, r2
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	b10a      	cbz	r2, 8005eba <_printf_common+0x26>
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	0699      	lsls	r1, r3, #26
 8005ebe:	bf42      	ittt	mi
 8005ec0:	6833      	ldrmi	r3, [r6, #0]
 8005ec2:	3302      	addmi	r3, #2
 8005ec4:	6033      	strmi	r3, [r6, #0]
 8005ec6:	6825      	ldr	r5, [r4, #0]
 8005ec8:	f015 0506 	ands.w	r5, r5, #6
 8005ecc:	d106      	bne.n	8005edc <_printf_common+0x48>
 8005ece:	f104 0a19 	add.w	sl, r4, #25
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	6832      	ldr	r2, [r6, #0]
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dc26      	bgt.n	8005f2a <_printf_common+0x96>
 8005edc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ee0:	6822      	ldr	r2, [r4, #0]
 8005ee2:	3b00      	subs	r3, #0
 8005ee4:	bf18      	it	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	0692      	lsls	r2, r2, #26
 8005eea:	d42b      	bmi.n	8005f44 <_printf_common+0xb0>
 8005eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	47c8      	blx	r9
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d01e      	beq.n	8005f38 <_printf_common+0xa4>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6922      	ldr	r2, [r4, #16]
 8005efe:	f003 0306 	and.w	r3, r3, #6
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	bf02      	ittt	eq
 8005f06:	68e5      	ldreq	r5, [r4, #12]
 8005f08:	6833      	ldreq	r3, [r6, #0]
 8005f0a:	1aed      	subeq	r5, r5, r3
 8005f0c:	68a3      	ldr	r3, [r4, #8]
 8005f0e:	bf0c      	ite	eq
 8005f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f14:	2500      	movne	r5, #0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	bfc4      	itt	gt
 8005f1a:	1a9b      	subgt	r3, r3, r2
 8005f1c:	18ed      	addgt	r5, r5, r3
 8005f1e:	2600      	movs	r6, #0
 8005f20:	341a      	adds	r4, #26
 8005f22:	42b5      	cmp	r5, r6
 8005f24:	d11a      	bne.n	8005f5c <_printf_common+0xc8>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e008      	b.n	8005f3c <_printf_common+0xa8>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	4641      	mov	r1, r8
 8005f30:	4638      	mov	r0, r7
 8005f32:	47c8      	blx	r9
 8005f34:	3001      	adds	r0, #1
 8005f36:	d103      	bne.n	8005f40 <_printf_common+0xac>
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f40:	3501      	adds	r5, #1
 8005f42:	e7c6      	b.n	8005ed2 <_printf_common+0x3e>
 8005f44:	18e1      	adds	r1, r4, r3
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	2030      	movs	r0, #48	@ 0x30
 8005f4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f4e:	4422      	add	r2, r4
 8005f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f58:	3302      	adds	r3, #2
 8005f5a:	e7c7      	b.n	8005eec <_printf_common+0x58>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4641      	mov	r1, r8
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c8      	blx	r9
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0e6      	beq.n	8005f38 <_printf_common+0xa4>
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7d9      	b.n	8005f22 <_printf_common+0x8e>
	...

08005f70 <_printf_i>:
 8005f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	7e0f      	ldrb	r7, [r1, #24]
 8005f76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f78:	2f78      	cmp	r7, #120	@ 0x78
 8005f7a:	4691      	mov	r9, r2
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	469a      	mov	sl, r3
 8005f82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f86:	d807      	bhi.n	8005f98 <_printf_i+0x28>
 8005f88:	2f62      	cmp	r7, #98	@ 0x62
 8005f8a:	d80a      	bhi.n	8005fa2 <_printf_i+0x32>
 8005f8c:	2f00      	cmp	r7, #0
 8005f8e:	f000 80d2 	beq.w	8006136 <_printf_i+0x1c6>
 8005f92:	2f58      	cmp	r7, #88	@ 0x58
 8005f94:	f000 80b9 	beq.w	800610a <_printf_i+0x19a>
 8005f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fa0:	e03a      	b.n	8006018 <_printf_i+0xa8>
 8005fa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fa6:	2b15      	cmp	r3, #21
 8005fa8:	d8f6      	bhi.n	8005f98 <_printf_i+0x28>
 8005faa:	a101      	add	r1, pc, #4	@ (adr r1, 8005fb0 <_printf_i+0x40>)
 8005fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb0:	08006009 	.word	0x08006009
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	08005f99 	.word	0x08005f99
 8005fbc:	08005f99 	.word	0x08005f99
 8005fc0:	08005f99 	.word	0x08005f99
 8005fc4:	08005f99 	.word	0x08005f99
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08005f99 	.word	0x08005f99
 8005fd0:	08005f99 	.word	0x08005f99
 8005fd4:	08005f99 	.word	0x08005f99
 8005fd8:	08005f99 	.word	0x08005f99
 8005fdc:	0800611d 	.word	0x0800611d
 8005fe0:	08006047 	.word	0x08006047
 8005fe4:	080060d7 	.word	0x080060d7
 8005fe8:	08005f99 	.word	0x08005f99
 8005fec:	08005f99 	.word	0x08005f99
 8005ff0:	0800613f 	.word	0x0800613f
 8005ff4:	08005f99 	.word	0x08005f99
 8005ff8:	08006047 	.word	0x08006047
 8005ffc:	08005f99 	.word	0x08005f99
 8006000:	08005f99 	.word	0x08005f99
 8006004:	080060df 	.word	0x080060df
 8006008:	6833      	ldr	r3, [r6, #0]
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6032      	str	r2, [r6, #0]
 8006010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006018:	2301      	movs	r3, #1
 800601a:	e09d      	b.n	8006158 <_printf_i+0x1e8>
 800601c:	6833      	ldr	r3, [r6, #0]
 800601e:	6820      	ldr	r0, [r4, #0]
 8006020:	1d19      	adds	r1, r3, #4
 8006022:	6031      	str	r1, [r6, #0]
 8006024:	0606      	lsls	r6, r0, #24
 8006026:	d501      	bpl.n	800602c <_printf_i+0xbc>
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	e003      	b.n	8006034 <_printf_i+0xc4>
 800602c:	0645      	lsls	r5, r0, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0xb8>
 8006030:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006034:	2d00      	cmp	r5, #0
 8006036:	da03      	bge.n	8006040 <_printf_i+0xd0>
 8006038:	232d      	movs	r3, #45	@ 0x2d
 800603a:	426d      	negs	r5, r5
 800603c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006040:	4859      	ldr	r0, [pc, #356]	@ (80061a8 <_printf_i+0x238>)
 8006042:	230a      	movs	r3, #10
 8006044:	e011      	b.n	800606a <_printf_i+0xfa>
 8006046:	6821      	ldr	r1, [r4, #0]
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	0608      	lsls	r0, r1, #24
 800604c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006050:	d402      	bmi.n	8006058 <_printf_i+0xe8>
 8006052:	0649      	lsls	r1, r1, #25
 8006054:	bf48      	it	mi
 8006056:	b2ad      	uxthmi	r5, r5
 8006058:	2f6f      	cmp	r7, #111	@ 0x6f
 800605a:	4853      	ldr	r0, [pc, #332]	@ (80061a8 <_printf_i+0x238>)
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	bf14      	ite	ne
 8006060:	230a      	movne	r3, #10
 8006062:	2308      	moveq	r3, #8
 8006064:	2100      	movs	r1, #0
 8006066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800606a:	6866      	ldr	r6, [r4, #4]
 800606c:	60a6      	str	r6, [r4, #8]
 800606e:	2e00      	cmp	r6, #0
 8006070:	bfa2      	ittt	ge
 8006072:	6821      	ldrge	r1, [r4, #0]
 8006074:	f021 0104 	bicge.w	r1, r1, #4
 8006078:	6021      	strge	r1, [r4, #0]
 800607a:	b90d      	cbnz	r5, 8006080 <_printf_i+0x110>
 800607c:	2e00      	cmp	r6, #0
 800607e:	d04b      	beq.n	8006118 <_printf_i+0x1a8>
 8006080:	4616      	mov	r6, r2
 8006082:	fbb5 f1f3 	udiv	r1, r5, r3
 8006086:	fb03 5711 	mls	r7, r3, r1, r5
 800608a:	5dc7      	ldrb	r7, [r0, r7]
 800608c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006090:	462f      	mov	r7, r5
 8006092:	42bb      	cmp	r3, r7
 8006094:	460d      	mov	r5, r1
 8006096:	d9f4      	bls.n	8006082 <_printf_i+0x112>
 8006098:	2b08      	cmp	r3, #8
 800609a:	d10b      	bne.n	80060b4 <_printf_i+0x144>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	07df      	lsls	r7, r3, #31
 80060a0:	d508      	bpl.n	80060b4 <_printf_i+0x144>
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	6861      	ldr	r1, [r4, #4]
 80060a6:	4299      	cmp	r1, r3
 80060a8:	bfde      	ittt	le
 80060aa:	2330      	movle	r3, #48	@ 0x30
 80060ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060b4:	1b92      	subs	r2, r2, r6
 80060b6:	6122      	str	r2, [r4, #16]
 80060b8:	f8cd a000 	str.w	sl, [sp]
 80060bc:	464b      	mov	r3, r9
 80060be:	aa03      	add	r2, sp, #12
 80060c0:	4621      	mov	r1, r4
 80060c2:	4640      	mov	r0, r8
 80060c4:	f7ff fee6 	bl	8005e94 <_printf_common>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d14a      	bne.n	8006162 <_printf_i+0x1f2>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	b004      	add	sp, #16
 80060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	4833      	ldr	r0, [pc, #204]	@ (80061ac <_printf_i+0x23c>)
 80060e0:	2778      	movs	r7, #120	@ 0x78
 80060e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	6831      	ldr	r1, [r6, #0]
 80060ea:	061f      	lsls	r7, r3, #24
 80060ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80060f0:	d402      	bmi.n	80060f8 <_printf_i+0x188>
 80060f2:	065f      	lsls	r7, r3, #25
 80060f4:	bf48      	it	mi
 80060f6:	b2ad      	uxthmi	r5, r5
 80060f8:	6031      	str	r1, [r6, #0]
 80060fa:	07d9      	lsls	r1, r3, #31
 80060fc:	bf44      	itt	mi
 80060fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006102:	6023      	strmi	r3, [r4, #0]
 8006104:	b11d      	cbz	r5, 800610e <_printf_i+0x19e>
 8006106:	2310      	movs	r3, #16
 8006108:	e7ac      	b.n	8006064 <_printf_i+0xf4>
 800610a:	4827      	ldr	r0, [pc, #156]	@ (80061a8 <_printf_i+0x238>)
 800610c:	e7e9      	b.n	80060e2 <_printf_i+0x172>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	f023 0320 	bic.w	r3, r3, #32
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	e7f6      	b.n	8006106 <_printf_i+0x196>
 8006118:	4616      	mov	r6, r2
 800611a:	e7bd      	b.n	8006098 <_printf_i+0x128>
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	6825      	ldr	r5, [r4, #0]
 8006120:	6961      	ldr	r1, [r4, #20]
 8006122:	1d18      	adds	r0, r3, #4
 8006124:	6030      	str	r0, [r6, #0]
 8006126:	062e      	lsls	r6, r5, #24
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	d501      	bpl.n	8006130 <_printf_i+0x1c0>
 800612c:	6019      	str	r1, [r3, #0]
 800612e:	e002      	b.n	8006136 <_printf_i+0x1c6>
 8006130:	0668      	lsls	r0, r5, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0x1bc>
 8006134:	8019      	strh	r1, [r3, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	6123      	str	r3, [r4, #16]
 800613a:	4616      	mov	r6, r2
 800613c:	e7bc      	b.n	80060b8 <_printf_i+0x148>
 800613e:	6833      	ldr	r3, [r6, #0]
 8006140:	1d1a      	adds	r2, r3, #4
 8006142:	6032      	str	r2, [r6, #0]
 8006144:	681e      	ldr	r6, [r3, #0]
 8006146:	6862      	ldr	r2, [r4, #4]
 8006148:	2100      	movs	r1, #0
 800614a:	4630      	mov	r0, r6
 800614c:	f7fa f868 	bl	8000220 <memchr>
 8006150:	b108      	cbz	r0, 8006156 <_printf_i+0x1e6>
 8006152:	1b80      	subs	r0, r0, r6
 8006154:	6060      	str	r0, [r4, #4]
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	2300      	movs	r3, #0
 800615c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006160:	e7aa      	b.n	80060b8 <_printf_i+0x148>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	4632      	mov	r2, r6
 8006166:	4649      	mov	r1, r9
 8006168:	4640      	mov	r0, r8
 800616a:	47d0      	blx	sl
 800616c:	3001      	adds	r0, #1
 800616e:	d0ad      	beq.n	80060cc <_printf_i+0x15c>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	079b      	lsls	r3, r3, #30
 8006174:	d413      	bmi.n	800619e <_printf_i+0x22e>
 8006176:	68e0      	ldr	r0, [r4, #12]
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	4298      	cmp	r0, r3
 800617c:	bfb8      	it	lt
 800617e:	4618      	movlt	r0, r3
 8006180:	e7a6      	b.n	80060d0 <_printf_i+0x160>
 8006182:	2301      	movs	r3, #1
 8006184:	4632      	mov	r2, r6
 8006186:	4649      	mov	r1, r9
 8006188:	4640      	mov	r0, r8
 800618a:	47d0      	blx	sl
 800618c:	3001      	adds	r0, #1
 800618e:	d09d      	beq.n	80060cc <_printf_i+0x15c>
 8006190:	3501      	adds	r5, #1
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	9903      	ldr	r1, [sp, #12]
 8006196:	1a5b      	subs	r3, r3, r1
 8006198:	42ab      	cmp	r3, r5
 800619a:	dcf2      	bgt.n	8006182 <_printf_i+0x212>
 800619c:	e7eb      	b.n	8006176 <_printf_i+0x206>
 800619e:	2500      	movs	r5, #0
 80061a0:	f104 0619 	add.w	r6, r4, #25
 80061a4:	e7f5      	b.n	8006192 <_printf_i+0x222>
 80061a6:	bf00      	nop
 80061a8:	080064b5 	.word	0x080064b5
 80061ac:	080064c6 	.word	0x080064c6

080061b0 <__sflush_r>:
 80061b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b8:	0716      	lsls	r6, r2, #28
 80061ba:	4605      	mov	r5, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	d454      	bmi.n	800626a <__sflush_r+0xba>
 80061c0:	684b      	ldr	r3, [r1, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	dc02      	bgt.n	80061cc <__sflush_r+0x1c>
 80061c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	dd48      	ble.n	800625e <__sflush_r+0xae>
 80061cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	d045      	beq.n	800625e <__sflush_r+0xae>
 80061d2:	2300      	movs	r3, #0
 80061d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061d8:	682f      	ldr	r7, [r5, #0]
 80061da:	6a21      	ldr	r1, [r4, #32]
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	d030      	beq.n	8006242 <__sflush_r+0x92>
 80061e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	0759      	lsls	r1, r3, #29
 80061e6:	d505      	bpl.n	80061f4 <__sflush_r+0x44>
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061ee:	b10b      	cbz	r3, 80061f4 <__sflush_r+0x44>
 80061f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	2300      	movs	r3, #0
 80061f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061f8:	6a21      	ldr	r1, [r4, #32]
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b0      	blx	r6
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	d106      	bne.n	8006212 <__sflush_r+0x62>
 8006204:	6829      	ldr	r1, [r5, #0]
 8006206:	291d      	cmp	r1, #29
 8006208:	d82b      	bhi.n	8006262 <__sflush_r+0xb2>
 800620a:	4a2a      	ldr	r2, [pc, #168]	@ (80062b4 <__sflush_r+0x104>)
 800620c:	410a      	asrs	r2, r1
 800620e:	07d6      	lsls	r6, r2, #31
 8006210:	d427      	bmi.n	8006262 <__sflush_r+0xb2>
 8006212:	2200      	movs	r2, #0
 8006214:	6062      	str	r2, [r4, #4]
 8006216:	04d9      	lsls	r1, r3, #19
 8006218:	6922      	ldr	r2, [r4, #16]
 800621a:	6022      	str	r2, [r4, #0]
 800621c:	d504      	bpl.n	8006228 <__sflush_r+0x78>
 800621e:	1c42      	adds	r2, r0, #1
 8006220:	d101      	bne.n	8006226 <__sflush_r+0x76>
 8006222:	682b      	ldr	r3, [r5, #0]
 8006224:	b903      	cbnz	r3, 8006228 <__sflush_r+0x78>
 8006226:	6560      	str	r0, [r4, #84]	@ 0x54
 8006228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800622a:	602f      	str	r7, [r5, #0]
 800622c:	b1b9      	cbz	r1, 800625e <__sflush_r+0xae>
 800622e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <__sflush_r+0x8c>
 8006236:	4628      	mov	r0, r5
 8006238:	f7ff fbf2 	bl	8005a20 <_free_r>
 800623c:	2300      	movs	r3, #0
 800623e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006240:	e00d      	b.n	800625e <__sflush_r+0xae>
 8006242:	2301      	movs	r3, #1
 8006244:	4628      	mov	r0, r5
 8006246:	47b0      	blx	r6
 8006248:	4602      	mov	r2, r0
 800624a:	1c50      	adds	r0, r2, #1
 800624c:	d1c9      	bne.n	80061e2 <__sflush_r+0x32>
 800624e:	682b      	ldr	r3, [r5, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0c6      	beq.n	80061e2 <__sflush_r+0x32>
 8006254:	2b1d      	cmp	r3, #29
 8006256:	d001      	beq.n	800625c <__sflush_r+0xac>
 8006258:	2b16      	cmp	r3, #22
 800625a:	d11e      	bne.n	800629a <__sflush_r+0xea>
 800625c:	602f      	str	r7, [r5, #0]
 800625e:	2000      	movs	r0, #0
 8006260:	e022      	b.n	80062a8 <__sflush_r+0xf8>
 8006262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006266:	b21b      	sxth	r3, r3
 8006268:	e01b      	b.n	80062a2 <__sflush_r+0xf2>
 800626a:	690f      	ldr	r7, [r1, #16]
 800626c:	2f00      	cmp	r7, #0
 800626e:	d0f6      	beq.n	800625e <__sflush_r+0xae>
 8006270:	0793      	lsls	r3, r2, #30
 8006272:	680e      	ldr	r6, [r1, #0]
 8006274:	bf08      	it	eq
 8006276:	694b      	ldreq	r3, [r1, #20]
 8006278:	600f      	str	r7, [r1, #0]
 800627a:	bf18      	it	ne
 800627c:	2300      	movne	r3, #0
 800627e:	eba6 0807 	sub.w	r8, r6, r7
 8006282:	608b      	str	r3, [r1, #8]
 8006284:	f1b8 0f00 	cmp.w	r8, #0
 8006288:	dde9      	ble.n	800625e <__sflush_r+0xae>
 800628a:	6a21      	ldr	r1, [r4, #32]
 800628c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800628e:	4643      	mov	r3, r8
 8006290:	463a      	mov	r2, r7
 8006292:	4628      	mov	r0, r5
 8006294:	47b0      	blx	r6
 8006296:	2800      	cmp	r0, #0
 8006298:	dc08      	bgt.n	80062ac <__sflush_r+0xfc>
 800629a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ac:	4407      	add	r7, r0
 80062ae:	eba8 0800 	sub.w	r8, r8, r0
 80062b2:	e7e7      	b.n	8006284 <__sflush_r+0xd4>
 80062b4:	dfbffffe 	.word	0xdfbffffe

080062b8 <_fflush_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	690b      	ldr	r3, [r1, #16]
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	b913      	cbnz	r3, 80062c8 <_fflush_r+0x10>
 80062c2:	2500      	movs	r5, #0
 80062c4:	4628      	mov	r0, r5
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	b118      	cbz	r0, 80062d2 <_fflush_r+0x1a>
 80062ca:	6a03      	ldr	r3, [r0, #32]
 80062cc:	b90b      	cbnz	r3, 80062d2 <_fflush_r+0x1a>
 80062ce:	f7ff f9ad 	bl	800562c <__sinit>
 80062d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f3      	beq.n	80062c2 <_fflush_r+0xa>
 80062da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062dc:	07d0      	lsls	r0, r2, #31
 80062de:	d404      	bmi.n	80062ea <_fflush_r+0x32>
 80062e0:	0599      	lsls	r1, r3, #22
 80062e2:	d402      	bmi.n	80062ea <_fflush_r+0x32>
 80062e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062e6:	f7ff fb98 	bl	8005a1a <__retarget_lock_acquire_recursive>
 80062ea:	4628      	mov	r0, r5
 80062ec:	4621      	mov	r1, r4
 80062ee:	f7ff ff5f 	bl	80061b0 <__sflush_r>
 80062f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062f4:	07da      	lsls	r2, r3, #31
 80062f6:	4605      	mov	r5, r0
 80062f8:	d4e4      	bmi.n	80062c4 <_fflush_r+0xc>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	059b      	lsls	r3, r3, #22
 80062fe:	d4e1      	bmi.n	80062c4 <_fflush_r+0xc>
 8006300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006302:	f7ff fb8b 	bl	8005a1c <__retarget_lock_release_recursive>
 8006306:	e7dd      	b.n	80062c4 <_fflush_r+0xc>

08006308 <__swhatbuf_r>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	460c      	mov	r4, r1
 800630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006310:	2900      	cmp	r1, #0
 8006312:	b096      	sub	sp, #88	@ 0x58
 8006314:	4615      	mov	r5, r2
 8006316:	461e      	mov	r6, r3
 8006318:	da0d      	bge.n	8006336 <__swhatbuf_r+0x2e>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006320:	f04f 0100 	mov.w	r1, #0
 8006324:	bf14      	ite	ne
 8006326:	2340      	movne	r3, #64	@ 0x40
 8006328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800632c:	2000      	movs	r0, #0
 800632e:	6031      	str	r1, [r6, #0]
 8006330:	602b      	str	r3, [r5, #0]
 8006332:	b016      	add	sp, #88	@ 0x58
 8006334:	bd70      	pop	{r4, r5, r6, pc}
 8006336:	466a      	mov	r2, sp
 8006338:	f000 f848 	bl	80063cc <_fstat_r>
 800633c:	2800      	cmp	r0, #0
 800633e:	dbec      	blt.n	800631a <__swhatbuf_r+0x12>
 8006340:	9901      	ldr	r1, [sp, #4]
 8006342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800634a:	4259      	negs	r1, r3
 800634c:	4159      	adcs	r1, r3
 800634e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006352:	e7eb      	b.n	800632c <__swhatbuf_r+0x24>

08006354 <__smakebuf_r>:
 8006354:	898b      	ldrh	r3, [r1, #12]
 8006356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006358:	079d      	lsls	r5, r3, #30
 800635a:	4606      	mov	r6, r0
 800635c:	460c      	mov	r4, r1
 800635e:	d507      	bpl.n	8006370 <__smakebuf_r+0x1c>
 8006360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	2301      	movs	r3, #1
 800636a:	6163      	str	r3, [r4, #20]
 800636c:	b003      	add	sp, #12
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006370:	ab01      	add	r3, sp, #4
 8006372:	466a      	mov	r2, sp
 8006374:	f7ff ffc8 	bl	8006308 <__swhatbuf_r>
 8006378:	9f00      	ldr	r7, [sp, #0]
 800637a:	4605      	mov	r5, r0
 800637c:	4639      	mov	r1, r7
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff fbba 	bl	8005af8 <_malloc_r>
 8006384:	b948      	cbnz	r0, 800639a <__smakebuf_r+0x46>
 8006386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800638a:	059a      	lsls	r2, r3, #22
 800638c:	d4ee      	bmi.n	800636c <__smakebuf_r+0x18>
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	f043 0302 	orr.w	r3, r3, #2
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	e7e2      	b.n	8006360 <__smakebuf_r+0xc>
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	6020      	str	r0, [r4, #0]
 800639e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063aa:	b15b      	cbz	r3, 80063c4 <__smakebuf_r+0x70>
 80063ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f81d 	bl	80063f0 <_isatty_r>
 80063b6:	b128      	cbz	r0, 80063c4 <__smakebuf_r+0x70>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	431d      	orrs	r5, r3
 80063c8:	81a5      	strh	r5, [r4, #12]
 80063ca:	e7cf      	b.n	800636c <__smakebuf_r+0x18>

080063cc <_fstat_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d07      	ldr	r5, [pc, #28]	@ (80063ec <_fstat_r+0x20>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	f7fa ffa4 	bl	8001326 <_fstat>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	d102      	bne.n	80063e8 <_fstat_r+0x1c>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	b103      	cbz	r3, 80063e8 <_fstat_r+0x1c>
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	bd38      	pop	{r3, r4, r5, pc}
 80063ea:	bf00      	nop
 80063ec:	20000314 	.word	0x20000314

080063f0 <_isatty_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d06      	ldr	r5, [pc, #24]	@ (800640c <_isatty_r+0x1c>)
 80063f4:	2300      	movs	r3, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fa ffa3 	bl	8001346 <_isatty>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_isatty_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_isatty_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20000314 	.word	0x20000314

08006410 <_sbrk_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d06      	ldr	r5, [pc, #24]	@ (800642c <_sbrk_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fa ffac 	bl	8001378 <_sbrk>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_sbrk_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_sbrk_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20000314 	.word	0x20000314

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
