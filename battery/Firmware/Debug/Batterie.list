
Batterie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008174  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08008358  08008358  00009358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008730  08008730  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008738  08008738  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008738  08008738  00009738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800873c  0800873c  0000973c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008740  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  08008914  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008914  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018128  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d1  00000000  00000000  0002232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00025500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001056  00000000  00000000  00026a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021eb5  00000000  00000000  00027a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019364  00000000  00000000  0004992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd26b  00000000  00000000  00062c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fefa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  0013ff40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001469a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800833c 	.word	0x0800833c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800833c 	.word	0x0800833c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fb3d 	bl	8006620 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fae:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4817      	ldr	r0, [pc, #92]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001012:	f000 ff9b 	bl	8001f4c <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800101c:	f000 fa4c 	bl	80014b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800102c:	f001 ff50 	bl	8002ed0 <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001036:	f000 fa3f 	bl	80014b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_ADC1_Init+0xec>)
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2306      	movs	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001042:	2306      	movs	r3, #6
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	@ 0x7f
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2304      	movs	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001058:	f001 fa9e 	bl	8002598 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001062:	f000 fa29 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001f0 	.word	0x200001f0
 8001074:	04300002 	.word	0x04300002

08001078 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f005 facb 	bl	8006620 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_ADC2_Init+0xc0>)
 800108c:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <MX_ADC2_Init+0xc4>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <MX_ADC2_Init+0xc0>)
 8001092:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001096:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_ADC2_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010f4:	f000 ff2a 	bl	8001f4c <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80010fe:	f000 f9db 	bl	80014b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_ADC2_Init+0xc8>)
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001106:	2306      	movs	r3, #6
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110e:	237f      	movs	r3, #127	@ 0x7f
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <MX_ADC2_Init+0xc0>)
 8001120:	f001 fa3a 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800112a:	f000 f9c5 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000025c 	.word	0x2000025c
 800113c:	50000100 	.word	0x50000100
 8001140:	10c00010 	.word	0x10c00010

08001144 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09c      	sub	sp, #112	@ 0x70
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	2244      	movs	r2, #68	@ 0x44
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fa5b 	bl	8006620 <memset>
  if(adcHandle->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001172:	d13e      	bne.n	80011f2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001178:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800117a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800117e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f003 f807 	bl	8004198 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001190:	f000 f992 	bl	80014b8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001194:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <HAL_ADC_MspInit+0x13c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a39      	ldr	r2, [pc, #228]	@ (8001280 <HAL_ADC_MspInit+0x13c>)
 800119c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_ADC_MspInit+0x13c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10b      	bne.n	80011be <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a6:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a36      	ldr	r2, [pc, #216]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a30      	ldr	r2, [pc, #192]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 80011d6:	2301      	movs	r3, #1
 80011d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f001 fff4 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011f0:	e042      	b.n	8001278 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <HAL_ADC_MspInit+0x144>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d13d      	bne.n	8001278 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001200:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001202:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001206:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4618      	mov	r0, r3
 800120e:	f002 ffc3 	bl	8004198 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001218:	f000 f94e 	bl	80014b8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_ADC_MspInit+0x13c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <HAL_ADC_MspInit+0x13c>)
 8001224:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_ADC_MspInit+0x13c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10b      	bne.n	8001246 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 8001234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_ADC_MspInit+0x140>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SYS_Pin;
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(SYS_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f001 ffb0 	bl	80031d8 <HAL_GPIO_Init>
}
 8001278:	bf00      	nop
 800127a:	3770      	adds	r7, #112	@ 0x70
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200002c8 	.word	0x200002c8
 8001284:	40021000 	.word	0x40021000
 8001288:	50000100 	.word	0x50000100

0800128c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_GPIO_Init+0x60>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a4:	4a11      	ldr	r2, [pc, #68]	@ (80012ec <MX_GPIO_Init+0x60>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_GPIO_Init+0x60>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|STAT1_Pin|STAT2_Pin|LED_STATUS_Pin
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 715c 	mov.w	r1, #880	@ 0x370
 80012be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c2:	f002 f923 	bl	800350c <HAL_GPIO_WritePin>
                          |LED_PLAYING_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CE_Pin STAT1_Pin STAT2_Pin LED_STATUS_Pin
                           LED_PLAYING_Pin */
  GPIO_InitStruct.Pin = CE_Pin|STAT1_Pin|STAT2_Pin|LED_STATUS_Pin
 80012c6:	f44f 735c 	mov.w	r3, #880	@ 0x370
 80012ca:	607b      	str	r3, [r7, #4]
                          |LED_PLAYING_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e0:	f001 ff7a 	bl	80031d8 <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000

080012f0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80012f8:	1d39      	adds	r1, r7, #4
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	2201      	movs	r2, #1
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <__io_putchar+0x20>)
 8001302:	f003 fcaf 	bl	8004c64 <HAL_UART_Transmit>

	return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000031c 	.word	0x2000031c

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fb92 	bl	8001a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f879 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f7ff ffb3 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001326:	f000 fa6f 	bl	8001808 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800132a:	f7ff fe2d 	bl	8000f88 <MX_ADC1_Init>
  MX_ADC2_Init();
 800132e:	f7ff fea3 	bl	8001078 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("BONJOUR\r\n");
 8001332:	4836      	ldr	r0, [pc, #216]	@ (800140c <main+0xf8>)
 8001334:	f005 f894 	bl	8006460 <puts>

	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f002 f8fc 	bl	800353c <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		float voltage=read_analog_input();
 8001344:	f000 fb04 	bl	8001950 <read_analog_input>
 8001348:	ed87 0a01 	vstr	s0, [r7, #4]
		HAL_Delay(500);
 800134c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001350:	f000 fbae 	bl	8001ab0 <HAL_Delay>

		if (voltage==0){
 8001354:	edd7 7a01 	vldr	s15, [r7, #4]
 8001358:	eef5 7a40 	vcmp.f32	s15, #0.0
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d106      	bne.n	8001370 <main+0x5c>
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,1);
 8001362:	2201      	movs	r2, #1
 8001364:	2110      	movs	r1, #16
 8001366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136a:	f002 f8cf 	bl	800350c <HAL_GPIO_WritePin>
 800136e:	e040      	b.n	80013f2 <main+0xde>
		}
		else if(voltage<3.5){ //Voltage ou la batterie est à 10%
 8001370:	edd7 7a01 	vldr	s15, [r7, #4]
 8001374:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d50c      	bpl.n	800139c <main+0x88>
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,0);
 8001382:	2200      	movs	r2, #0
 8001384:	2110      	movs	r1, #16
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f002 f8bf 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 800138e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f002 f8d1 	bl	800353c <HAL_GPIO_TogglePin>
 800139a:	e02a      	b.n	80013f2 <main+0xde>
		}
		else if(voltage>4){
 800139c:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80013a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd0d      	ble.n	80013ca <main+0xb6>
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,1);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2110      	movs	r1, #16
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f002 f8a9 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PLAYING_GPIO_Port, LED_PLAYING_Pin, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c4:	f002 f8a2 	bl	800350c <HAL_GPIO_WritePin>
 80013c8:	e013      	b.n	80013f2 <main+0xde>

		}
		else{
			HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2110      	movs	r1, #16
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f002 f89b 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e0:	f002 f894 	bl	800350c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PLAYING_GPIO_Port, LED_PLAYING_Pin, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f002 f88d 	bl	800350c <HAL_GPIO_WritePin>
		}
		int CE=HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin);
 80013f2:	2110      	movs	r1, #16
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f002 f870 	bl	80034dc <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	603b      	str	r3, [r7, #0]
		printf("%i \n\r",CE);
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <main+0xfc>)
 8001404:	f004 ffc4 	bl	8006390 <iprintf>
	{
 8001408:	e79c      	b.n	8001344 <main+0x30>
 800140a:	bf00      	nop
 800140c:	08008358 	.word	0x08008358
 8001410:	08008364 	.word	0x08008364

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	@ 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	2238      	movs	r2, #56	@ 0x38
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f005 f8fc 	bl	8006620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800143a:	f002 f899 	bl	8003570 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001448:	2340      	movs	r3, #64	@ 0x40
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f002 f93f 	bl	80036d8 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001460:	f000 f82a 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001468:	2301      	movs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fc3d 	bl	8003cfc <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001488:	f000 f816 	bl	80014b8 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	@ 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014a6:	f000 fae5 	bl	8001a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40001000 	.word	0x40001000

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_MspInit+0x44>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_MspInit+0x44>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014fa:	f002 f8dd 	bl	80036b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	@ 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800151c:	4b2c      	ldr	r3, [pc, #176]	@ (80015d0 <HAL_InitTick+0xc4>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001520:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <HAL_InitTick+0xc4>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6593      	str	r3, [r2, #88]	@ 0x58
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_InitTick+0xc4>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001534:	f107 020c 	add.w	r2, r7, #12
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fdb2 	bl	80040a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001544:	f002 fd84 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8001548:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154c:	4a21      	ldr	r2, [pc, #132]	@ (80015d4 <HAL_InitTick+0xc8>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0c9b      	lsrs	r3, r3, #18
 8001554:	3b01      	subs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_InitTick+0xcc>)
 800155a:	4a20      	ldr	r2, [pc, #128]	@ (80015dc <HAL_InitTick+0xd0>)
 800155c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_InitTick+0xcc>)
 8001560:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001564:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <HAL_InitTick+0xcc>)
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <HAL_InitTick+0xcc>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_InitTick+0xcc>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001578:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <HAL_InitTick+0xcc>)
 800157a:	f002 fffd 	bl	8004578 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001588:	2b00      	cmp	r3, #0
 800158a:	d11b      	bne.n	80015c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800158c:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <HAL_InitTick+0xcc>)
 800158e:	f003 f855 	bl	800463c <HAL_TIM_Base_Start_IT>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001598:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800159c:	2b00      	cmp	r3, #0
 800159e:	d111      	bne.n	80015c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a0:	2036      	movs	r0, #54	@ 0x36
 80015a2:	f001 fe0b 	bl	80031bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d808      	bhi.n	80015be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	2036      	movs	r0, #54	@ 0x36
 80015b2:	f001 fde9 	bl	8003188 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_InitTick+0xd4>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e002      	b.n	80015c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3730      	adds	r7, #48	@ 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	200002cc 	.word	0x200002cc
 80015dc:	40001000 	.word	0x40001000
 80015e0:	20000004 	.word	0x20000004

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <NMI_Handler+0x4>

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <MemManage_Handler+0x4>

080015fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <UsageFault_Handler+0x4>

0800160c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM6_DAC_IRQHandler+0x10>)
 800164a:	f003 f861 	bl	8004710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002cc 	.word	0x200002cc

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f005 f827 	bl	80066c4 <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
  }

  return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fdfc 	bl	80012f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
  }
  return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_close>:

int _close(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001738:	605a      	str	r2, [r3, #4]
  return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_isatty>:

int _isatty(int file)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f004 ff8c 	bl	80066c4 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20008000 	.word	0x20008000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	20000318 	.word	0x20000318
 80017e0:	20000500 	.word	0x20000500

080017e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800180e:	4a23      	ldr	r2, [pc, #140]	@ (800189c <MX_USART2_UART_Init+0x94>)
 8001810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001850:	4811      	ldr	r0, [pc, #68]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001852:	f003 f9b7 	bl	8004bc4 <HAL_UART_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800185c:	f7ff fe2c 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001864:	f003 ffb0 	bl	80057c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800186e:	f7ff fe23 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4808      	ldr	r0, [pc, #32]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001876:	f003 ffe5 	bl	8005844 <HAL_UARTEx_SetRxFifoThreshold>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001880:	f7ff fe1a 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001886:	f003 ff66 	bl	8005756 <HAL_UARTEx_DisableFifoMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001890:	f7ff fe12 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000031c 	.word	0x2000031c
 800189c:	40004400 	.word	0x40004400

080018a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09a      	sub	sp, #104	@ 0x68
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2244      	movs	r2, #68	@ 0x44
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fead 	bl	8006620 <memset>
  if(uartHandle->Instance==USART2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_UART_MspInit+0xa8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d136      	bne.n	800193e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fc5b 	bl	8004198 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e8:	f7ff fde6 	bl	80014b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_UART_MspInit+0xac>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <HAL_UART_MspInit+0xac>)
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_UART_MspInit+0xac>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_UART_MspInit+0xac>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_UART_MspInit+0xac>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_UART_MspInit+0xac>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800191c:	230c      	movs	r3, #12
 800191e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192c:	2307      	movs	r3, #7
 800192e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f001 fc4d 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800193e:	bf00      	nop
 8001940:	3768      	adds	r7, #104	@ 0x68
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000

08001950 <read_analog_input>:



float VMAX=5; //Tension Maximale de la batterie

float read_analog_input(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

	uint32_t raw_value;
	float voltage;

	HAL_ADC_Start(&hadc1);
 8001956:	4824      	ldr	r0, [pc, #144]	@ (80019e8 <read_analog_input+0x98>)
 8001958:	f000 fc7c 	bl	8002254 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	4821      	ldr	r0, [pc, #132]	@ (80019e8 <read_analog_input+0x98>)
 8001962:	f000 fd33 	bl	80023cc <HAL_ADC_PollForConversion>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d12c      	bne.n	80019c6 <read_analog_input+0x76>
    	raw_value = HAL_ADC_GetValue(&hadc1);
 800196c:	481e      	ldr	r0, [pc, #120]	@ (80019e8 <read_analog_input+0x98>)
 800196e:	f000 fe05 	bl	800257c <HAL_ADC_GetValue>
 8001972:	6078      	str	r0, [r7, #4]
    	voltage = (float)raw_value*4.04/1596;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f7fe fe09 	bl	8000598 <__aeabi_f2d>
 8001986:	a314      	add	r3, pc, #80	@ (adr r3, 80019d8 <read_analog_input+0x88>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fe5c 	bl	8000648 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	a311      	add	r3, pc, #68	@ (adr r3, 80019e0 <read_analog_input+0x90>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe ff7d 	bl	800089c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f925 	bl	8000bf8 <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	603b      	str	r3, [r7, #0]
    	printf("Tension= %f V\r\n", voltage);
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f7fe fdf0 	bl	8000598 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <read_analog_input+0x9c>)
 80019be:	f004 fce7 	bl	8006390 <iprintf>
    	return voltage;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	e001      	b.n	80019ca <read_analog_input+0x7a>
    }

    return 0;
 80019c6:	f04f 0300 	mov.w	r3, #0
}
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	c28f5c29 	.word	0xc28f5c29
 80019dc:	401028f5 	.word	0x401028f5
 80019e0:	00000000 	.word	0x00000000
 80019e4:	4098f000 	.word	0x4098f000
 80019e8:	200001f0 	.word	0x200001f0
 80019ec:	0800836c 	.word	0x0800836c

080019f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f0:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f4:	f7ff fef6 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	@ (8001a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <LoopForever+0xe>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	@ (8001a3c <LoopForever+0x16>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f004 fe57 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a22:	f7ff fc77 	bl	8001314 <main>

08001a26 <LoopForever>:

LoopForever:
    b LoopForever
 8001a26:	e7fe      	b.n	8001a26 <LoopForever>
  ldr   r0, =_estack
 8001a28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a34:	08008740 	.word	0x08008740
  ldr r2, =_sbss
 8001a38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a3c:	20000500 	.word	0x20000500

08001a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_2_IRQHandler>

08001a42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f001 fb90 	bl	8003172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a52:	200f      	movs	r0, #15
 8001a54:	f7ff fd5a 	bl	800150c <HAL_InitTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	e001      	b.n	8001a68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a64:	f7ff fd2e 	bl	80014c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a68:	79fb      	ldrb	r3, [r7, #7]

}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_IncTick+0x1c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a03      	ldr	r2, [pc, #12]	@ (8001a90 <HAL_IncTick+0x1c>)
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	200003b0 	.word	0x200003b0
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200003b0 	.word	0x200003b0

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d004      	beq.n	8001ad4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_Delay+0x40>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad4:	bf00      	nop
 8001ad6:	f7ff ffdf 	bl	8001a98 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d8f7      	bhi.n	8001ad6 <HAL_Delay+0x26>
  {
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000008 	.word	0x20000008

08001af4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3360      	adds	r3, #96	@ 0x60
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <LL_ADC_SetOffset+0x44>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	03fff000 	.word	0x03fff000

08001ba4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3360      	adds	r3, #96	@ 0x60
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3360      	adds	r3, #96	@ 0x60
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3360      	adds	r3, #96	@ 0x60
 8001c16:	461a      	mov	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3360      	adds	r3, #96	@ 0x60
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	615a      	str	r2, [r3, #20]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3330      	adds	r3, #48	@ 0x30
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	211f      	movs	r1, #31
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	f003 011f 	and.w	r1, r3, #31
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b087      	sub	sp, #28
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3314      	adds	r3, #20
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0e5b      	lsrs	r3, r3, #25
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0d1b      	lsrs	r3, r3, #20
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2107      	movs	r1, #7
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	0d1b      	lsrs	r3, r3, #20
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0318 	and.w	r3, r3, #24
 8001d8e:	4908      	ldr	r1, [pc, #32]	@ (8001db0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	400b      	ands	r3, r1
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	0007ffff 	.word	0x0007ffff

08001db4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6093      	str	r3, [r2, #8]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_IsEnabled+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_IsEnabled+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ee6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eea:	f043 0204 	orr.w	r2, r3, #4
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d101      	bne.n	8001f16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d101      	bne.n	8001f3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e167      	b.n	8002236 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff f8e5 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff3f 	bl	8001e10 <LL_ADC_IsDeepPowerDownEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff25 	bl	8001dec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff5a 	bl	8001e60 <LL_ADC_IsInternalRegulatorEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff3e 	bl	8001e38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8002240 <HAL_ADC_Init+0x2f4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	4aa0      	ldr	r2, [pc, #640]	@ (8002244 <HAL_ADC_Init+0x2f8>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff3c 	bl	8001e60 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff75 	bl	8001efe <LL_ADC_REG_IsConversionOngoing>
 8002014:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8100 	bne.w	8002224 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80fc 	bne.w	8002224 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002030:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff35 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800204c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002050:	f7ff ff2e 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002054:	4604      	mov	r4, r0
 8002056:	487c      	ldr	r0, [pc, #496]	@ (8002248 <HAL_ADC_Init+0x2fc>)
 8002058:	f7ff ff2a 	bl	8001eb0 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	4878      	ldr	r0, [pc, #480]	@ (800224c <HAL_ADC_Init+0x300>)
 800206c:	f7ff fd42 	bl	8001af4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7f5b      	ldrb	r3, [r3, #29]
 8002074:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002080:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002086:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800208e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	3b01      	subs	r3, #1
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <HAL_ADC_Init+0x304>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff14 	bl	8001f24 <LL_ADC_INJ_IsConversionOngoing>
 80020fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d16d      	bne.n	80021e0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d16a      	bne.n	80021e0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800210e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002116:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002126:	f023 0302 	bic.w	r3, r3, #2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d017      	beq.n	800216c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800214a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002154:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002158:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6911      	ldr	r1, [r2, #16]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	430b      	orrs	r3, r1
 8002166:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800216a:	e013      	b.n	8002194 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800217a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800218c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002190:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219a:	2b01      	cmp	r3, #1
 800219c:	d118      	bne.n	80021d0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021c0:	430a      	orrs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	e007      	b.n	80021e0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10c      	bne.n	8002202 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f023 010f 	bic.w	r1, r3, #15
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	1e5a      	subs	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002200:	e007      	b.n	8002212 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 020f 	bic.w	r2, r2, #15
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002222:	e007      	b.n	8002234 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002234:	7ffb      	ldrb	r3, [r7, #31]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	@ 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000
 8002244:	053e2d63 	.word	0x053e2d63
 8002248:	50000100 	.word	0x50000100
 800224c:	50000300 	.word	0x50000300
 8002250:	fff04007 	.word	0xfff04007

08002254 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225c:	4859      	ldr	r0, [pc, #356]	@ (80023c4 <HAL_ADC_Start+0x170>)
 800225e:	f7ff fda9 	bl	8001db4 <LL_ADC_GetMultimode>
 8002262:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fe48 	bl	8001efe <LL_ADC_REG_IsConversionOngoing>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 809f 	bne.w	80023b4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_ADC_Start+0x30>
 8002280:	2302      	movs	r3, #2
 8002282:	e09a      	b.n	80023ba <HAL_ADC_Start+0x166>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fd73 	bl	8002d78 <ADC_Enable>
 8002292:	4603      	mov	r3, r0
 8002294:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8086 	bne.w	80023aa <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a44      	ldr	r2, [pc, #272]	@ (80023c8 <HAL_ADC_Start+0x174>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d002      	beq.n	80022c2 <HAL_ADC_Start+0x6e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	e001      	b.n	80022c6 <HAL_ADC_Start+0x72>
 80022c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d002      	beq.n	80022d4 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ec:	d106      	bne.n	80022fc <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f023 0206 	bic.w	r2, r3, #6
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80022fa:	e002      	b.n	8002302 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	221c      	movs	r2, #28
 8002308:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2c      	ldr	r2, [pc, #176]	@ (80023c8 <HAL_ADC_Start+0x174>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d002      	beq.n	8002322 <HAL_ADC_Start+0xce>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e001      	b.n	8002326 <HAL_ADC_Start+0xd2>
 8002322:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	4293      	cmp	r3, r2
 800232c:	d008      	beq.n	8002340 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d002      	beq.n	8002340 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b09      	cmp	r3, #9
 800233e:	d114      	bne.n	800236a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002356:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fdb7 	bl	8001ed6 <LL_ADC_REG_StartConversion>
 8002368:	e026      	b.n	80023b8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <HAL_ADC_Start+0x174>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d002      	beq.n	8002386 <HAL_ADC_Start+0x132>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	e001      	b.n	800238a <HAL_ADC_Start+0x136>
 8002386:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800238a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00f      	beq.n	80023b8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023a8:	e006      	b.n	80023b8 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80023b2:	e001      	b.n	80023b8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	50000300 	.word	0x50000300
 80023c8:	50000100 	.word	0x50000100

080023cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d6:	4867      	ldr	r0, [pc, #412]	@ (8002574 <HAL_ADC_PollForConversion+0x1a8>)
 80023d8:	f7ff fcec 	bl	8001db4 <LL_ADC_GetMultimode>
 80023dc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023e6:	2308      	movs	r3, #8
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e02a      	b.n	8002442 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d002      	beq.n	80023fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b09      	cmp	r3, #9
 80023fc:	d111      	bne.n	8002422 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	f043 0220 	orr.w	r2, r3, #32
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0a6      	b.n	800256a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800241c:	2304      	movs	r3, #4
 800241e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002420:	e00f      	b.n	8002442 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002422:	4854      	ldr	r0, [pc, #336]	@ (8002574 <HAL_ADC_PollForConversion+0x1a8>)
 8002424:	f7ff fcd4 	bl	8001dd0 <LL_ADC_GetMultiDMATransfer>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e095      	b.n	800256a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800243e:	2304      	movs	r3, #4
 8002440:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002442:	f7ff fb29 	bl	8001a98 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002448:	e021      	b.n	800248e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d01d      	beq.n	800248e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002452:	f7ff fb21 	bl	8001a98 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <HAL_ADC_PollForConversion+0x9c>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d112      	bne.n	800248e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	f043 0204 	orr.w	r2, r3, #4
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e06d      	b.n	800256a <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0d6      	beq.n	800244a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fbf3 	bl	8001c98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01c      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7f5b      	ldrb	r3, [r3, #29]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d118      	bne.n	80024f2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d111      	bne.n	80024f2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a20      	ldr	r2, [pc, #128]	@ (8002578 <HAL_ADC_PollForConversion+0x1ac>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d002      	beq.n	8002502 <HAL_ADC_PollForConversion+0x136>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	e001      	b.n	8002506 <HAL_ADC_PollForConversion+0x13a>
 8002502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	4293      	cmp	r3, r2
 800250c:	d008      	beq.n	8002520 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d002      	beq.n	8002520 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d104      	bne.n	800252a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	e00d      	b.n	8002546 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <HAL_ADC_PollForConversion+0x1ac>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d002      	beq.n	800253a <HAL_ADC_PollForConversion+0x16e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	e001      	b.n	800253e <HAL_ADC_PollForConversion+0x172>
 800253a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800253e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d104      	bne.n	8002556 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2208      	movs	r2, #8
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e008      	b.n	8002568 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	220c      	movs	r2, #12
 8002566:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	50000300 	.word	0x50000300
 8002578:	50000100 	.word	0x50000100

0800257c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0b6      	sub	sp, #216	@ 0xd8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x22>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e3c8      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x7b4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc99 	bl	8001efe <LL_ADC_REG_IsConversionOngoing>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 83ad 	bne.w	8002d2e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f7ff fb6c 	bl	8001cbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fc87 	bl	8001efe <LL_ADC_REG_IsConversionOngoing>
 80025f0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fc93 	bl	8001f24 <LL_ADC_INJ_IsConversionOngoing>
 80025fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002602:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 81d9 	bne.w	80029be <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800260c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 81d4 	bne.w	80029be <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800261e:	d10f      	bne.n	8002640 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	4619      	mov	r1, r3
 800262c:	f7ff fb73 	bl	8001d16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fb1a 	bl	8001c72 <LL_ADC_SetSamplingTimeCommonConfig>
 800263e:	e00e      	b.n	800265e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	461a      	mov	r2, r3
 800264e:	f7ff fb62 	bl	8001d16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fb0a 	bl	8001c72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d022      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6919      	ldr	r1, [r3, #16]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002690:	f7ff fa64 	bl	8001b5c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6919      	ldr	r1, [r3, #16]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f7ff fab0 	bl	8001c06 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x124>
 80026b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026ba:	e000      	b.n	80026be <HAL_ADC_ConfigChannel+0x126>
 80026bc:	2300      	movs	r3, #0
 80026be:	461a      	mov	r2, r3
 80026c0:	f7ff fabc 	bl	8001c3c <LL_ADC_SetOffsetSaturation>
 80026c4:	e17b      	b.n	80029be <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fa69 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x15a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fa5e 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x198>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fa53 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002714:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e004      	b.n	800272e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002724:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1b0>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	e018      	b.n	800277a <HAL_ADC_ConfigChannel+0x1e2>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800275c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e004      	b.n	800277a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800277a:	429a      	cmp	r2, r3
 800277c:	d106      	bne.n	800278c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fa22 	bl	8001bd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fa06 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x220>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f9fb 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	f003 021f 	and.w	r2, r3, #31
 80027b6:	e01e      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x25e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f9f0 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e004      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80027ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_ADC_ConfigChannel+0x276>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	e018      	b.n	8002840 <HAL_ADC_ConfigChannel+0x2a8>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800282a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e004      	b.n	8002840 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002836:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002840:	429a      	cmp	r2, r3
 8002842:	d106      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff f9bf 	bl	8001bd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f9a3 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_ADC_ConfigChannel+0x2e6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2102      	movs	r1, #2
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f998 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	e01e      	b.n	80028bc <HAL_ADC_ConfigChannel+0x324>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f98d 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800289c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80028a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e004      	b.n	80028ba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80028b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x33c>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	e016      	b.n	8002902 <HAL_ADC_ConfigChannel+0x36a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80028f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002902:	429a      	cmp	r2, r3
 8002904:	d106      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f95e 	bl	8001bd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2103      	movs	r1, #3
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f942 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x3a8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2103      	movs	r1, #3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f937 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	e017      	b.n	8002970 <HAL_ADC_ConfigChannel+0x3d8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2103      	movs	r1, #3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f92c 	bl	8001ba4 <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002958:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800295a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800295c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x3f0>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	e011      	b.n	80029ac <HAL_ADC_ConfigChannel+0x414>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800299a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80029a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f909 	bl	8001bd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fa74 	bl	8001eb0 <LL_ADC_IsEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 8140 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	461a      	mov	r2, r3
 80029de:	f7ff f9c5 	bl	8001d6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002c24 <HAL_ADC_ConfigChannel+0x68c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	f040 8131 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x47e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	bf94      	ite	ls
 8002a0e:	2301      	movls	r3, #1
 8002a10:	2300      	movhi	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e019      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x4b2>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a26:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d079      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x4d2>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	3301      	adds	r3, #1
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a68:	e015      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x4fe>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a7a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e003      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	069b      	lsls	r3, r3, #26
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x51e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	e017      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x54e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	ea42 0103 	orr.w	r1, r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x574>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 021f 	and.w	r2, r3, #31
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	051b      	lsls	r3, r3, #20
 8002b0a:	e018      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x5a6>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	e081      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x5c6>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	3301      	adds	r3, #1
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b5c:	e015      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x5f2>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	069b      	lsls	r3, r3, #26
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x612>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	e017      	b.n	8002bda <HAL_ADC_ConfigChannel+0x642>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x66e>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 021f 	and.w	r2, r3, #31
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c04:	e01e      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x6ac>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	613b      	str	r3, [r7, #16]
  return result;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e006      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x698>
 8002c22:	bf00      	nop
 8002c24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7ff f863 	bl	8001d16 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d071      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5c:	483e      	ldr	r0, [pc, #248]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c5e:	f7fe ff6f 	bl	8001b40 <LL_ADC_GetCommonPathInternalCh>
 8002c62:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_ADC_ConfigChannel+0x6e2>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d127      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c8e:	d157      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c98:	4619      	mov	r1, r3
 8002c9a:	482f      	ldr	r0, [pc, #188]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c9c:	f7fe ff3d 	bl	8001b1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	4a30      	ldr	r2, [pc, #192]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cba:	e002      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc8:	e03a      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a27      	ldr	r2, [pc, #156]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7d4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d113      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10d      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a22      	ldr	r2, [pc, #136]	@ (8002d70 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02a      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4818      	ldr	r0, [pc, #96]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cf6:	f7fe ff10 	bl	8001b1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfa:	e021      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d11c      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d011      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d24:	4619      	mov	r1, r3
 8002d26:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d28:	f7fe fef7 	bl	8001b1a <LL_ADC_SetCommonPathInternalCh>
 8002d2c:	e008      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d48:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	37d8      	adds	r7, #216	@ 0xd8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	80080000 	.word	0x80080000
 8002d58:	50000300 	.word	0x50000300
 8002d5c:	c3210000 	.word	0xc3210000
 8002d60:	90c00010 	.word	0x90c00010
 8002d64:	20000000 	.word	0x20000000
 8002d68:	053e2d63 	.word	0x053e2d63
 8002d6c:	c7520000 	.word	0xc7520000
 8002d70:	50000100 	.word	0x50000100
 8002d74:	cb840000 	.word	0xcb840000

08002d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f891 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d169      	bne.n	8002e68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <ADC_Enable+0xfc>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e055      	b.n	8002e6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff f860 	bl	8001e88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dc8:	482b      	ldr	r0, [pc, #172]	@ (8002e78 <ADC_Enable+0x100>)
 8002dca:	f7fe feb9 	bl	8001b40 <LL_ADC_GetCommonPathInternalCh>
 8002dce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd8:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <ADC_Enable+0x104>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <ADC_Enable+0x108>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002df2:	e002      	b.n	8002dfa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fe4a 	bl	8001a98 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e06:	e028      	b.n	8002e5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f84f 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f833 	bl	8001e88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e22:	f7fe fe39 	bl	8001a98 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d914      	bls.n	8002e5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d00d      	beq.n	8002e5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	f043 0210 	orr.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d1cf      	bne.n	8002e08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	8000003f 	.word	0x8000003f
 8002e78:	50000300 	.word	0x50000300
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	053e2d63 	.word	0x053e2d63

08002e84 <LL_ADC_IsEnabled>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <LL_ADC_IsEnabled+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_ADC_IsEnabled+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_ADC_REG_IsConversionOngoing>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b0a1      	sub	sp, #132	@ 0x84
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e08b      	b.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002efa:	2300      	movs	r3, #0
 8002efc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f06:	d102      	bne.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f08:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	e001      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e06a      	b.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ffb9 	bl	8002eaa <LL_ADC_REG_IsConversionOngoing>
 8002f38:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ffb3 	bl	8002eaa <LL_ADC_REG_IsConversionOngoing>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14c      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d149      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f50:	4b30      	ldr	r3, [pc, #192]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f52:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d028      	beq.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f6e:	035b      	lsls	r3, r3, #13
 8002f70:	430b      	orrs	r3, r1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f7c:	f7ff ff82 	bl	8002e84 <LL_ADC_IsEnabled>
 8002f80:	4604      	mov	r4, r0
 8002f82:	4823      	ldr	r0, [pc, #140]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f84:	f7ff ff7e 	bl	8002e84 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d133      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f98:	f023 030f 	bic.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	6811      	ldr	r1, [r2, #0]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	6892      	ldr	r2, [r2, #8]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002faa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fac:	e024      	b.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fbe:	f7ff ff61 	bl	8002e84 <LL_ADC_IsEnabled>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4812      	ldr	r0, [pc, #72]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fc6:	f7ff ff5d 	bl	8002e84 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4323      	orrs	r3, r4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d112      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fda:	f023 030f 	bic.w	r3, r3, #15
 8002fde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fe0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe2:	e009      	b.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ff6:	e000      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003002:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003006:	4618      	mov	r0, r3
 8003008:	3784      	adds	r7, #132	@ 0x84
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop
 8003010:	50000100 	.word	0x50000100
 8003014:	50000300 	.word	0x50000300

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	@ (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db0a      	blt.n	80030e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	490c      	ldr	r1, [pc, #48]	@ (8003104 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	440b      	add	r3, r1
 80030dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e0:	e00a      	b.n	80030f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4908      	ldr	r1, [pc, #32]	@ (8003108 <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	761a      	strb	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf28      	it	cs
 800312a:	2304      	movcs	r3, #4
 800312c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3304      	adds	r3, #4
 8003132:	2b06      	cmp	r3, #6
 8003134:	d902      	bls.n	800313c <NVIC_EncodePriority+0x30>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3b03      	subs	r3, #3
 800313a:	e000      	b.n	800313e <NVIC_EncodePriority+0x32>
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43d9      	mvns	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	4313      	orrs	r3, r2
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	@ 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff4c 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003196:	f7ff ff63 	bl	8003060 <__NVIC_GetPriorityGrouping>
 800319a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6978      	ldr	r0, [r7, #20]
 80031a2:	f7ff ffb3 	bl	800310c <NVIC_EncodePriority>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff82 	bl	80030b8 <__NVIC_SetPriority>
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff56 	bl	800307c <__NVIC_EnableIRQ>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031e6:	e15a      	b.n	800349e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 814c 	beq.w	8003498 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d005      	beq.n	8003218 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003214:	2b02      	cmp	r3, #2
 8003216:	d130      	bne.n	800327a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800324e:	2201      	movs	r2, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0201 	and.w	r2, r3, #1
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b03      	cmp	r3, #3
 8003284:	d017      	beq.n	80032b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2203      	movs	r2, #3
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d123      	bne.n	800330a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	220f      	movs	r2, #15
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	6939      	ldr	r1, [r7, #16]
 8003306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80a6 	beq.w	8003498 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334c:	4b5b      	ldr	r3, [pc, #364]	@ (80034bc <HAL_GPIO_Init+0x2e4>)
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	4a5a      	ldr	r2, [pc, #360]	@ (80034bc <HAL_GPIO_Init+0x2e4>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6613      	str	r3, [r2, #96]	@ 0x60
 8003358:	4b58      	ldr	r3, [pc, #352]	@ (80034bc <HAL_GPIO_Init+0x2e4>)
 800335a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003364:	4a56      	ldr	r2, [pc, #344]	@ (80034c0 <HAL_GPIO_Init+0x2e8>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3302      	adds	r3, #2
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	220f      	movs	r2, #15
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800338e:	d01f      	beq.n	80033d0 <HAL_GPIO_Init+0x1f8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a4c      	ldr	r2, [pc, #304]	@ (80034c4 <HAL_GPIO_Init+0x2ec>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d019      	beq.n	80033cc <HAL_GPIO_Init+0x1f4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a4b      	ldr	r2, [pc, #300]	@ (80034c8 <HAL_GPIO_Init+0x2f0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_GPIO_Init+0x1f0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a4a      	ldr	r2, [pc, #296]	@ (80034cc <HAL_GPIO_Init+0x2f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00d      	beq.n	80033c4 <HAL_GPIO_Init+0x1ec>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a49      	ldr	r2, [pc, #292]	@ (80034d0 <HAL_GPIO_Init+0x2f8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <HAL_GPIO_Init+0x1e8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a48      	ldr	r2, [pc, #288]	@ (80034d4 <HAL_GPIO_Init+0x2fc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_GPIO_Init+0x1e4>
 80033b8:	2305      	movs	r3, #5
 80033ba:	e00a      	b.n	80033d2 <HAL_GPIO_Init+0x1fa>
 80033bc:	2306      	movs	r3, #6
 80033be:	e008      	b.n	80033d2 <HAL_GPIO_Init+0x1fa>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e006      	b.n	80033d2 <HAL_GPIO_Init+0x1fa>
 80033c4:	2303      	movs	r3, #3
 80033c6:	e004      	b.n	80033d2 <HAL_GPIO_Init+0x1fa>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e002      	b.n	80033d2 <HAL_GPIO_Init+0x1fa>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_GPIO_Init+0x1fa>
 80033d0:	2300      	movs	r3, #0
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	f002 0203 	and.w	r2, r2, #3
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	4093      	lsls	r3, r2
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e2:	4937      	ldr	r1, [pc, #220]	@ (80034c0 <HAL_GPIO_Init+0x2e8>)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033f0:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003414:	4a30      	ldr	r2, [pc, #192]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800341a:	4b2f      	ldr	r3, [pc, #188]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800343e:	4a26      	ldr	r2, [pc, #152]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003444:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003468:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800346e:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003492:	4a11      	ldr	r2, [pc, #68]	@ (80034d8 <HAL_GPIO_Init+0x300>)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f ae9d 	bne.w	80031e8 <HAL_GPIO_Init+0x10>
  }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010000 	.word	0x40010000
 80034c4:	48000400 	.word	0x48000400
 80034c8:	48000800 	.word	0x48000800
 80034cc:	48000c00 	.word	0x48000c00
 80034d0:	48001000 	.word	0x48001000
 80034d4:	48001400 	.word	0x48001400
 80034d8:	40010400 	.word	0x40010400

080034dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e001      	b.n	80034fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800351c:	787b      	ldrb	r3, [r7, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003528:	e002      	b.n	8003530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43d9      	mvns	r1, r3
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	400b      	ands	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d141      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800357e:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358a:	d131      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800358c:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003592:	4a46      	ldr	r2, [pc, #280]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800359c:	4b43      	ldr	r3, [pc, #268]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035a4:	4a41      	ldr	r2, [pc, #260]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ac:	4b40      	ldr	r3, [pc, #256]	@ (80036b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2232      	movs	r2, #50	@ 0x32
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	4a3f      	ldr	r2, [pc, #252]	@ (80036b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c2:	e002      	b.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ca:	4b38      	ldr	r3, [pc, #224]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d6:	d102      	bne.n	80035de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f2      	bne.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035de:	4b33      	ldr	r3, [pc, #204]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ea:	d158      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e057      	b.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035f0:	4b2e      	ldr	r3, [pc, #184]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f6:	4a2d      	ldr	r2, [pc, #180]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003600:	e04d      	b.n	800369e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003608:	d141      	bne.n	800368e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800360a:	4b28      	ldr	r3, [pc, #160]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003616:	d131      	bne.n	800367c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003618:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800361e:	4a23      	ldr	r2, [pc, #140]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003628:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003630:	4a1e      	ldr	r2, [pc, #120]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003636:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003638:	4b1d      	ldr	r3, [pc, #116]	@ (80036b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2232      	movs	r2, #50	@ 0x32
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a1c      	ldr	r2, [pc, #112]	@ (80036b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	0c9b      	lsrs	r3, r3, #18
 800364a:	3301      	adds	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364e:	e002      	b.n	8003656 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3b01      	subs	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003656:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003662:	d102      	bne.n	800366a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f2      	bne.n	8003650 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800366a:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003676:	d112      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e011      	b.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003688:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800368c:	e007      	b.n	800369e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800368e:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800369c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40007000 	.word	0x40007000
 80036b0:	20000000 	.word	0x20000000
 80036b4:	431bde83 	.word	0x431bde83

080036b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a04      	ldr	r2, [pc, #16]	@ (80036d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c6:	6093      	str	r3, [r2, #8]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40007000 	.word	0x40007000

080036d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e2fe      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d075      	beq.n	80037e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b97      	ldr	r3, [pc, #604]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b94      	ldr	r3, [pc, #592]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d102      	bne.n	8003716 <HAL_RCC_OscConfig+0x3e>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d002      	beq.n	800371c <HAL_RCC_OscConfig+0x44>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d10b      	bne.n	8003734 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	4b8d      	ldr	r3, [pc, #564]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05b      	beq.n	80037e0 <HAL_RCC_OscConfig+0x108>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d157      	bne.n	80037e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e2d9      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373c:	d106      	bne.n	800374c <HAL_RCC_OscConfig+0x74>
 800373e:	4b85      	ldr	r3, [pc, #532]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a84      	ldr	r2, [pc, #528]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x98>
 8003756:	4b7f      	ldr	r3, [pc, #508]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7e      	ldr	r2, [pc, #504]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b7c      	ldr	r3, [pc, #496]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7b      	ldr	r2, [pc, #492]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xb0>
 8003770:	4b78      	ldr	r3, [pc, #480]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a77      	ldr	r2, [pc, #476]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b75      	ldr	r3, [pc, #468]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a74      	ldr	r2, [pc, #464]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe f982 	bl	8001a98 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe f97e 	bl	8001a98 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	@ 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e29e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0xc0>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe f96e 	bl	8001a98 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe f96a 	bl	8001a98 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	@ 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e28a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d2:	4b60      	ldr	r3, [pc, #384]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0xe8>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d075      	beq.n	80038da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ee:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f8:	4b56      	ldr	r3, [pc, #344]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d102      	bne.n	800380e <HAL_RCC_OscConfig+0x136>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d002      	beq.n	8003814 <HAL_RCC_OscConfig+0x13c>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d11f      	bne.n	8003854 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003814:	4b4f      	ldr	r3, [pc, #316]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_OscConfig+0x154>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e25d      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	4946      	ldr	r1, [pc, #280]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003840:	4b45      	ldr	r3, [pc, #276]	@ (8003958 <HAL_RCC_OscConfig+0x280>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fe61 	bl	800150c <HAL_InitTick>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d043      	beq.n	80038d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e249      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d023      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385c:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3c      	ldr	r2, [pc, #240]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe f916 	bl	8001a98 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7fe f912 	bl	8001a98 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e232      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003882:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	492d      	ldr	r1, [pc, #180]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e01a      	b.n	80038da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f8f2 	bl	8001a98 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fe f8ee 	bl	8001a98 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e20e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ca:	4b22      	ldr	r3, [pc, #136]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d041      	beq.n	800396a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01c      	beq.n	8003928 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f4:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fe f8cb 	bl	8001a98 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fe f8c7 	bl	8001a98 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1e7      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003918:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ef      	beq.n	8003906 <HAL_RCC_OscConfig+0x22e>
 8003926:	e020      	b.n	800396a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392e:	4a09      	ldr	r2, [pc, #36]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe f8ae 	bl	8001a98 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800393e:	e00d      	b.n	800395c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7fe f8aa 	bl	8001a98 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d906      	bls.n	800395c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1ca      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	4b8c      	ldr	r3, [pc, #560]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ea      	bne.n	8003940 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800397c:	4b84      	ldr	r3, [pc, #528]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x2b4>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x2b6>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b7f      	ldr	r3, [pc, #508]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003996:	4a7e      	ldr	r2, [pc, #504]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
 800399e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	4b79      	ldr	r3, [pc, #484]	@ (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ba:	4b76      	ldr	r3, [pc, #472]	@ (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	@ (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fe f867 	bl	8001a98 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fe f863 	bl	8001a98 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e183      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d108      	bne.n	8003a06 <HAL_RCC_OscConfig+0x32e>
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fa:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a04:	e024      	b.n	8003a50 <HAL_RCC_OscConfig+0x378>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d110      	bne.n	8003a30 <HAL_RCC_OscConfig+0x358>
 8003a0e:	4b60      	ldr	r3, [pc, #384]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a14:	4a5e      	ldr	r2, [pc, #376]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	4a5a      	ldr	r2, [pc, #360]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a2e:	e00f      	b.n	8003a50 <HAL_RCC_OscConfig+0x378>
 8003a30:	4b57      	ldr	r3, [pc, #348]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	4a56      	ldr	r2, [pc, #344]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a40:	4b53      	ldr	r3, [pc, #332]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	4a52      	ldr	r2, [pc, #328]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe f81e 	bl	8001a98 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe f81a 	bl	8001a98 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e138      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ed      	beq.n	8003a60 <HAL_RCC_OscConfig+0x388>
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe f807 	bl	8001a98 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe f803 	bl	8001a98 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e121      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ed      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b35      	ldr	r3, [pc, #212]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	4a34      	ldr	r2, [pc, #208]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d03c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ade:	4a2c      	ldr	r2, [pc, #176]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd ffd6 	bl	8001a98 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af0:	f7fd ffd2 	bl	8001a98 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0f2      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCC_OscConfig+0x418>
 8003b10:	e01b      	b.n	8003b4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b12:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b18:	4a1d      	ldr	r2, [pc, #116]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fd ffb9 	bl	8001a98 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2a:	f7fd ffb5 	bl	8001a98 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0d5      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ef      	bne.n	8003b2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80c9 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b54:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	f000 8083 	beq.w	8003c68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d15e      	bne.n	8003c28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a08      	ldr	r2, [pc, #32]	@ (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd ff8f 	bl	8001a98 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	e00c      	b.n	8003b98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd ff8b 	bl	8001a98 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d905      	bls.n	8003b98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0ab      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	4b55      	ldr	r3, [pc, #340]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ec      	bne.n	8003b7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba4:	4b52      	ldr	r3, [pc, #328]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	4b52      	ldr	r3, [pc, #328]	@ (8003cf4 <HAL_RCC_OscConfig+0x61c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6a11      	ldr	r1, [r2, #32]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	4311      	orrs	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003bbe:	0212      	lsls	r2, r2, #8
 8003bc0:	4311      	orrs	r1, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	0552      	lsls	r2, r2, #21
 8003bcc:	4311      	orrs	r1, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bd2:	0852      	lsrs	r2, r2, #1
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0652      	lsls	r2, r2, #25
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bde:	06d2      	lsls	r2, r2, #27
 8003be0:	430a      	orrs	r2, r1
 8003be2:	4943      	ldr	r1, [pc, #268]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b41      	ldr	r3, [pc, #260]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a40      	ldr	r2, [pc, #256]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd ff4a 	bl	8001a98 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd ff46 	bl	8001a98 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e066      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	4b35      	ldr	r3, [pc, #212]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x530>
 8003c26:	e05e      	b.n	8003ce6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c28:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a30      	ldr	r2, [pc, #192]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd ff30 	bl	8001a98 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd ff2c 	bl	8001a98 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e04c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4e:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c5a:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	4924      	ldr	r1, [pc, #144]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c60:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <HAL_RCC_OscConfig+0x620>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	60cb      	str	r3, [r1, #12]
 8003c66:	e03e      	b.n	8003ce6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e039      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d12c      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	3b01      	subs	r3, #1
 8003c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d123      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d11b      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d113      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	019f800c 	.word	0x019f800c
 8003cf8:	feeefffc 	.word	0xfeeefffc

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e11e      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d14:	4b91      	ldr	r3, [pc, #580]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d910      	bls.n	8003d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b8e      	ldr	r3, [pc, #568]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 020f 	bic.w	r2, r3, #15
 8003d2a:	498c      	ldr	r1, [pc, #560]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b8a      	ldr	r3, [pc, #552]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e106      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d073      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d129      	bne.n	8003dac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d58:	4b81      	ldr	r3, [pc, #516]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0f4      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d68:	f000 f9d0 	bl	800410c <RCC_GetSysClockFreqFromPLLSource>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4a7c      	ldr	r2, [pc, #496]	@ (8003f64 <HAL_RCC_ClockConfig+0x268>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d93f      	bls.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d76:	4b7a      	ldr	r3, [pc, #488]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d033      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d12f      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d96:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d9e:	4a70      	ldr	r2, [pc, #448]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e024      	b.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0c6      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc4:	4b66      	ldr	r3, [pc, #408]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0be      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003dd4:	f000 f8ce 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4a61      	ldr	r2, [pc, #388]	@ (8003f64 <HAL_RCC_ClockConfig+0x268>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d909      	bls.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003de2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dea:	4a5d      	ldr	r2, [pc, #372]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b5a      	ldr	r3, [pc, #360]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4957      	ldr	r1, [pc, #348]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fd fe46 	bl	8001a98 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fd fe42 	bl	8001a98 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e095      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b4e      	ldr	r3, [pc, #312]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d023      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a42      	ldr	r2, [pc, #264]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e68:	4b3d      	ldr	r3, [pc, #244]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e70:	4a3b      	ldr	r2, [pc, #236]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4936      	ldr	r1, [pc, #216]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b80      	cmp	r3, #128	@ 0x80
 8003e90:	d105      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e92:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4a32      	ldr	r2, [pc, #200]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d21d      	bcs.n	8003ee8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eac:	4b2b      	ldr	r3, [pc, #172]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 020f 	bic.w	r2, r3, #15
 8003eb4:	4929      	ldr	r1, [pc, #164]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ebc:	f7fd fdec 	bl	8001a98 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fd fde8 	bl	8001a98 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e03b      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1ed      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4917      	ldr	r1, [pc, #92]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f12:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	490f      	ldr	r1, [pc, #60]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f26:	f000 f825 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	490c      	ldr	r1, [pc, #48]	@ (8003f68 <HAL_RCC_ClockConfig+0x26c>)
 8003f38:	5ccb      	ldrb	r3, [r1, r3]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a0a      	ldr	r2, [pc, #40]	@ (8003f6c <HAL_RCC_ClockConfig+0x270>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f46:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <HAL_RCC_ClockConfig+0x274>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd fade 	bl	800150c <HAL_InitTick>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40022000 	.word	0x40022000
 8003f60:	40021000 	.word	0x40021000
 8003f64:	04c4b400 	.word	0x04c4b400
 8003f68:	0800837c 	.word	0x0800837c
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	20000004 	.word	0x20000004

08003f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e047      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f8c:	4b27      	ldr	r3, [pc, #156]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d102      	bne.n	8003f9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f98:	4b26      	ldr	r3, [pc, #152]	@ (8004034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	e03e      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f9e:	4b23      	ldr	r3, [pc, #140]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d136      	bne.n	8004018 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003faa:	4b20      	ldr	r3, [pc, #128]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8004034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	4a16      	ldr	r2, [pc, #88]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd2:	68d2      	ldr	r2, [r2, #12]
 8003fd4:	0a12      	lsrs	r2, r2, #8
 8003fd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	617b      	str	r3, [r7, #20]
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fe2:	4a13      	ldr	r2, [pc, #76]	@ (8004030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	4a10      	ldr	r2, [pc, #64]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	0a12      	lsrs	r2, r2, #8
 8003ff0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
      break;
 8003ffa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	0e5b      	lsrs	r3, r3, #25
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	3301      	adds	r3, #1
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	e001      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800401c:	693b      	ldr	r3, [r7, #16]
}
 800401e:	4618      	mov	r0, r3
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	00f42400 	.word	0x00f42400
 8004034:	007a1200 	.word	0x007a1200

08004038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b03      	ldr	r3, [pc, #12]	@ (800404c <HAL_RCC_GetHCLKFreq+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000000 	.word	0x20000000

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004054:	f7ff fff0 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4904      	ldr	r1, [pc, #16]	@ (8004078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	0800838c 	.word	0x0800838c

0800407c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004080:	f7ff ffda 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0adb      	lsrs	r3, r3, #11
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4904      	ldr	r1, [pc, #16]	@ (80040a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800838c 	.word	0x0800838c

080040a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	220f      	movs	r2, #15
 80040b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <HAL_RCC_GetClockConfig+0x5c>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0203 	and.w	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80040c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <HAL_RCC_GetClockConfig+0x5c>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80040d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004104 <HAL_RCC_GetClockConfig+0x5c>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80040dc:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <HAL_RCC_GetClockConfig+0x5c>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	08db      	lsrs	r3, r3, #3
 80040e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040ea:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <HAL_RCC_GetClockConfig+0x60>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 020f 	and.w	r2, r3, #15
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	40022000 	.word	0x40022000

0800410c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800411c:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d10c      	bne.n	800414a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004130:	4a17      	ldr	r2, [pc, #92]	@ (8004190 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800413a:	68d2      	ldr	r2, [r2, #12]
 800413c:	0a12      	lsrs	r2, r2, #8
 800413e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	617b      	str	r3, [r7, #20]
    break;
 8004148:	e00c      	b.n	8004164 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800414a:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4a0e      	ldr	r2, [pc, #56]	@ (800418c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004154:	68d2      	ldr	r2, [r2, #12]
 8004156:	0a12      	lsrs	r2, r2, #8
 8004158:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
    break;
 8004162:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004164:	4b09      	ldr	r3, [pc, #36]	@ (800418c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	0e5b      	lsrs	r3, r3, #25
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	3301      	adds	r3, #1
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800417e:	687b      	ldr	r3, [r7, #4]
}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40021000 	.word	0x40021000
 8004190:	007a1200 	.word	0x007a1200
 8004194:	00f42400 	.word	0x00f42400

08004198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041a0:	2300      	movs	r3, #0
 80041a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a4:	2300      	movs	r3, #0
 80041a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8098 	beq.w	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ba:	4b43      	ldr	r3, [pc, #268]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	4b40      	ldr	r3, [pc, #256]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4a3f      	ldr	r2, [pc, #252]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d2:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e2:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a39      	ldr	r2, [pc, #228]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ee:	f7fd fc53 	bl	8001a98 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f4:	e009      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fd fc4f 	bl	8001a98 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d902      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	74fb      	strb	r3, [r7, #19]
        break;
 8004208:	e005      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800420a:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ef      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d159      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800421c:	4b2a      	ldr	r3, [pc, #168]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004226:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01e      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	429a      	cmp	r2, r3
 8004236:	d019      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004238:	4b23      	ldr	r3, [pc, #140]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004244:	4b20      	ldr	r3, [pc, #128]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	4a1f      	ldr	r2, [pc, #124]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004254:	4b1c      	ldr	r3, [pc, #112]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004264:	4a18      	ldr	r2, [pc, #96]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fd fc0f 	bl	8001a98 <HAL_GetTick>
 800427a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427c:	e00b      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427e:	f7fd fc0b 	bl	8001a98 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428c:	4293      	cmp	r3, r2
 800428e:	d902      	bls.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	74fb      	strb	r3, [r7, #19]
            break;
 8004294:	e006      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ec      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042aa:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	4903      	ldr	r1, [pc, #12]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042c0:	e008      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	74bb      	strb	r3, [r7, #18]
 80042c6:	e005      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d4:	7c7b      	ldrb	r3, [r7, #17]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4ba6      	ldr	r3, [pc, #664]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	4aa5      	ldr	r2, [pc, #660]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f2:	4ba0      	ldr	r3, [pc, #640]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f8:	f023 0203 	bic.w	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	499c      	ldr	r1, [pc, #624]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004314:	4b97      	ldr	r3, [pc, #604]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f023 020c 	bic.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4994      	ldr	r1, [pc, #592]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004336:	4b8f      	ldr	r3, [pc, #572]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	498b      	ldr	r1, [pc, #556]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004358:	4b86      	ldr	r3, [pc, #536]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	4983      	ldr	r1, [pc, #524]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800437a:	4b7e      	ldr	r3, [pc, #504]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004380:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	497a      	ldr	r1, [pc, #488]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439c:	4b75      	ldr	r3, [pc, #468]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	4972      	ldr	r1, [pc, #456]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043be:	4b6d      	ldr	r3, [pc, #436]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4969      	ldr	r1, [pc, #420]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043e0:	4b64      	ldr	r3, [pc, #400]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4961      	ldr	r1, [pc, #388]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004402:	4b5c      	ldr	r3, [pc, #368]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	4958      	ldr	r1, [pc, #352]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d015      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004424:	4b53      	ldr	r3, [pc, #332]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004432:	4950      	ldr	r1, [pc, #320]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004442:	d105      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004444:	4b4b      	ldr	r3, [pc, #300]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a4a      	ldr	r2, [pc, #296]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800444e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800445c:	4b45      	ldr	r3, [pc, #276]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	4942      	ldr	r1, [pc, #264]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	4b3d      	ldr	r3, [pc, #244]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a3c      	ldr	r2, [pc, #240]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004486:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004494:	4b37      	ldr	r3, [pc, #220]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	4934      	ldr	r1, [pc, #208]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044cc:	4b29      	ldr	r3, [pc, #164]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	4926      	ldr	r1, [pc, #152]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ea:	d105      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b21      	ldr	r3, [pc, #132]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004504:	4b1b      	ldr	r3, [pc, #108]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	4918      	ldr	r1, [pc, #96]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004522:	d105      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004524:	4b13      	ldr	r3, [pc, #76]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a12      	ldr	r2, [pc, #72]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800452e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800453c:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004542:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	490a      	ldr	r1, [pc, #40]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a04      	ldr	r2, [pc, #16]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004566:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004568:	7cbb      	ldrb	r3, [r7, #18]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000

08004578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e049      	b.n	800461e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f841 	bl	8004626 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f000 fa22 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d001      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e04a      	b.n	80046ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a21      	ldr	r2, [pc, #132]	@ (80046f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467e:	d013      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1d      	ldr	r2, [pc, #116]	@ (80046fc <HAL_TIM_Base_Start_IT+0xc0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x6c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <HAL_TIM_Base_Start_IT+0xc4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1a      	ldr	r2, [pc, #104]	@ (8004704 <HAL_TIM_Base_Start_IT+0xc8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a19      	ldr	r2, [pc, #100]	@ (8004708 <HAL_TIM_Base_Start_IT+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d115      	bne.n	80046d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	4b17      	ldr	r3, [pc, #92]	@ (800470c <HAL_TIM_Base_Start_IT+0xd0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d015      	beq.n	80046e6 <HAL_TIM_Base_Start_IT+0xaa>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d011      	beq.n	80046e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	e008      	b.n	80046e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e000      	b.n	80046e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40013400 	.word	0x40013400
 8004708:	40014000 	.word	0x40014000
 800470c:	00010007 	.word	0x00010007

08004710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01b      	beq.n	8004774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f931 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f923 	bl	80049ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f934 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d020      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01b      	beq.n	80047c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0204 	mvn.w	r2, #4
 8004790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f90b 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8fd 	bl	80049ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f90e 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0208 	mvn.w	r2, #8
 80047dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2204      	movs	r2, #4
 80047e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8e5 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8d7 	bl	80049ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8e8 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0210 	mvn.w	r2, #16
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2208      	movs	r2, #8
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8bf 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8b1 	bl	80049ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f8c2 	bl	80049d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fe0c 	bl	8001494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00c      	beq.n	80048aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f951 	bl	8004b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00c      	beq.n	80048ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f949 	bl	8004b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f87c 	bl	80049ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00c      	beq.n	8004916 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0220 	mvn.w	r2, #32
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f911 	bl	8004b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00c      	beq.n	800493a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f91d 	bl	8004b74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00c      	beq.n	800495e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f915 	bl	8004b88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00c      	beq.n	8004982 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800497a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f90d 	bl	8004b9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00c      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f905 	bl	8004bb0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a42      	ldr	r2, [pc, #264]	@ (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00f      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1e:	d00b      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3f      	ldr	r2, [pc, #252]	@ (8004b20 <TIM_Base_SetConfig+0x120>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b24 <TIM_Base_SetConfig+0x124>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3d      	ldr	r2, [pc, #244]	@ (8004b28 <TIM_Base_SetConfig+0x128>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d108      	bne.n	8004a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	@ (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01b      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a58:	d017      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <TIM_Base_SetConfig+0x120>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <TIM_Base_SetConfig+0x124>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b28 <TIM_Base_SetConfig+0x128>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2d      	ldr	r2, [pc, #180]	@ (8004b2c <TIM_Base_SetConfig+0x12c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b30 <TIM_Base_SetConfig+0x130>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2b      	ldr	r2, [pc, #172]	@ (8004b34 <TIM_Base_SetConfig+0x134>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <TIM_Base_SetConfig+0x11c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00f      	beq.n	8004ae8 <TIM_Base_SetConfig+0xe8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <TIM_Base_SetConfig+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <TIM_Base_SetConfig+0xe8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <TIM_Base_SetConfig+0x12c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_Base_SetConfig+0xe8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <TIM_Base_SetConfig+0x130>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_Base_SetConfig+0xe8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a14      	ldr	r2, [pc, #80]	@ (8004b34 <TIM_Base_SetConfig+0x134>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d103      	bne.n	8004af0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d105      	bne.n	8004b0e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f023 0201 	bic.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800

08004b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e042      	b.n	8004c5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc fe59 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2224      	movs	r2, #36	@ 0x24
 8004bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fb82 	bl	8005318 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f8b3 	bl	8004d80 <UART_SetConfig>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e01b      	b.n	8004c5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fc01 	bl	800545c <UART_CheckIdleState>
 8004c5a:	4603      	mov	r3, r0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	@ 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d17b      	bne.n	8004d76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Transmit+0x26>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e074      	b.n	8004d78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	@ 0x21
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fefb 	bl	8001a98 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbc:	d108      	bne.n	8004cd0 <HAL_UART_Transmit+0x6c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e003      	b.n	8004cd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd8:	e030      	b.n	8004d3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fc63 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e03d      	b.n	8004d78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3302      	adds	r3, #2
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e007      	b.n	8004d2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1c8      	bne.n	8004cda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2140      	movs	r1, #64	@ 0x40
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fc2c 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e006      	b.n	8004d78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d84:	b08c      	sub	sp, #48	@ 0x30
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4bab      	ldr	r3, [pc, #684]	@ (800505c <UART_SetConfig+0x2dc>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4aa0      	ldr	r2, [pc, #640]	@ (8005060 <UART_SetConfig+0x2e0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de8:	4313      	orrs	r3, r2
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004df6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	f023 010f 	bic.w	r1, r3, #15
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a91      	ldr	r2, [pc, #580]	@ (8005064 <UART_SetConfig+0x2e4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <UART_SetConfig+0xf0>
 8004e24:	4b90      	ldr	r3, [pc, #576]	@ (8005068 <UART_SetConfig+0x2e8>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d81a      	bhi.n	8004e68 <UART_SetConfig+0xe8>
 8004e32:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <UART_SetConfig+0xb8>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e59 	.word	0x08004e59
 8004e40:	08004e51 	.word	0x08004e51
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4e:	e0d6      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004e50:	2302      	movs	r3, #2
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e56:	e0d2      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5e:	e0ce      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004e60:	2308      	movs	r3, #8
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e66:	e0ca      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6e:	e0c6      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a7d      	ldr	r2, [pc, #500]	@ (800506c <UART_SetConfig+0x2ec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d138      	bne.n	8004eec <UART_SetConfig+0x16c>
 8004e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005068 <UART_SetConfig+0x2e8>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d82d      	bhi.n	8004ee4 <UART_SetConfig+0x164>
 8004e88:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <UART_SetConfig+0x110>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ec5 	.word	0x08004ec5
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004ecd 	.word	0x08004ecd
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004edd 	.word	0x08004edd
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eca:	e098      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	e094      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eda:	e090      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee2:	e08c      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eea:	e088      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5f      	ldr	r2, [pc, #380]	@ (8005070 <UART_SetConfig+0x2f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d125      	bne.n	8004f42 <UART_SetConfig+0x1c2>
 8004ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8005068 <UART_SetConfig+0x2e8>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d016      	beq.n	8004f32 <UART_SetConfig+0x1b2>
 8004f04:	2b30      	cmp	r3, #48	@ 0x30
 8004f06:	d818      	bhi.n	8004f3a <UART_SetConfig+0x1ba>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d00a      	beq.n	8004f22 <UART_SetConfig+0x1a2>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d814      	bhi.n	8004f3a <UART_SetConfig+0x1ba>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <UART_SetConfig+0x19a>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d008      	beq.n	8004f2a <UART_SetConfig+0x1aa>
 8004f18:	e00f      	b.n	8004f3a <UART_SetConfig+0x1ba>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f20:	e06d      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f22:	2302      	movs	r3, #2
 8004f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f28:	e069      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f30:	e065      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f32:	2308      	movs	r3, #8
 8004f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f38:	e061      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f40:	e05d      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a4b      	ldr	r2, [pc, #300]	@ (8005074 <UART_SetConfig+0x2f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d125      	bne.n	8004f98 <UART_SetConfig+0x218>
 8004f4c:	4b46      	ldr	r3, [pc, #280]	@ (8005068 <UART_SetConfig+0x2e8>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f58:	d016      	beq.n	8004f88 <UART_SetConfig+0x208>
 8004f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f5c:	d818      	bhi.n	8004f90 <UART_SetConfig+0x210>
 8004f5e:	2b80      	cmp	r3, #128	@ 0x80
 8004f60:	d00a      	beq.n	8004f78 <UART_SetConfig+0x1f8>
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	d814      	bhi.n	8004f90 <UART_SetConfig+0x210>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <UART_SetConfig+0x1f0>
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d008      	beq.n	8004f80 <UART_SetConfig+0x200>
 8004f6e:	e00f      	b.n	8004f90 <UART_SetConfig+0x210>
 8004f70:	2300      	movs	r3, #0
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f76:	e042      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7e:	e03e      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f80:	2304      	movs	r3, #4
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f86:	e03a      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8e:	e036      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f90:	2310      	movs	r3, #16
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f96:	e032      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a30      	ldr	r2, [pc, #192]	@ (8005060 <UART_SetConfig+0x2e0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d12a      	bne.n	8004ff8 <UART_SetConfig+0x278>
 8004fa2:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <UART_SetConfig+0x2e8>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fb0:	d01a      	beq.n	8004fe8 <UART_SetConfig+0x268>
 8004fb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fb6:	d81b      	bhi.n	8004ff0 <UART_SetConfig+0x270>
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fbc:	d00c      	beq.n	8004fd8 <UART_SetConfig+0x258>
 8004fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc2:	d815      	bhi.n	8004ff0 <UART_SetConfig+0x270>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <UART_SetConfig+0x250>
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fcc:	d008      	beq.n	8004fe0 <UART_SetConfig+0x260>
 8004fce:	e00f      	b.n	8004ff0 <UART_SetConfig+0x270>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e012      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e00e      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e00a      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e006      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff6:	e002      	b.n	8004ffe <UART_SetConfig+0x27e>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <UART_SetConfig+0x2e0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	f040 80a8 	bne.w	800515a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800500a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800500e:	2b08      	cmp	r3, #8
 8005010:	d834      	bhi.n	800507c <UART_SetConfig+0x2fc>
 8005012:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <UART_SetConfig+0x298>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	0800503d 	.word	0x0800503d
 800501c:	0800507d 	.word	0x0800507d
 8005020:	08005045 	.word	0x08005045
 8005024:	0800507d 	.word	0x0800507d
 8005028:	0800504b 	.word	0x0800504b
 800502c:	0800507d 	.word	0x0800507d
 8005030:	0800507d 	.word	0x0800507d
 8005034:	0800507d 	.word	0x0800507d
 8005038:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7ff f808 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005042:	e021      	b.n	8005088 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <UART_SetConfig+0x2f8>)
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005048:	e01e      	b.n	8005088 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fe ff93 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 800504e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005050:	e01a      	b.n	8005088 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005058:	e016      	b.n	8005088 <UART_SetConfig+0x308>
 800505a:	bf00      	nop
 800505c:	cfff69f3 	.word	0xcfff69f3
 8005060:	40008000 	.word	0x40008000
 8005064:	40013800 	.word	0x40013800
 8005068:	40021000 	.word	0x40021000
 800506c:	40004400 	.word	0x40004400
 8005070:	40004800 	.word	0x40004800
 8005074:	40004c00 	.word	0x40004c00
 8005078:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 812a 	beq.w	80052e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	4a9e      	ldr	r2, [pc, #632]	@ (8005310 <UART_SetConfig+0x590>)
 8005096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509a:	461a      	mov	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d305      	bcc.n	80050c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050c6:	e10d      	b.n	80052e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	2200      	movs	r2, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005310 <UART_SetConfig+0x590>)
 80050d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2200      	movs	r2, #0
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ea:	f7fb fdd5 	bl	8000c98 <__aeabi_uldivmod>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	020b      	lsls	r3, r1, #8
 8005100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005104:	0202      	lsls	r2, r0, #8
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	6849      	ldr	r1, [r1, #4]
 800510a:	0849      	lsrs	r1, r1, #1
 800510c:	2000      	movs	r0, #0
 800510e:	460c      	mov	r4, r1
 8005110:	4605      	mov	r5, r0
 8005112:	eb12 0804 	adds.w	r8, r2, r4
 8005116:	eb43 0905 	adc.w	r9, r3, r5
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	469a      	mov	sl, r3
 8005122:	4693      	mov	fp, r2
 8005124:	4652      	mov	r2, sl
 8005126:	465b      	mov	r3, fp
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fdb4 	bl	8000c98 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4613      	mov	r3, r2
 8005136:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800513e:	d308      	bcc.n	8005152 <UART_SetConfig+0x3d2>
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005146:	d204      	bcs.n	8005152 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	60da      	str	r2, [r3, #12]
 8005150:	e0c8      	b.n	80052e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005158:	e0c4      	b.n	80052e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005162:	d167      	bne.n	8005234 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005164:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005168:	2b08      	cmp	r3, #8
 800516a:	d828      	bhi.n	80051be <UART_SetConfig+0x43e>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <UART_SetConfig+0x3f4>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	08005199 	.word	0x08005199
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	080051bf 	.word	0x080051bf
 8005184:	080051af 	.word	0x080051af
 8005188:	080051bf 	.word	0x080051bf
 800518c:	080051bf 	.word	0x080051bf
 8005190:	080051bf 	.word	0x080051bf
 8005194:	080051b7 	.word	0x080051b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005198:	f7fe ff5a 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 800519c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800519e:	e014      	b.n	80051ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a0:	f7fe ff6c 	bl	800407c <HAL_RCC_GetPCLK2Freq>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051a6:	e010      	b.n	80051ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005314 <UART_SetConfig+0x594>)
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051ac:	e00d      	b.n	80051ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ae:	f7fe fee1 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 80051b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051b4:	e009      	b.n	80051ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051bc:	e005      	b.n	80051ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8089 	beq.w	80052e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005310 <UART_SetConfig+0x590>)
 80051d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051dc:	461a      	mov	r2, r3
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e4:	005a      	lsls	r2, r3, #1
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	441a      	add	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	d916      	bls.n	800522c <UART_SetConfig+0x4ac>
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005204:	d212      	bcs.n	800522c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f023 030f 	bic.w	r3, r3, #15
 800520e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	b29b      	uxth	r3, r3
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	b29a      	uxth	r2, r3
 800521c:	8bfb      	ldrh	r3, [r7, #30]
 800521e:	4313      	orrs	r3, r2
 8005220:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	8bfa      	ldrh	r2, [r7, #30]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	e05b      	b.n	80052e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005232:	e057      	b.n	80052e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005234:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005238:	2b08      	cmp	r3, #8
 800523a:	d828      	bhi.n	800528e <UART_SetConfig+0x50e>
 800523c:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <UART_SetConfig+0x4c4>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005269 	.word	0x08005269
 8005248:	08005271 	.word	0x08005271
 800524c:	08005279 	.word	0x08005279
 8005250:	0800528f 	.word	0x0800528f
 8005254:	0800527f 	.word	0x0800527f
 8005258:	0800528f 	.word	0x0800528f
 800525c:	0800528f 	.word	0x0800528f
 8005260:	0800528f 	.word	0x0800528f
 8005264:	08005287 	.word	0x08005287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005268:	f7fe fef2 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 800526c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800526e:	e014      	b.n	800529a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005270:	f7fe ff04 	bl	800407c <HAL_RCC_GetPCLK2Freq>
 8005274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005276:	e010      	b.n	800529a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005278:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <UART_SetConfig+0x594>)
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800527c:	e00d      	b.n	800529a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800527e:	f7fe fe79 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8005282:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005284:	e009      	b.n	800529a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800528c:	e005      	b.n	800529a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005298:	bf00      	nop
    }

    if (pclk != 0U)
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d021      	beq.n	80052e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005310 <UART_SetConfig+0x590>)
 80052a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	441a      	add	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	d909      	bls.n	80052de <UART_SetConfig+0x55e>
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d0:	d205      	bcs.n	80052de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	e002      	b.n	80052e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005300:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005304:	4618      	mov	r0, r3
 8005306:	3730      	adds	r7, #48	@ 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530e:	bf00      	nop
 8005310:	08008394 	.word	0x08008394
 8005314:	00f42400 	.word	0x00f42400

08005318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01a      	beq.n	800542e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005416:	d10a      	bne.n	800542e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b098      	sub	sp, #96	@ 0x60
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800546c:	f7fc fb14 	bl	8001a98 <HAL_GetTick>
 8005470:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d12f      	bne.n	80054e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f88e 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d022      	beq.n	80054e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e063      	b.n	80055a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d149      	bne.n	8005582 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f6:	2200      	movs	r2, #0
 80054f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f857 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03c      	beq.n	8005582 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	623b      	str	r3, [r7, #32]
   return(result);
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800551c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005526:	633b      	str	r3, [r7, #48]	@ 0x30
 8005528:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800552c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e6      	bne.n	8005508 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	60fb      	str	r3, [r7, #12]
   return(result);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800555a:	61fa      	str	r2, [r7, #28]
 800555c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	69b9      	ldr	r1, [r7, #24]
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	617b      	str	r3, [r7, #20]
   return(result);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e012      	b.n	80055a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3758      	adds	r7, #88	@ 0x58
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c0:	e04f      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d04b      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fc fa65 	bl	8001a98 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e04e      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d037      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b80      	cmp	r3, #128	@ 0x80
 80055f6:	d034      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b40      	cmp	r3, #64	@ 0x40
 80055fc:	d031      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b08      	cmp	r3, #8
 800560a:	d110      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2208      	movs	r2, #8
 8005612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f838 	bl	800568a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2208      	movs	r2, #8
 800561e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e029      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800563c:	d111      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f81e 	bl	800568a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e00f      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4013      	ands	r3, r2
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	bf0c      	ite	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	2300      	movne	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	429a      	cmp	r2, r3
 800567e:	d0a0      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800568a:	b480      	push	{r7}
 800568c:	b095      	sub	sp, #84	@ 0x54
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e3      	bne.n	80056c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d118      	bne.n	8005736 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	60bb      	str	r3, [r7, #8]
   return(result);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f023 0310 	bic.w	r3, r3, #16
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6979      	ldr	r1, [r7, #20]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	613b      	str	r3, [r7, #16]
   return(result);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e6      	bne.n	8005704 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800574a:	bf00      	nop
 800574c:	3754      	adds	r7, #84	@ 0x54
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_UARTEx_DisableFifoMode+0x16>
 8005768:	2302      	movs	r3, #2
 800576a:	e027      	b.n	80057bc <HAL_UARTEx_DisableFifoMode+0x66>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2224      	movs	r2, #36	@ 0x24
 8005778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800579a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057dc:	2302      	movs	r3, #2
 80057de:	e02d      	b.n	800583c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	@ 0x24
 80057ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f84f 	bl	80058c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e02d      	b.n	80058b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2224      	movs	r2, #36	@ 0x24
 8005868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f811 	bl	80058c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058e0:	e031      	b.n	8005946 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058e2:	2308      	movs	r3, #8
 80058e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058e6:	2308      	movs	r3, #8
 80058e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	0e5b      	lsrs	r3, r3, #25
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	0f5b      	lsrs	r3, r3, #29
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800590a:	7bbb      	ldrb	r3, [r7, #14]
 800590c:	7b3a      	ldrb	r2, [r7, #12]
 800590e:	4911      	ldr	r1, [pc, #68]	@ (8005954 <UARTEx_SetNbDataToProcess+0x94>)
 8005910:	5c8a      	ldrb	r2, [r1, r2]
 8005912:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005916:	7b3a      	ldrb	r2, [r7, #12]
 8005918:	490f      	ldr	r1, [pc, #60]	@ (8005958 <UARTEx_SetNbDataToProcess+0x98>)
 800591a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800591c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	7b7a      	ldrb	r2, [r7, #13]
 800592c:	4909      	ldr	r1, [pc, #36]	@ (8005954 <UARTEx_SetNbDataToProcess+0x94>)
 800592e:	5c8a      	ldrb	r2, [r1, r2]
 8005930:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005934:	7b7a      	ldrb	r2, [r7, #13]
 8005936:	4908      	ldr	r1, [pc, #32]	@ (8005958 <UARTEx_SetNbDataToProcess+0x98>)
 8005938:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800593a:	fb93 f3f2 	sdiv	r3, r3, r2
 800593e:	b29a      	uxth	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	080083ac 	.word	0x080083ac
 8005958:	080083b4 	.word	0x080083b4

0800595c <__cvt>:
 800595c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	ec57 6b10 	vmov	r6, r7, d0
 8005964:	2f00      	cmp	r7, #0
 8005966:	460c      	mov	r4, r1
 8005968:	4619      	mov	r1, r3
 800596a:	463b      	mov	r3, r7
 800596c:	bfbb      	ittet	lt
 800596e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005972:	461f      	movlt	r7, r3
 8005974:	2300      	movge	r3, #0
 8005976:	232d      	movlt	r3, #45	@ 0x2d
 8005978:	700b      	strb	r3, [r1, #0]
 800597a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800597c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005980:	4691      	mov	r9, r2
 8005982:	f023 0820 	bic.w	r8, r3, #32
 8005986:	bfbc      	itt	lt
 8005988:	4632      	movlt	r2, r6
 800598a:	4616      	movlt	r6, r2
 800598c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005990:	d005      	beq.n	800599e <__cvt+0x42>
 8005992:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005996:	d100      	bne.n	800599a <__cvt+0x3e>
 8005998:	3401      	adds	r4, #1
 800599a:	2102      	movs	r1, #2
 800599c:	e000      	b.n	80059a0 <__cvt+0x44>
 800599e:	2103      	movs	r1, #3
 80059a0:	ab03      	add	r3, sp, #12
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	ab02      	add	r3, sp, #8
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	ec47 6b10 	vmov	d0, r6, r7
 80059ac:	4653      	mov	r3, sl
 80059ae:	4622      	mov	r2, r4
 80059b0:	f000 ff3e 	bl	8006830 <_dtoa_r>
 80059b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059b8:	4605      	mov	r5, r0
 80059ba:	d119      	bne.n	80059f0 <__cvt+0x94>
 80059bc:	f019 0f01 	tst.w	r9, #1
 80059c0:	d00e      	beq.n	80059e0 <__cvt+0x84>
 80059c2:	eb00 0904 	add.w	r9, r0, r4
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	4630      	mov	r0, r6
 80059cc:	4639      	mov	r1, r7
 80059ce:	f7fb f8a3 	bl	8000b18 <__aeabi_dcmpeq>
 80059d2:	b108      	cbz	r0, 80059d8 <__cvt+0x7c>
 80059d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059d8:	2230      	movs	r2, #48	@ 0x30
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	454b      	cmp	r3, r9
 80059de:	d31e      	bcc.n	8005a1e <__cvt+0xc2>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059e4:	1b5b      	subs	r3, r3, r5
 80059e6:	4628      	mov	r0, r5
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	b004      	add	sp, #16
 80059ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059f4:	eb00 0904 	add.w	r9, r0, r4
 80059f8:	d1e5      	bne.n	80059c6 <__cvt+0x6a>
 80059fa:	7803      	ldrb	r3, [r0, #0]
 80059fc:	2b30      	cmp	r3, #48	@ 0x30
 80059fe:	d10a      	bne.n	8005a16 <__cvt+0xba>
 8005a00:	2200      	movs	r2, #0
 8005a02:	2300      	movs	r3, #0
 8005a04:	4630      	mov	r0, r6
 8005a06:	4639      	mov	r1, r7
 8005a08:	f7fb f886 	bl	8000b18 <__aeabi_dcmpeq>
 8005a0c:	b918      	cbnz	r0, 8005a16 <__cvt+0xba>
 8005a0e:	f1c4 0401 	rsb	r4, r4, #1
 8005a12:	f8ca 4000 	str.w	r4, [sl]
 8005a16:	f8da 3000 	ldr.w	r3, [sl]
 8005a1a:	4499      	add	r9, r3
 8005a1c:	e7d3      	b.n	80059c6 <__cvt+0x6a>
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	9103      	str	r1, [sp, #12]
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e7d9      	b.n	80059da <__cvt+0x7e>

08005a26 <__exponent>:
 8005a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	bfba      	itte	lt
 8005a2c:	4249      	neglt	r1, r1
 8005a2e:	232d      	movlt	r3, #45	@ 0x2d
 8005a30:	232b      	movge	r3, #43	@ 0x2b
 8005a32:	2909      	cmp	r1, #9
 8005a34:	7002      	strb	r2, [r0, #0]
 8005a36:	7043      	strb	r3, [r0, #1]
 8005a38:	dd29      	ble.n	8005a8e <__exponent+0x68>
 8005a3a:	f10d 0307 	add.w	r3, sp, #7
 8005a3e:	461d      	mov	r5, r3
 8005a40:	270a      	movs	r7, #10
 8005a42:	461a      	mov	r2, r3
 8005a44:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a48:	fb07 1416 	mls	r4, r7, r6, r1
 8005a4c:	3430      	adds	r4, #48	@ 0x30
 8005a4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a52:	460c      	mov	r4, r1
 8005a54:	2c63      	cmp	r4, #99	@ 0x63
 8005a56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	dcf1      	bgt.n	8005a42 <__exponent+0x1c>
 8005a5e:	3130      	adds	r1, #48	@ 0x30
 8005a60:	1e94      	subs	r4, r2, #2
 8005a62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a66:	1c41      	adds	r1, r0, #1
 8005a68:	4623      	mov	r3, r4
 8005a6a:	42ab      	cmp	r3, r5
 8005a6c:	d30a      	bcc.n	8005a84 <__exponent+0x5e>
 8005a6e:	f10d 0309 	add.w	r3, sp, #9
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	42ac      	cmp	r4, r5
 8005a76:	bf88      	it	hi
 8005a78:	2300      	movhi	r3, #0
 8005a7a:	3302      	adds	r3, #2
 8005a7c:	4403      	add	r3, r0
 8005a7e:	1a18      	subs	r0, r3, r0
 8005a80:	b003      	add	sp, #12
 8005a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a8c:	e7ed      	b.n	8005a6a <__exponent+0x44>
 8005a8e:	2330      	movs	r3, #48	@ 0x30
 8005a90:	3130      	adds	r1, #48	@ 0x30
 8005a92:	7083      	strb	r3, [r0, #2]
 8005a94:	70c1      	strb	r1, [r0, #3]
 8005a96:	1d03      	adds	r3, r0, #4
 8005a98:	e7f1      	b.n	8005a7e <__exponent+0x58>
	...

08005a9c <_printf_float>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	b08d      	sub	sp, #52	@ 0x34
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	461f      	mov	r7, r3
 8005aac:	4605      	mov	r5, r0
 8005aae:	f000 fdbf 	bl	8006630 <_localeconv_r>
 8005ab2:	6803      	ldr	r3, [r0, #0]
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fa fc02 	bl	80002c0 <strlen>
 8005abc:	2300      	movs	r3, #0
 8005abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac4:	9005      	str	r0, [sp, #20]
 8005ac6:	3307      	adds	r3, #7
 8005ac8:	f023 0307 	bic.w	r3, r3, #7
 8005acc:	f103 0208 	add.w	r2, r3, #8
 8005ad0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ad4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ad8:	f8c8 2000 	str.w	r2, [r8]
 8005adc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ae0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ae4:	9307      	str	r3, [sp, #28]
 8005ae6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005aea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d64 <_printf_float+0x2c8>)
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	f7fb f840 	bl	8000b7c <__aeabi_dcmpun>
 8005afc:	bb70      	cbnz	r0, 8005b5c <_printf_float+0xc0>
 8005afe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b02:	4b98      	ldr	r3, [pc, #608]	@ (8005d64 <_printf_float+0x2c8>)
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295
 8005b08:	f7fb f81a 	bl	8000b40 <__aeabi_dcmple>
 8005b0c:	bb30      	cbnz	r0, 8005b5c <_printf_float+0xc0>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2300      	movs	r3, #0
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fb f809 	bl	8000b2c <__aeabi_dcmplt>
 8005b1a:	b110      	cbz	r0, 8005b22 <_printf_float+0x86>
 8005b1c:	232d      	movs	r3, #45	@ 0x2d
 8005b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b22:	4a91      	ldr	r2, [pc, #580]	@ (8005d68 <_printf_float+0x2cc>)
 8005b24:	4b91      	ldr	r3, [pc, #580]	@ (8005d6c <_printf_float+0x2d0>)
 8005b26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b2a:	bf94      	ite	ls
 8005b2c:	4690      	movls	r8, r2
 8005b2e:	4698      	movhi	r8, r3
 8005b30:	2303      	movs	r3, #3
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	f02b 0304 	bic.w	r3, fp, #4
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	9700      	str	r7, [sp, #0]
 8005b40:	4633      	mov	r3, r6
 8005b42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f9d2 	bl	8005ef0 <_printf_common>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f040 808d 	bne.w	8005c6c <_printf_float+0x1d0>
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295
 8005b56:	b00d      	add	sp, #52	@ 0x34
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fb f80a 	bl	8000b7c <__aeabi_dcmpun>
 8005b68:	b140      	cbz	r0, 8005b7c <_printf_float+0xe0>
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfbc      	itt	lt
 8005b70:	232d      	movlt	r3, #45	@ 0x2d
 8005b72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b76:	4a7e      	ldr	r2, [pc, #504]	@ (8005d70 <_printf_float+0x2d4>)
 8005b78:	4b7e      	ldr	r3, [pc, #504]	@ (8005d74 <_printf_float+0x2d8>)
 8005b7a:	e7d4      	b.n	8005b26 <_printf_float+0x8a>
 8005b7c:	6863      	ldr	r3, [r4, #4]
 8005b7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b82:	9206      	str	r2, [sp, #24]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	d13b      	bne.n	8005c00 <_printf_float+0x164>
 8005b88:	2306      	movs	r3, #6
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b90:	2300      	movs	r3, #0
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	9303      	str	r3, [sp, #12]
 8005b96:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b9c:	ab09      	add	r3, sp, #36	@ 0x24
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	6861      	ldr	r1, [r4, #4]
 8005ba2:	ec49 8b10 	vmov	d0, r8, r9
 8005ba6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff fed6 	bl	800595c <__cvt>
 8005bb0:	9b06      	ldr	r3, [sp, #24]
 8005bb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bb4:	2b47      	cmp	r3, #71	@ 0x47
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	d129      	bne.n	8005c0e <_printf_float+0x172>
 8005bba:	1cc8      	adds	r0, r1, #3
 8005bbc:	db02      	blt.n	8005bc4 <_printf_float+0x128>
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	dd41      	ble.n	8005c48 <_printf_float+0x1ac>
 8005bc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bc8:	fa5f fa8a 	uxtb.w	sl, sl
 8005bcc:	3901      	subs	r1, #1
 8005bce:	4652      	mov	r2, sl
 8005bd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bd6:	f7ff ff26 	bl	8005a26 <__exponent>
 8005bda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bdc:	1813      	adds	r3, r2, r0
 8005bde:	2a01      	cmp	r2, #1
 8005be0:	4681      	mov	r9, r0
 8005be2:	6123      	str	r3, [r4, #16]
 8005be4:	dc02      	bgt.n	8005bec <_printf_float+0x150>
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	07d2      	lsls	r2, r2, #31
 8005bea:	d501      	bpl.n	8005bf0 <_printf_float+0x154>
 8005bec:	3301      	adds	r3, #1
 8005bee:	6123      	str	r3, [r4, #16]
 8005bf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0a2      	beq.n	8005b3e <_printf_float+0xa2>
 8005bf8:	232d      	movs	r3, #45	@ 0x2d
 8005bfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfe:	e79e      	b.n	8005b3e <_printf_float+0xa2>
 8005c00:	9a06      	ldr	r2, [sp, #24]
 8005c02:	2a47      	cmp	r2, #71	@ 0x47
 8005c04:	d1c2      	bne.n	8005b8c <_printf_float+0xf0>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1c0      	bne.n	8005b8c <_printf_float+0xf0>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e7bd      	b.n	8005b8a <_printf_float+0xee>
 8005c0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c12:	d9db      	bls.n	8005bcc <_printf_float+0x130>
 8005c14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c18:	d118      	bne.n	8005c4c <_printf_float+0x1b0>
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	dd0b      	ble.n	8005c38 <_printf_float+0x19c>
 8005c20:	6121      	str	r1, [r4, #16]
 8005c22:	b913      	cbnz	r3, 8005c2a <_printf_float+0x18e>
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	07d0      	lsls	r0, r2, #31
 8005c28:	d502      	bpl.n	8005c30 <_printf_float+0x194>
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	440b      	add	r3, r1
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	e7db      	b.n	8005bf0 <_printf_float+0x154>
 8005c38:	b913      	cbnz	r3, 8005c40 <_printf_float+0x1a4>
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	07d2      	lsls	r2, r2, #31
 8005c3e:	d501      	bpl.n	8005c44 <_printf_float+0x1a8>
 8005c40:	3302      	adds	r3, #2
 8005c42:	e7f4      	b.n	8005c2e <_printf_float+0x192>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e7f2      	b.n	8005c2e <_printf_float+0x192>
 8005c48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	db05      	blt.n	8005c5e <_printf_float+0x1c2>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	6121      	str	r1, [r4, #16]
 8005c56:	07d8      	lsls	r0, r3, #31
 8005c58:	d5ea      	bpl.n	8005c30 <_printf_float+0x194>
 8005c5a:	1c4b      	adds	r3, r1, #1
 8005c5c:	e7e7      	b.n	8005c2e <_printf_float+0x192>
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	bfd4      	ite	le
 8005c62:	f1c1 0202 	rsble	r2, r1, #2
 8005c66:	2201      	movgt	r2, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	e7e0      	b.n	8005c2e <_printf_float+0x192>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	055a      	lsls	r2, r3, #21
 8005c70:	d407      	bmi.n	8005c82 <_printf_float+0x1e6>
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	4642      	mov	r2, r8
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d12b      	bne.n	8005cd8 <_printf_float+0x23c>
 8005c80:	e767      	b.n	8005b52 <_printf_float+0xb6>
 8005c82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c86:	f240 80dd 	bls.w	8005e44 <_printf_float+0x3a8>
 8005c8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	f7fa ff41 	bl	8000b18 <__aeabi_dcmpeq>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d033      	beq.n	8005d02 <_printf_float+0x266>
 8005c9a:	4a37      	ldr	r2, [pc, #220]	@ (8005d78 <_printf_float+0x2dc>)
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	f43f af54 	beq.w	8005b52 <_printf_float+0xb6>
 8005caa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005cae:	4543      	cmp	r3, r8
 8005cb0:	db02      	blt.n	8005cb8 <_printf_float+0x21c>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	07d8      	lsls	r0, r3, #31
 8005cb6:	d50f      	bpl.n	8005cd8 <_printf_float+0x23c>
 8005cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f af45 	beq.w	8005b52 <_printf_float+0xb6>
 8005cc8:	f04f 0900 	mov.w	r9, #0
 8005ccc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cd0:	f104 0a1a 	add.w	sl, r4, #26
 8005cd4:	45c8      	cmp	r8, r9
 8005cd6:	dc09      	bgt.n	8005cec <_printf_float+0x250>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	079b      	lsls	r3, r3, #30
 8005cdc:	f100 8103 	bmi.w	8005ee6 <_printf_float+0x44a>
 8005ce0:	68e0      	ldr	r0, [r4, #12]
 8005ce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce4:	4298      	cmp	r0, r3
 8005ce6:	bfb8      	it	lt
 8005ce8:	4618      	movlt	r0, r3
 8005cea:	e734      	b.n	8005b56 <_printf_float+0xba>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f af2b 	beq.w	8005b52 <_printf_float+0xb6>
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	e7e8      	b.n	8005cd4 <_printf_float+0x238>
 8005d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	dc39      	bgt.n	8005d7c <_printf_float+0x2e0>
 8005d08:	4a1b      	ldr	r2, [pc, #108]	@ (8005d78 <_printf_float+0x2dc>)
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f af1d 	beq.w	8005b52 <_printf_float+0xb6>
 8005d18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005d1c:	ea59 0303 	orrs.w	r3, r9, r3
 8005d20:	d102      	bne.n	8005d28 <_printf_float+0x28c>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	07d9      	lsls	r1, r3, #31
 8005d26:	d5d7      	bpl.n	8005cd8 <_printf_float+0x23c>
 8005d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	f43f af0d 	beq.w	8005b52 <_printf_float+0xb6>
 8005d38:	f04f 0a00 	mov.w	sl, #0
 8005d3c:	f104 0b1a 	add.w	fp, r4, #26
 8005d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d42:	425b      	negs	r3, r3
 8005d44:	4553      	cmp	r3, sl
 8005d46:	dc01      	bgt.n	8005d4c <_printf_float+0x2b0>
 8005d48:	464b      	mov	r3, r9
 8005d4a:	e793      	b.n	8005c74 <_printf_float+0x1d8>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	465a      	mov	r2, fp
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	f43f aefb 	beq.w	8005b52 <_printf_float+0xb6>
 8005d5c:	f10a 0a01 	add.w	sl, sl, #1
 8005d60:	e7ee      	b.n	8005d40 <_printf_float+0x2a4>
 8005d62:	bf00      	nop
 8005d64:	7fefffff 	.word	0x7fefffff
 8005d68:	080083bc 	.word	0x080083bc
 8005d6c:	080083c0 	.word	0x080083c0
 8005d70:	080083c4 	.word	0x080083c4
 8005d74:	080083c8 	.word	0x080083c8
 8005d78:	080083cc 	.word	0x080083cc
 8005d7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d82:	4553      	cmp	r3, sl
 8005d84:	bfa8      	it	ge
 8005d86:	4653      	movge	r3, sl
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	dc36      	bgt.n	8005dfc <_printf_float+0x360>
 8005d8e:	f04f 0b00 	mov.w	fp, #0
 8005d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d96:	f104 021a 	add.w	r2, r4, #26
 8005d9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d9c:	9306      	str	r3, [sp, #24]
 8005d9e:	eba3 0309 	sub.w	r3, r3, r9
 8005da2:	455b      	cmp	r3, fp
 8005da4:	dc31      	bgt.n	8005e0a <_printf_float+0x36e>
 8005da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da8:	459a      	cmp	sl, r3
 8005daa:	dc3a      	bgt.n	8005e22 <_printf_float+0x386>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	07da      	lsls	r2, r3, #31
 8005db0:	d437      	bmi.n	8005e22 <_printf_float+0x386>
 8005db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db4:	ebaa 0903 	sub.w	r9, sl, r3
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	ebaa 0303 	sub.w	r3, sl, r3
 8005dbe:	4599      	cmp	r9, r3
 8005dc0:	bfa8      	it	ge
 8005dc2:	4699      	movge	r9, r3
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	dc33      	bgt.n	8005e32 <_printf_float+0x396>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dd2:	f104 0b1a 	add.w	fp, r4, #26
 8005dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd8:	ebaa 0303 	sub.w	r3, sl, r3
 8005ddc:	eba3 0309 	sub.w	r3, r3, r9
 8005de0:	4543      	cmp	r3, r8
 8005de2:	f77f af79 	ble.w	8005cd8 <_printf_float+0x23c>
 8005de6:	2301      	movs	r3, #1
 8005de8:	465a      	mov	r2, fp
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f aeae 	beq.w	8005b52 <_printf_float+0xb6>
 8005df6:	f108 0801 	add.w	r8, r8, #1
 8005dfa:	e7ec      	b.n	8005dd6 <_printf_float+0x33a>
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	d1c2      	bne.n	8005d8e <_printf_float+0x2f2>
 8005e08:	e6a3      	b.n	8005b52 <_printf_float+0xb6>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	9206      	str	r2, [sp, #24]
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f ae9c 	beq.w	8005b52 <_printf_float+0xb6>
 8005e1a:	9a06      	ldr	r2, [sp, #24]
 8005e1c:	f10b 0b01 	add.w	fp, fp, #1
 8005e20:	e7bb      	b.n	8005d9a <_printf_float+0x2fe>
 8005e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1c0      	bne.n	8005db2 <_printf_float+0x316>
 8005e30:	e68f      	b.n	8005b52 <_printf_float+0xb6>
 8005e32:	9a06      	ldr	r2, [sp, #24]
 8005e34:	464b      	mov	r3, r9
 8005e36:	4442      	add	r2, r8
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	47b8      	blx	r7
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d1c3      	bne.n	8005dca <_printf_float+0x32e>
 8005e42:	e686      	b.n	8005b52 <_printf_float+0xb6>
 8005e44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e48:	f1ba 0f01 	cmp.w	sl, #1
 8005e4c:	dc01      	bgt.n	8005e52 <_printf_float+0x3b6>
 8005e4e:	07db      	lsls	r3, r3, #31
 8005e50:	d536      	bpl.n	8005ec0 <_printf_float+0x424>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4642      	mov	r2, r8
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f43f ae78 	beq.w	8005b52 <_printf_float+0xb6>
 8005e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e66:	4631      	mov	r1, r6
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47b8      	blx	r7
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	f43f ae70 	beq.w	8005b52 <_printf_float+0xb6>
 8005e72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e7e:	f7fa fe4b 	bl	8000b18 <__aeabi_dcmpeq>
 8005e82:	b9c0      	cbnz	r0, 8005eb6 <_printf_float+0x41a>
 8005e84:	4653      	mov	r3, sl
 8005e86:	f108 0201 	add.w	r2, r8, #1
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	d10c      	bne.n	8005eae <_printf_float+0x412>
 8005e94:	e65d      	b.n	8005b52 <_printf_float+0xb6>
 8005e96:	2301      	movs	r3, #1
 8005e98:	465a      	mov	r2, fp
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f43f ae56 	beq.w	8005b52 <_printf_float+0xb6>
 8005ea6:	f108 0801 	add.w	r8, r8, #1
 8005eaa:	45d0      	cmp	r8, sl
 8005eac:	dbf3      	blt.n	8005e96 <_printf_float+0x3fa>
 8005eae:	464b      	mov	r3, r9
 8005eb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005eb4:	e6df      	b.n	8005c76 <_printf_float+0x1da>
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	f104 0b1a 	add.w	fp, r4, #26
 8005ebe:	e7f4      	b.n	8005eaa <_printf_float+0x40e>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4642      	mov	r2, r8
 8005ec4:	e7e1      	b.n	8005e8a <_printf_float+0x3ee>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	464a      	mov	r2, r9
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f ae3e 	beq.w	8005b52 <_printf_float+0xb6>
 8005ed6:	f108 0801 	add.w	r8, r8, #1
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ede:	1a5b      	subs	r3, r3, r1
 8005ee0:	4543      	cmp	r3, r8
 8005ee2:	dcf0      	bgt.n	8005ec6 <_printf_float+0x42a>
 8005ee4:	e6fc      	b.n	8005ce0 <_printf_float+0x244>
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	f104 0919 	add.w	r9, r4, #25
 8005eee:	e7f4      	b.n	8005eda <_printf_float+0x43e>

08005ef0 <_printf_common>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	4698      	mov	r8, r3
 8005ef8:	688a      	ldr	r2, [r1, #8]
 8005efa:	690b      	ldr	r3, [r1, #16]
 8005efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	bfb8      	it	lt
 8005f04:	4613      	movlt	r3, r2
 8005f06:	6033      	str	r3, [r6, #0]
 8005f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	b10a      	cbz	r2, 8005f16 <_printf_common+0x26>
 8005f12:	3301      	adds	r3, #1
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	0699      	lsls	r1, r3, #26
 8005f1a:	bf42      	ittt	mi
 8005f1c:	6833      	ldrmi	r3, [r6, #0]
 8005f1e:	3302      	addmi	r3, #2
 8005f20:	6033      	strmi	r3, [r6, #0]
 8005f22:	6825      	ldr	r5, [r4, #0]
 8005f24:	f015 0506 	ands.w	r5, r5, #6
 8005f28:	d106      	bne.n	8005f38 <_printf_common+0x48>
 8005f2a:	f104 0a19 	add.w	sl, r4, #25
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	6832      	ldr	r2, [r6, #0]
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	dc26      	bgt.n	8005f86 <_printf_common+0x96>
 8005f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	3b00      	subs	r3, #0
 8005f40:	bf18      	it	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	0692      	lsls	r2, r2, #26
 8005f46:	d42b      	bmi.n	8005fa0 <_printf_common+0xb0>
 8005f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	4638      	mov	r0, r7
 8005f50:	47c8      	blx	r9
 8005f52:	3001      	adds	r0, #1
 8005f54:	d01e      	beq.n	8005f94 <_printf_common+0xa4>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	f003 0306 	and.w	r3, r3, #6
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	bf02      	ittt	eq
 8005f62:	68e5      	ldreq	r5, [r4, #12]
 8005f64:	6833      	ldreq	r3, [r6, #0]
 8005f66:	1aed      	subeq	r5, r5, r3
 8005f68:	68a3      	ldr	r3, [r4, #8]
 8005f6a:	bf0c      	ite	eq
 8005f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f70:	2500      	movne	r5, #0
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bfc4      	itt	gt
 8005f76:	1a9b      	subgt	r3, r3, r2
 8005f78:	18ed      	addgt	r5, r5, r3
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	341a      	adds	r4, #26
 8005f7e:	42b5      	cmp	r5, r6
 8005f80:	d11a      	bne.n	8005fb8 <_printf_common+0xc8>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e008      	b.n	8005f98 <_printf_common+0xa8>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4652      	mov	r2, sl
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	47c8      	blx	r9
 8005f90:	3001      	adds	r0, #1
 8005f92:	d103      	bne.n	8005f9c <_printf_common+0xac>
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	e7c6      	b.n	8005f2e <_printf_common+0x3e>
 8005fa0:	18e1      	adds	r1, r4, r3
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	2030      	movs	r0, #48	@ 0x30
 8005fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005faa:	4422      	add	r2, r4
 8005fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	e7c7      	b.n	8005f48 <_printf_common+0x58>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	47c8      	blx	r9
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d0e6      	beq.n	8005f94 <_printf_common+0xa4>
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7d9      	b.n	8005f7e <_printf_common+0x8e>
	...

08005fcc <_printf_i>:
 8005fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	7e0f      	ldrb	r7, [r1, #24]
 8005fd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fd4:	2f78      	cmp	r7, #120	@ 0x78
 8005fd6:	4691      	mov	r9, r2
 8005fd8:	4680      	mov	r8, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	469a      	mov	sl, r3
 8005fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fe2:	d807      	bhi.n	8005ff4 <_printf_i+0x28>
 8005fe4:	2f62      	cmp	r7, #98	@ 0x62
 8005fe6:	d80a      	bhi.n	8005ffe <_printf_i+0x32>
 8005fe8:	2f00      	cmp	r7, #0
 8005fea:	f000 80d2 	beq.w	8006192 <_printf_i+0x1c6>
 8005fee:	2f58      	cmp	r7, #88	@ 0x58
 8005ff0:	f000 80b9 	beq.w	8006166 <_printf_i+0x19a>
 8005ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ffc:	e03a      	b.n	8006074 <_printf_i+0xa8>
 8005ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006002:	2b15      	cmp	r3, #21
 8006004:	d8f6      	bhi.n	8005ff4 <_printf_i+0x28>
 8006006:	a101      	add	r1, pc, #4	@ (adr r1, 800600c <_printf_i+0x40>)
 8006008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800600c:	08006065 	.word	0x08006065
 8006010:	08006079 	.word	0x08006079
 8006014:	08005ff5 	.word	0x08005ff5
 8006018:	08005ff5 	.word	0x08005ff5
 800601c:	08005ff5 	.word	0x08005ff5
 8006020:	08005ff5 	.word	0x08005ff5
 8006024:	08006079 	.word	0x08006079
 8006028:	08005ff5 	.word	0x08005ff5
 800602c:	08005ff5 	.word	0x08005ff5
 8006030:	08005ff5 	.word	0x08005ff5
 8006034:	08005ff5 	.word	0x08005ff5
 8006038:	08006179 	.word	0x08006179
 800603c:	080060a3 	.word	0x080060a3
 8006040:	08006133 	.word	0x08006133
 8006044:	08005ff5 	.word	0x08005ff5
 8006048:	08005ff5 	.word	0x08005ff5
 800604c:	0800619b 	.word	0x0800619b
 8006050:	08005ff5 	.word	0x08005ff5
 8006054:	080060a3 	.word	0x080060a3
 8006058:	08005ff5 	.word	0x08005ff5
 800605c:	08005ff5 	.word	0x08005ff5
 8006060:	0800613b 	.word	0x0800613b
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	1d1a      	adds	r2, r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6032      	str	r2, [r6, #0]
 800606c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006074:	2301      	movs	r3, #1
 8006076:	e09d      	b.n	80061b4 <_printf_i+0x1e8>
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	1d19      	adds	r1, r3, #4
 800607e:	6031      	str	r1, [r6, #0]
 8006080:	0606      	lsls	r6, r0, #24
 8006082:	d501      	bpl.n	8006088 <_printf_i+0xbc>
 8006084:	681d      	ldr	r5, [r3, #0]
 8006086:	e003      	b.n	8006090 <_printf_i+0xc4>
 8006088:	0645      	lsls	r5, r0, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0xb8>
 800608c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006090:	2d00      	cmp	r5, #0
 8006092:	da03      	bge.n	800609c <_printf_i+0xd0>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	426d      	negs	r5, r5
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609c:	4859      	ldr	r0, [pc, #356]	@ (8006204 <_printf_i+0x238>)
 800609e:	230a      	movs	r3, #10
 80060a0:	e011      	b.n	80060c6 <_printf_i+0xfa>
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	0608      	lsls	r0, r1, #24
 80060a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060ac:	d402      	bmi.n	80060b4 <_printf_i+0xe8>
 80060ae:	0649      	lsls	r1, r1, #25
 80060b0:	bf48      	it	mi
 80060b2:	b2ad      	uxthmi	r5, r5
 80060b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060b6:	4853      	ldr	r0, [pc, #332]	@ (8006204 <_printf_i+0x238>)
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	bf14      	ite	ne
 80060bc:	230a      	movne	r3, #10
 80060be:	2308      	moveq	r3, #8
 80060c0:	2100      	movs	r1, #0
 80060c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060c6:	6866      	ldr	r6, [r4, #4]
 80060c8:	60a6      	str	r6, [r4, #8]
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	bfa2      	ittt	ge
 80060ce:	6821      	ldrge	r1, [r4, #0]
 80060d0:	f021 0104 	bicge.w	r1, r1, #4
 80060d4:	6021      	strge	r1, [r4, #0]
 80060d6:	b90d      	cbnz	r5, 80060dc <_printf_i+0x110>
 80060d8:	2e00      	cmp	r6, #0
 80060da:	d04b      	beq.n	8006174 <_printf_i+0x1a8>
 80060dc:	4616      	mov	r6, r2
 80060de:	fbb5 f1f3 	udiv	r1, r5, r3
 80060e2:	fb03 5711 	mls	r7, r3, r1, r5
 80060e6:	5dc7      	ldrb	r7, [r0, r7]
 80060e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ec:	462f      	mov	r7, r5
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	460d      	mov	r5, r1
 80060f2:	d9f4      	bls.n	80060de <_printf_i+0x112>
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d10b      	bne.n	8006110 <_printf_i+0x144>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07df      	lsls	r7, r3, #31
 80060fc:	d508      	bpl.n	8006110 <_printf_i+0x144>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6861      	ldr	r1, [r4, #4]
 8006102:	4299      	cmp	r1, r3
 8006104:	bfde      	ittt	le
 8006106:	2330      	movle	r3, #48	@ 0x30
 8006108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800610c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006110:	1b92      	subs	r2, r2, r6
 8006112:	6122      	str	r2, [r4, #16]
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	464b      	mov	r3, r9
 800611a:	aa03      	add	r2, sp, #12
 800611c:	4621      	mov	r1, r4
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fee6 	bl	8005ef0 <_printf_common>
 8006124:	3001      	adds	r0, #1
 8006126:	d14a      	bne.n	80061be <_printf_i+0x1f2>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	b004      	add	sp, #16
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	4833      	ldr	r0, [pc, #204]	@ (8006208 <_printf_i+0x23c>)
 800613c:	2778      	movs	r7, #120	@ 0x78
 800613e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	6831      	ldr	r1, [r6, #0]
 8006146:	061f      	lsls	r7, r3, #24
 8006148:	f851 5b04 	ldr.w	r5, [r1], #4
 800614c:	d402      	bmi.n	8006154 <_printf_i+0x188>
 800614e:	065f      	lsls	r7, r3, #25
 8006150:	bf48      	it	mi
 8006152:	b2ad      	uxthmi	r5, r5
 8006154:	6031      	str	r1, [r6, #0]
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	bf44      	itt	mi
 800615a:	f043 0320 	orrmi.w	r3, r3, #32
 800615e:	6023      	strmi	r3, [r4, #0]
 8006160:	b11d      	cbz	r5, 800616a <_printf_i+0x19e>
 8006162:	2310      	movs	r3, #16
 8006164:	e7ac      	b.n	80060c0 <_printf_i+0xf4>
 8006166:	4827      	ldr	r0, [pc, #156]	@ (8006204 <_printf_i+0x238>)
 8006168:	e7e9      	b.n	800613e <_printf_i+0x172>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f023 0320 	bic.w	r3, r3, #32
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	e7f6      	b.n	8006162 <_printf_i+0x196>
 8006174:	4616      	mov	r6, r2
 8006176:	e7bd      	b.n	80060f4 <_printf_i+0x128>
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	6825      	ldr	r5, [r4, #0]
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	1d18      	adds	r0, r3, #4
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	062e      	lsls	r6, r5, #24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	d501      	bpl.n	800618c <_printf_i+0x1c0>
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0x1c6>
 800618c:	0668      	lsls	r0, r5, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0x1bc>
 8006190:	8019      	strh	r1, [r3, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	4616      	mov	r6, r2
 8006198:	e7bc      	b.n	8006114 <_printf_i+0x148>
 800619a:	6833      	ldr	r3, [r6, #0]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	6032      	str	r2, [r6, #0]
 80061a0:	681e      	ldr	r6, [r3, #0]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	2100      	movs	r1, #0
 80061a6:	4630      	mov	r0, r6
 80061a8:	f7fa f83a 	bl	8000220 <memchr>
 80061ac:	b108      	cbz	r0, 80061b2 <_printf_i+0x1e6>
 80061ae:	1b80      	subs	r0, r0, r6
 80061b0:	6060      	str	r0, [r4, #4]
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	2300      	movs	r3, #0
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061bc:	e7aa      	b.n	8006114 <_printf_i+0x148>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	4632      	mov	r2, r6
 80061c2:	4649      	mov	r1, r9
 80061c4:	4640      	mov	r0, r8
 80061c6:	47d0      	blx	sl
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0ad      	beq.n	8006128 <_printf_i+0x15c>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	d413      	bmi.n	80061fa <_printf_i+0x22e>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e7a6      	b.n	800612c <_printf_i+0x160>
 80061de:	2301      	movs	r3, #1
 80061e0:	4632      	mov	r2, r6
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d09d      	beq.n	8006128 <_printf_i+0x15c>
 80061ec:	3501      	adds	r5, #1
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	9903      	ldr	r1, [sp, #12]
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dcf2      	bgt.n	80061de <_printf_i+0x212>
 80061f8:	e7eb      	b.n	80061d2 <_printf_i+0x206>
 80061fa:	2500      	movs	r5, #0
 80061fc:	f104 0619 	add.w	r6, r4, #25
 8006200:	e7f5      	b.n	80061ee <_printf_i+0x222>
 8006202:	bf00      	nop
 8006204:	080083ce 	.word	0x080083ce
 8006208:	080083df 	.word	0x080083df

0800620c <std>:
 800620c:	2300      	movs	r3, #0
 800620e:	b510      	push	{r4, lr}
 8006210:	4604      	mov	r4, r0
 8006212:	e9c0 3300 	strd	r3, r3, [r0]
 8006216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800621a:	6083      	str	r3, [r0, #8]
 800621c:	8181      	strh	r1, [r0, #12]
 800621e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006220:	81c2      	strh	r2, [r0, #14]
 8006222:	6183      	str	r3, [r0, #24]
 8006224:	4619      	mov	r1, r3
 8006226:	2208      	movs	r2, #8
 8006228:	305c      	adds	r0, #92	@ 0x5c
 800622a:	f000 f9f9 	bl	8006620 <memset>
 800622e:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <std+0x58>)
 8006230:	6263      	str	r3, [r4, #36]	@ 0x24
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <std+0x5c>)
 8006234:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <std+0x60>)
 8006238:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <std+0x64>)
 800623c:	6323      	str	r3, [r4, #48]	@ 0x30
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <std+0x68>)
 8006240:	6224      	str	r4, [r4, #32]
 8006242:	429c      	cmp	r4, r3
 8006244:	d006      	beq.n	8006254 <std+0x48>
 8006246:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800624a:	4294      	cmp	r4, r2
 800624c:	d002      	beq.n	8006254 <std+0x48>
 800624e:	33d0      	adds	r3, #208	@ 0xd0
 8006250:	429c      	cmp	r4, r3
 8006252:	d105      	bne.n	8006260 <std+0x54>
 8006254:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800625c:	f000 ba5c 	b.w	8006718 <__retarget_lock_init_recursive>
 8006260:	bd10      	pop	{r4, pc}
 8006262:	bf00      	nop
 8006264:	08006471 	.word	0x08006471
 8006268:	08006493 	.word	0x08006493
 800626c:	080064cb 	.word	0x080064cb
 8006270:	080064ef 	.word	0x080064ef
 8006274:	200003b4 	.word	0x200003b4

08006278 <stdio_exit_handler>:
 8006278:	4a02      	ldr	r2, [pc, #8]	@ (8006284 <stdio_exit_handler+0xc>)
 800627a:	4903      	ldr	r1, [pc, #12]	@ (8006288 <stdio_exit_handler+0x10>)
 800627c:	4803      	ldr	r0, [pc, #12]	@ (800628c <stdio_exit_handler+0x14>)
 800627e:	f000 b869 	b.w	8006354 <_fwalk_sglue>
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
 8006288:	08008049 	.word	0x08008049
 800628c:	2000001c 	.word	0x2000001c

08006290 <cleanup_stdio>:
 8006290:	6841      	ldr	r1, [r0, #4]
 8006292:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <cleanup_stdio+0x34>)
 8006294:	4299      	cmp	r1, r3
 8006296:	b510      	push	{r4, lr}
 8006298:	4604      	mov	r4, r0
 800629a:	d001      	beq.n	80062a0 <cleanup_stdio+0x10>
 800629c:	f001 fed4 	bl	8008048 <_fflush_r>
 80062a0:	68a1      	ldr	r1, [r4, #8]
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <cleanup_stdio+0x38>)
 80062a4:	4299      	cmp	r1, r3
 80062a6:	d002      	beq.n	80062ae <cleanup_stdio+0x1e>
 80062a8:	4620      	mov	r0, r4
 80062aa:	f001 fecd 	bl	8008048 <_fflush_r>
 80062ae:	68e1      	ldr	r1, [r4, #12]
 80062b0:	4b06      	ldr	r3, [pc, #24]	@ (80062cc <cleanup_stdio+0x3c>)
 80062b2:	4299      	cmp	r1, r3
 80062b4:	d004      	beq.n	80062c0 <cleanup_stdio+0x30>
 80062b6:	4620      	mov	r0, r4
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062bc:	f001 bec4 	b.w	8008048 <_fflush_r>
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	bf00      	nop
 80062c4:	200003b4 	.word	0x200003b4
 80062c8:	2000041c 	.word	0x2000041c
 80062cc:	20000484 	.word	0x20000484

080062d0 <global_stdio_init.part.0>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <global_stdio_init.part.0+0x30>)
 80062d4:	4c0b      	ldr	r4, [pc, #44]	@ (8006304 <global_stdio_init.part.0+0x34>)
 80062d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006308 <global_stdio_init.part.0+0x38>)
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	4620      	mov	r0, r4
 80062dc:	2200      	movs	r2, #0
 80062de:	2104      	movs	r1, #4
 80062e0:	f7ff ff94 	bl	800620c <std>
 80062e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062e8:	2201      	movs	r2, #1
 80062ea:	2109      	movs	r1, #9
 80062ec:	f7ff ff8e 	bl	800620c <std>
 80062f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062f4:	2202      	movs	r2, #2
 80062f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fa:	2112      	movs	r1, #18
 80062fc:	f7ff bf86 	b.w	800620c <std>
 8006300:	200004ec 	.word	0x200004ec
 8006304:	200003b4 	.word	0x200003b4
 8006308:	08006279 	.word	0x08006279

0800630c <__sfp_lock_acquire>:
 800630c:	4801      	ldr	r0, [pc, #4]	@ (8006314 <__sfp_lock_acquire+0x8>)
 800630e:	f000 ba04 	b.w	800671a <__retarget_lock_acquire_recursive>
 8006312:	bf00      	nop
 8006314:	200004f5 	.word	0x200004f5

08006318 <__sfp_lock_release>:
 8006318:	4801      	ldr	r0, [pc, #4]	@ (8006320 <__sfp_lock_release+0x8>)
 800631a:	f000 b9ff 	b.w	800671c <__retarget_lock_release_recursive>
 800631e:	bf00      	nop
 8006320:	200004f5 	.word	0x200004f5

08006324 <__sinit>:
 8006324:	b510      	push	{r4, lr}
 8006326:	4604      	mov	r4, r0
 8006328:	f7ff fff0 	bl	800630c <__sfp_lock_acquire>
 800632c:	6a23      	ldr	r3, [r4, #32]
 800632e:	b11b      	cbz	r3, 8006338 <__sinit+0x14>
 8006330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006334:	f7ff bff0 	b.w	8006318 <__sfp_lock_release>
 8006338:	4b04      	ldr	r3, [pc, #16]	@ (800634c <__sinit+0x28>)
 800633a:	6223      	str	r3, [r4, #32]
 800633c:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <__sinit+0x2c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f5      	bne.n	8006330 <__sinit+0xc>
 8006344:	f7ff ffc4 	bl	80062d0 <global_stdio_init.part.0>
 8006348:	e7f2      	b.n	8006330 <__sinit+0xc>
 800634a:	bf00      	nop
 800634c:	08006291 	.word	0x08006291
 8006350:	200004ec 	.word	0x200004ec

08006354 <_fwalk_sglue>:
 8006354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006358:	4607      	mov	r7, r0
 800635a:	4688      	mov	r8, r1
 800635c:	4614      	mov	r4, r2
 800635e:	2600      	movs	r6, #0
 8006360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006364:	f1b9 0901 	subs.w	r9, r9, #1
 8006368:	d505      	bpl.n	8006376 <_fwalk_sglue+0x22>
 800636a:	6824      	ldr	r4, [r4, #0]
 800636c:	2c00      	cmp	r4, #0
 800636e:	d1f7      	bne.n	8006360 <_fwalk_sglue+0xc>
 8006370:	4630      	mov	r0, r6
 8006372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d907      	bls.n	800638c <_fwalk_sglue+0x38>
 800637c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006380:	3301      	adds	r3, #1
 8006382:	d003      	beq.n	800638c <_fwalk_sglue+0x38>
 8006384:	4629      	mov	r1, r5
 8006386:	4638      	mov	r0, r7
 8006388:	47c0      	blx	r8
 800638a:	4306      	orrs	r6, r0
 800638c:	3568      	adds	r5, #104	@ 0x68
 800638e:	e7e9      	b.n	8006364 <_fwalk_sglue+0x10>

08006390 <iprintf>:
 8006390:	b40f      	push	{r0, r1, r2, r3}
 8006392:	b507      	push	{r0, r1, r2, lr}
 8006394:	4906      	ldr	r1, [pc, #24]	@ (80063b0 <iprintf+0x20>)
 8006396:	ab04      	add	r3, sp, #16
 8006398:	6808      	ldr	r0, [r1, #0]
 800639a:	f853 2b04 	ldr.w	r2, [r3], #4
 800639e:	6881      	ldr	r1, [r0, #8]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	f001 fcb5 	bl	8007d10 <_vfiprintf_r>
 80063a6:	b003      	add	sp, #12
 80063a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ac:	b004      	add	sp, #16
 80063ae:	4770      	bx	lr
 80063b0:	20000018 	.word	0x20000018

080063b4 <_puts_r>:
 80063b4:	6a03      	ldr	r3, [r0, #32]
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	6884      	ldr	r4, [r0, #8]
 80063ba:	4605      	mov	r5, r0
 80063bc:	460e      	mov	r6, r1
 80063be:	b90b      	cbnz	r3, 80063c4 <_puts_r+0x10>
 80063c0:	f7ff ffb0 	bl	8006324 <__sinit>
 80063c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d405      	bmi.n	80063d6 <_puts_r+0x22>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	0598      	lsls	r0, r3, #22
 80063ce:	d402      	bmi.n	80063d6 <_puts_r+0x22>
 80063d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063d2:	f000 f9a2 	bl	800671a <__retarget_lock_acquire_recursive>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	0719      	lsls	r1, r3, #28
 80063da:	d502      	bpl.n	80063e2 <_puts_r+0x2e>
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d135      	bne.n	800644e <_puts_r+0x9a>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	f000 f8c5 	bl	8006574 <__swsetup_r>
 80063ea:	b380      	cbz	r0, 800644e <_puts_r+0x9a>
 80063ec:	f04f 35ff 	mov.w	r5, #4294967295
 80063f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f2:	07da      	lsls	r2, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_puts_r+0x4e>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	059b      	lsls	r3, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_puts_r+0x4e>
 80063fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fe:	f000 f98d 	bl	800671c <__retarget_lock_release_recursive>
 8006402:	4628      	mov	r0, r5
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	2b00      	cmp	r3, #0
 8006408:	da04      	bge.n	8006414 <_puts_r+0x60>
 800640a:	69a2      	ldr	r2, [r4, #24]
 800640c:	429a      	cmp	r2, r3
 800640e:	dc17      	bgt.n	8006440 <_puts_r+0x8c>
 8006410:	290a      	cmp	r1, #10
 8006412:	d015      	beq.n	8006440 <_puts_r+0x8c>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	7019      	strb	r1, [r3, #0]
 800641c:	68a3      	ldr	r3, [r4, #8]
 800641e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006422:	3b01      	subs	r3, #1
 8006424:	60a3      	str	r3, [r4, #8]
 8006426:	2900      	cmp	r1, #0
 8006428:	d1ed      	bne.n	8006406 <_puts_r+0x52>
 800642a:	2b00      	cmp	r3, #0
 800642c:	da11      	bge.n	8006452 <_puts_r+0x9e>
 800642e:	4622      	mov	r2, r4
 8006430:	210a      	movs	r1, #10
 8006432:	4628      	mov	r0, r5
 8006434:	f000 f85f 	bl	80064f6 <__swbuf_r>
 8006438:	3001      	adds	r0, #1
 800643a:	d0d7      	beq.n	80063ec <_puts_r+0x38>
 800643c:	250a      	movs	r5, #10
 800643e:	e7d7      	b.n	80063f0 <_puts_r+0x3c>
 8006440:	4622      	mov	r2, r4
 8006442:	4628      	mov	r0, r5
 8006444:	f000 f857 	bl	80064f6 <__swbuf_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d1e7      	bne.n	800641c <_puts_r+0x68>
 800644c:	e7ce      	b.n	80063ec <_puts_r+0x38>
 800644e:	3e01      	subs	r6, #1
 8006450:	e7e4      	b.n	800641c <_puts_r+0x68>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	6022      	str	r2, [r4, #0]
 8006458:	220a      	movs	r2, #10
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	e7ee      	b.n	800643c <_puts_r+0x88>
	...

08006460 <puts>:
 8006460:	4b02      	ldr	r3, [pc, #8]	@ (800646c <puts+0xc>)
 8006462:	4601      	mov	r1, r0
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	f7ff bfa5 	b.w	80063b4 <_puts_r>
 800646a:	bf00      	nop
 800646c:	20000018 	.word	0x20000018

08006470 <__sread>:
 8006470:	b510      	push	{r4, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	f000 f900 	bl	800667c <_read_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	bfab      	itete	ge
 8006480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006482:	89a3      	ldrhlt	r3, [r4, #12]
 8006484:	181b      	addge	r3, r3, r0
 8006486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800648a:	bfac      	ite	ge
 800648c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800648e:	81a3      	strhlt	r3, [r4, #12]
 8006490:	bd10      	pop	{r4, pc}

08006492 <__swrite>:
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	461f      	mov	r7, r3
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	05db      	lsls	r3, r3, #23
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	4616      	mov	r6, r2
 80064a2:	d505      	bpl.n	80064b0 <__swrite+0x1e>
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	2302      	movs	r3, #2
 80064aa:	2200      	movs	r2, #0
 80064ac:	f000 f8d4 	bl	8006658 <_lseek_r>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	4632      	mov	r2, r6
 80064be:	463b      	mov	r3, r7
 80064c0:	4628      	mov	r0, r5
 80064c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	f000 b8eb 	b.w	80066a0 <_write_r>

080064ca <__sseek>:
 80064ca:	b510      	push	{r4, lr}
 80064cc:	460c      	mov	r4, r1
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 f8c1 	bl	8006658 <_lseek_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	bf15      	itete	ne
 80064dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064e6:	81a3      	strheq	r3, [r4, #12]
 80064e8:	bf18      	it	ne
 80064ea:	81a3      	strhne	r3, [r4, #12]
 80064ec:	bd10      	pop	{r4, pc}

080064ee <__sclose>:
 80064ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f2:	f000 b8a1 	b.w	8006638 <_close_r>

080064f6 <__swbuf_r>:
 80064f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f8:	460e      	mov	r6, r1
 80064fa:	4614      	mov	r4, r2
 80064fc:	4605      	mov	r5, r0
 80064fe:	b118      	cbz	r0, 8006508 <__swbuf_r+0x12>
 8006500:	6a03      	ldr	r3, [r0, #32]
 8006502:	b90b      	cbnz	r3, 8006508 <__swbuf_r+0x12>
 8006504:	f7ff ff0e 	bl	8006324 <__sinit>
 8006508:	69a3      	ldr	r3, [r4, #24]
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	071a      	lsls	r2, r3, #28
 8006510:	d501      	bpl.n	8006516 <__swbuf_r+0x20>
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	b943      	cbnz	r3, 8006528 <__swbuf_r+0x32>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f82b 	bl	8006574 <__swsetup_r>
 800651e:	b118      	cbz	r0, 8006528 <__swbuf_r+0x32>
 8006520:	f04f 37ff 	mov.w	r7, #4294967295
 8006524:	4638      	mov	r0, r7
 8006526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	6922      	ldr	r2, [r4, #16]
 800652c:	1a98      	subs	r0, r3, r2
 800652e:	6963      	ldr	r3, [r4, #20]
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	4283      	cmp	r3, r0
 8006534:	4637      	mov	r7, r6
 8006536:	dc05      	bgt.n	8006544 <__swbuf_r+0x4e>
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f001 fd84 	bl	8008048 <_fflush_r>
 8006540:	2800      	cmp	r0, #0
 8006542:	d1ed      	bne.n	8006520 <__swbuf_r+0x2a>
 8006544:	68a3      	ldr	r3, [r4, #8]
 8006546:	3b01      	subs	r3, #1
 8006548:	60a3      	str	r3, [r4, #8]
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	6022      	str	r2, [r4, #0]
 8006550:	701e      	strb	r6, [r3, #0]
 8006552:	6962      	ldr	r2, [r4, #20]
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	429a      	cmp	r2, r3
 8006558:	d004      	beq.n	8006564 <__swbuf_r+0x6e>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	07db      	lsls	r3, r3, #31
 800655e:	d5e1      	bpl.n	8006524 <__swbuf_r+0x2e>
 8006560:	2e0a      	cmp	r6, #10
 8006562:	d1df      	bne.n	8006524 <__swbuf_r+0x2e>
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5
 8006568:	f001 fd6e 	bl	8008048 <_fflush_r>
 800656c:	2800      	cmp	r0, #0
 800656e:	d0d9      	beq.n	8006524 <__swbuf_r+0x2e>
 8006570:	e7d6      	b.n	8006520 <__swbuf_r+0x2a>
	...

08006574 <__swsetup_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4b29      	ldr	r3, [pc, #164]	@ (800661c <__swsetup_r+0xa8>)
 8006578:	4605      	mov	r5, r0
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	460c      	mov	r4, r1
 800657e:	b118      	cbz	r0, 8006588 <__swsetup_r+0x14>
 8006580:	6a03      	ldr	r3, [r0, #32]
 8006582:	b90b      	cbnz	r3, 8006588 <__swsetup_r+0x14>
 8006584:	f7ff fece 	bl	8006324 <__sinit>
 8006588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658c:	0719      	lsls	r1, r3, #28
 800658e:	d422      	bmi.n	80065d6 <__swsetup_r+0x62>
 8006590:	06da      	lsls	r2, r3, #27
 8006592:	d407      	bmi.n	80065a4 <__swsetup_r+0x30>
 8006594:	2209      	movs	r2, #9
 8006596:	602a      	str	r2, [r5, #0]
 8006598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	f04f 30ff 	mov.w	r0, #4294967295
 80065a2:	e033      	b.n	800660c <__swsetup_r+0x98>
 80065a4:	0758      	lsls	r0, r3, #29
 80065a6:	d512      	bpl.n	80065ce <__swsetup_r+0x5a>
 80065a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065aa:	b141      	cbz	r1, 80065be <__swsetup_r+0x4a>
 80065ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065b0:	4299      	cmp	r1, r3
 80065b2:	d002      	beq.n	80065ba <__swsetup_r+0x46>
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 feff 	bl	80073b8 <_free_r>
 80065ba:	2300      	movs	r3, #0
 80065bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065c4:	81a3      	strh	r3, [r4, #12]
 80065c6:	2300      	movs	r3, #0
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	f043 0308 	orr.w	r3, r3, #8
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	6923      	ldr	r3, [r4, #16]
 80065d8:	b94b      	cbnz	r3, 80065ee <__swsetup_r+0x7a>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e4:	d003      	beq.n	80065ee <__swsetup_r+0x7a>
 80065e6:	4621      	mov	r1, r4
 80065e8:	4628      	mov	r0, r5
 80065ea:	f001 fd7b 	bl	80080e4 <__smakebuf_r>
 80065ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f2:	f013 0201 	ands.w	r2, r3, #1
 80065f6:	d00a      	beq.n	800660e <__swsetup_r+0x9a>
 80065f8:	2200      	movs	r2, #0
 80065fa:	60a2      	str	r2, [r4, #8]
 80065fc:	6962      	ldr	r2, [r4, #20]
 80065fe:	4252      	negs	r2, r2
 8006600:	61a2      	str	r2, [r4, #24]
 8006602:	6922      	ldr	r2, [r4, #16]
 8006604:	b942      	cbnz	r2, 8006618 <__swsetup_r+0xa4>
 8006606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800660a:	d1c5      	bne.n	8006598 <__swsetup_r+0x24>
 800660c:	bd38      	pop	{r3, r4, r5, pc}
 800660e:	0799      	lsls	r1, r3, #30
 8006610:	bf58      	it	pl
 8006612:	6962      	ldrpl	r2, [r4, #20]
 8006614:	60a2      	str	r2, [r4, #8]
 8006616:	e7f4      	b.n	8006602 <__swsetup_r+0x8e>
 8006618:	2000      	movs	r0, #0
 800661a:	e7f7      	b.n	800660c <__swsetup_r+0x98>
 800661c:	20000018 	.word	0x20000018

08006620 <memset>:
 8006620:	4402      	add	r2, r0
 8006622:	4603      	mov	r3, r0
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	f803 1b01 	strb.w	r1, [r3], #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <_localeconv_r>:
 8006630:	4800      	ldr	r0, [pc, #0]	@ (8006634 <_localeconv_r+0x4>)
 8006632:	4770      	bx	lr
 8006634:	20000158 	.word	0x20000158

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	@ (8006654 <_close_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fb f864 	bl	8001710 <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	200004f0 	.word	0x200004f0

08006658 <_lseek_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d07      	ldr	r5, [pc, #28]	@ (8006678 <_lseek_r+0x20>)
 800665c:	4604      	mov	r4, r0
 800665e:	4608      	mov	r0, r1
 8006660:	4611      	mov	r1, r2
 8006662:	2200      	movs	r2, #0
 8006664:	602a      	str	r2, [r5, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f7fb f879 	bl	800175e <_lseek>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_lseek_r+0x1e>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_lseek_r+0x1e>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	200004f0 	.word	0x200004f0

0800667c <_read_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d07      	ldr	r5, [pc, #28]	@ (800669c <_read_r+0x20>)
 8006680:	4604      	mov	r4, r0
 8006682:	4608      	mov	r0, r1
 8006684:	4611      	mov	r1, r2
 8006686:	2200      	movs	r2, #0
 8006688:	602a      	str	r2, [r5, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f7fb f807 	bl	800169e <_read>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_read_r+0x1e>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	b103      	cbz	r3, 800669a <_read_r+0x1e>
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	200004f0 	.word	0x200004f0

080066a0 <_write_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d07      	ldr	r5, [pc, #28]	@ (80066c0 <_write_r+0x20>)
 80066a4:	4604      	mov	r4, r0
 80066a6:	4608      	mov	r0, r1
 80066a8:	4611      	mov	r1, r2
 80066aa:	2200      	movs	r2, #0
 80066ac:	602a      	str	r2, [r5, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f7fb f812 	bl	80016d8 <_write>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_write_r+0x1e>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_write_r+0x1e>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	200004f0 	.word	0x200004f0

080066c4 <__errno>:
 80066c4:	4b01      	ldr	r3, [pc, #4]	@ (80066cc <__errno+0x8>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000018 	.word	0x20000018

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	@ (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	@ (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006714 <__libc_init_array+0x44>)
 80066e4:	f001 fe2a 	bl	800833c <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	08008738 	.word	0x08008738
 800670c:	08008738 	.word	0x08008738
 8006710:	08008738 	.word	0x08008738
 8006714:	0800873c 	.word	0x0800873c

08006718 <__retarget_lock_init_recursive>:
 8006718:	4770      	bx	lr

0800671a <__retarget_lock_acquire_recursive>:
 800671a:	4770      	bx	lr

0800671c <__retarget_lock_release_recursive>:
 800671c:	4770      	bx	lr

0800671e <quorem>:
 800671e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006722:	6903      	ldr	r3, [r0, #16]
 8006724:	690c      	ldr	r4, [r1, #16]
 8006726:	42a3      	cmp	r3, r4
 8006728:	4607      	mov	r7, r0
 800672a:	db7e      	blt.n	800682a <quorem+0x10c>
 800672c:	3c01      	subs	r4, #1
 800672e:	f101 0814 	add.w	r8, r1, #20
 8006732:	00a3      	lsls	r3, r4, #2
 8006734:	f100 0514 	add.w	r5, r0, #20
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006748:	3301      	adds	r3, #1
 800674a:	429a      	cmp	r2, r3
 800674c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006750:	fbb2 f6f3 	udiv	r6, r2, r3
 8006754:	d32e      	bcc.n	80067b4 <quorem+0x96>
 8006756:	f04f 0a00 	mov.w	sl, #0
 800675a:	46c4      	mov	ip, r8
 800675c:	46ae      	mov	lr, r5
 800675e:	46d3      	mov	fp, sl
 8006760:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006764:	b298      	uxth	r0, r3
 8006766:	fb06 a000 	mla	r0, r6, r0, sl
 800676a:	0c02      	lsrs	r2, r0, #16
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	fb06 2303 	mla	r3, r6, r3, r2
 8006772:	f8de 2000 	ldr.w	r2, [lr]
 8006776:	b280      	uxth	r0, r0
 8006778:	b292      	uxth	r2, r2
 800677a:	1a12      	subs	r2, r2, r0
 800677c:	445a      	add	r2, fp
 800677e:	f8de 0000 	ldr.w	r0, [lr]
 8006782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006786:	b29b      	uxth	r3, r3
 8006788:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800678c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006790:	b292      	uxth	r2, r2
 8006792:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006796:	45e1      	cmp	r9, ip
 8006798:	f84e 2b04 	str.w	r2, [lr], #4
 800679c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067a0:	d2de      	bcs.n	8006760 <quorem+0x42>
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	58eb      	ldr	r3, [r5, r3]
 80067a6:	b92b      	cbnz	r3, 80067b4 <quorem+0x96>
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	3b04      	subs	r3, #4
 80067ac:	429d      	cmp	r5, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	d32f      	bcc.n	8006812 <quorem+0xf4>
 80067b2:	613c      	str	r4, [r7, #16]
 80067b4:	4638      	mov	r0, r7
 80067b6:	f001 f979 	bl	8007aac <__mcmp>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	db25      	blt.n	800680a <quorem+0xec>
 80067be:	4629      	mov	r1, r5
 80067c0:	2000      	movs	r0, #0
 80067c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c6:	f8d1 c000 	ldr.w	ip, [r1]
 80067ca:	fa1f fe82 	uxth.w	lr, r2
 80067ce:	fa1f f38c 	uxth.w	r3, ip
 80067d2:	eba3 030e 	sub.w	r3, r3, lr
 80067d6:	4403      	add	r3, r0
 80067d8:	0c12      	lsrs	r2, r2, #16
 80067da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067e8:	45c1      	cmp	r9, r8
 80067ea:	f841 3b04 	str.w	r3, [r1], #4
 80067ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067f2:	d2e6      	bcs.n	80067c2 <quorem+0xa4>
 80067f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067fc:	b922      	cbnz	r2, 8006808 <quorem+0xea>
 80067fe:	3b04      	subs	r3, #4
 8006800:	429d      	cmp	r5, r3
 8006802:	461a      	mov	r2, r3
 8006804:	d30b      	bcc.n	800681e <quorem+0x100>
 8006806:	613c      	str	r4, [r7, #16]
 8006808:	3601      	adds	r6, #1
 800680a:	4630      	mov	r0, r6
 800680c:	b003      	add	sp, #12
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	3b04      	subs	r3, #4
 8006816:	2a00      	cmp	r2, #0
 8006818:	d1cb      	bne.n	80067b2 <quorem+0x94>
 800681a:	3c01      	subs	r4, #1
 800681c:	e7c6      	b.n	80067ac <quorem+0x8e>
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	3b04      	subs	r3, #4
 8006822:	2a00      	cmp	r2, #0
 8006824:	d1ef      	bne.n	8006806 <quorem+0xe8>
 8006826:	3c01      	subs	r4, #1
 8006828:	e7ea      	b.n	8006800 <quorem+0xe2>
 800682a:	2000      	movs	r0, #0
 800682c:	e7ee      	b.n	800680c <quorem+0xee>
	...

08006830 <_dtoa_r>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	69c7      	ldr	r7, [r0, #28]
 8006836:	b099      	sub	sp, #100	@ 0x64
 8006838:	ed8d 0b02 	vstr	d0, [sp, #8]
 800683c:	ec55 4b10 	vmov	r4, r5, d0
 8006840:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006842:	9109      	str	r1, [sp, #36]	@ 0x24
 8006844:	4683      	mov	fp, r0
 8006846:	920e      	str	r2, [sp, #56]	@ 0x38
 8006848:	9313      	str	r3, [sp, #76]	@ 0x4c
 800684a:	b97f      	cbnz	r7, 800686c <_dtoa_r+0x3c>
 800684c:	2010      	movs	r0, #16
 800684e:	f000 fdfd 	bl	800744c <malloc>
 8006852:	4602      	mov	r2, r0
 8006854:	f8cb 001c 	str.w	r0, [fp, #28]
 8006858:	b920      	cbnz	r0, 8006864 <_dtoa_r+0x34>
 800685a:	4ba7      	ldr	r3, [pc, #668]	@ (8006af8 <_dtoa_r+0x2c8>)
 800685c:	21ef      	movs	r1, #239	@ 0xef
 800685e:	48a7      	ldr	r0, [pc, #668]	@ (8006afc <_dtoa_r+0x2cc>)
 8006860:	f001 fcbc 	bl	80081dc <__assert_func>
 8006864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006868:	6007      	str	r7, [r0, #0]
 800686a:	60c7      	str	r7, [r0, #12]
 800686c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006870:	6819      	ldr	r1, [r3, #0]
 8006872:	b159      	cbz	r1, 800688c <_dtoa_r+0x5c>
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	604a      	str	r2, [r1, #4]
 8006878:	2301      	movs	r3, #1
 800687a:	4093      	lsls	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
 800687e:	4658      	mov	r0, fp
 8006880:	f000 feda 	bl	8007638 <_Bfree>
 8006884:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	1e2b      	subs	r3, r5, #0
 800688e:	bfb9      	ittee	lt
 8006890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006894:	9303      	strlt	r3, [sp, #12]
 8006896:	2300      	movge	r3, #0
 8006898:	6033      	strge	r3, [r6, #0]
 800689a:	9f03      	ldr	r7, [sp, #12]
 800689c:	4b98      	ldr	r3, [pc, #608]	@ (8006b00 <_dtoa_r+0x2d0>)
 800689e:	bfbc      	itt	lt
 80068a0:	2201      	movlt	r2, #1
 80068a2:	6032      	strlt	r2, [r6, #0]
 80068a4:	43bb      	bics	r3, r7
 80068a6:	d112      	bne.n	80068ce <_dtoa_r+0x9e>
 80068a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068b4:	4323      	orrs	r3, r4
 80068b6:	f000 854d 	beq.w	8007354 <_dtoa_r+0xb24>
 80068ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006b14 <_dtoa_r+0x2e4>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 854f 	beq.w	8007364 <_dtoa_r+0xb34>
 80068c6:	f10a 0303 	add.w	r3, sl, #3
 80068ca:	f000 bd49 	b.w	8007360 <_dtoa_r+0xb30>
 80068ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	ec51 0b17 	vmov	r0, r1, d7
 80068d8:	2300      	movs	r3, #0
 80068da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80068de:	f7fa f91b 	bl	8000b18 <__aeabi_dcmpeq>
 80068e2:	4680      	mov	r8, r0
 80068e4:	b158      	cbz	r0, 80068fe <_dtoa_r+0xce>
 80068e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068e8:	2301      	movs	r3, #1
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068ee:	b113      	cbz	r3, 80068f6 <_dtoa_r+0xc6>
 80068f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068f2:	4b84      	ldr	r3, [pc, #528]	@ (8006b04 <_dtoa_r+0x2d4>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006b18 <_dtoa_r+0x2e8>
 80068fa:	f000 bd33 	b.w	8007364 <_dtoa_r+0xb34>
 80068fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006902:	aa16      	add	r2, sp, #88	@ 0x58
 8006904:	a917      	add	r1, sp, #92	@ 0x5c
 8006906:	4658      	mov	r0, fp
 8006908:	f001 f980 	bl	8007c0c <__d2b>
 800690c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006910:	4681      	mov	r9, r0
 8006912:	2e00      	cmp	r6, #0
 8006914:	d077      	beq.n	8006a06 <_dtoa_r+0x1d6>
 8006916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006918:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800691c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800692c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006930:	4619      	mov	r1, r3
 8006932:	2200      	movs	r2, #0
 8006934:	4b74      	ldr	r3, [pc, #464]	@ (8006b08 <_dtoa_r+0x2d8>)
 8006936:	f7f9 fccf 	bl	80002d8 <__aeabi_dsub>
 800693a:	a369      	add	r3, pc, #420	@ (adr r3, 8006ae0 <_dtoa_r+0x2b0>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fe82 	bl	8000648 <__aeabi_dmul>
 8006944:	a368      	add	r3, pc, #416	@ (adr r3, 8006ae8 <_dtoa_r+0x2b8>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f7f9 fcc7 	bl	80002dc <__adddf3>
 800694e:	4604      	mov	r4, r0
 8006950:	4630      	mov	r0, r6
 8006952:	460d      	mov	r5, r1
 8006954:	f7f9 fe0e 	bl	8000574 <__aeabi_i2d>
 8006958:	a365      	add	r3, pc, #404	@ (adr r3, 8006af0 <_dtoa_r+0x2c0>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fe73 	bl	8000648 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 fcb7 	bl	80002dc <__adddf3>
 800696e:	4604      	mov	r4, r0
 8006970:	460d      	mov	r5, r1
 8006972:	f7fa f919 	bl	8000ba8 <__aeabi_d2iz>
 8006976:	2200      	movs	r2, #0
 8006978:	4607      	mov	r7, r0
 800697a:	2300      	movs	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f8d4 	bl	8000b2c <__aeabi_dcmplt>
 8006984:	b140      	cbz	r0, 8006998 <_dtoa_r+0x168>
 8006986:	4638      	mov	r0, r7
 8006988:	f7f9 fdf4 	bl	8000574 <__aeabi_i2d>
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	f7fa f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8006994:	b900      	cbnz	r0, 8006998 <_dtoa_r+0x168>
 8006996:	3f01      	subs	r7, #1
 8006998:	2f16      	cmp	r7, #22
 800699a:	d851      	bhi.n	8006a40 <_dtoa_r+0x210>
 800699c:	4b5b      	ldr	r3, [pc, #364]	@ (8006b0c <_dtoa_r+0x2dc>)
 800699e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069aa:	f7fa f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d048      	beq.n	8006a44 <_dtoa_r+0x214>
 80069b2:	3f01      	subs	r7, #1
 80069b4:	2300      	movs	r3, #0
 80069b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80069b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80069ba:	1b9b      	subs	r3, r3, r6
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	bf44      	itt	mi
 80069c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80069c4:	2300      	movmi	r3, #0
 80069c6:	9208      	str	r2, [sp, #32]
 80069c8:	bf54      	ite	pl
 80069ca:	f04f 0800 	movpl.w	r8, #0
 80069ce:	9308      	strmi	r3, [sp, #32]
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	db39      	blt.n	8006a48 <_dtoa_r+0x218>
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80069d8:	443b      	add	r3, r7
 80069da:	9308      	str	r3, [sp, #32]
 80069dc:	2300      	movs	r3, #0
 80069de:	930a      	str	r3, [sp, #40]	@ 0x28
 80069e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e2:	2b09      	cmp	r3, #9
 80069e4:	d864      	bhi.n	8006ab0 <_dtoa_r+0x280>
 80069e6:	2b05      	cmp	r3, #5
 80069e8:	bfc4      	itt	gt
 80069ea:	3b04      	subgt	r3, #4
 80069ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80069ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f0:	f1a3 0302 	sub.w	r3, r3, #2
 80069f4:	bfcc      	ite	gt
 80069f6:	2400      	movgt	r4, #0
 80069f8:	2401      	movle	r4, #1
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d863      	bhi.n	8006ac6 <_dtoa_r+0x296>
 80069fe:	e8df f003 	tbb	[pc, r3]
 8006a02:	372a      	.short	0x372a
 8006a04:	5535      	.short	0x5535
 8006a06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006a0a:	441e      	add	r6, r3
 8006a0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	bfc1      	itttt	gt
 8006a14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a18:	409f      	lslgt	r7, r3
 8006a1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a22:	bfd6      	itet	le
 8006a24:	f1c3 0320 	rsble	r3, r3, #32
 8006a28:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a2c:	fa04 f003 	lslle.w	r0, r4, r3
 8006a30:	f7f9 fd90 	bl	8000554 <__aeabi_ui2d>
 8006a34:	2201      	movs	r2, #1
 8006a36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a3a:	3e01      	subs	r6, #1
 8006a3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a3e:	e777      	b.n	8006930 <_dtoa_r+0x100>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e7b8      	b.n	80069b6 <_dtoa_r+0x186>
 8006a44:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a46:	e7b7      	b.n	80069b8 <_dtoa_r+0x188>
 8006a48:	427b      	negs	r3, r7
 8006a4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	eba8 0807 	sub.w	r8, r8, r7
 8006a52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a54:	e7c4      	b.n	80069e0 <_dtoa_r+0x1b0>
 8006a56:	2300      	movs	r3, #0
 8006a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dc35      	bgt.n	8006acc <_dtoa_r+0x29c>
 8006a60:	2301      	movs	r3, #1
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	9307      	str	r3, [sp, #28]
 8006a66:	461a      	mov	r2, r3
 8006a68:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a6a:	e00b      	b.n	8006a84 <_dtoa_r+0x254>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e7f3      	b.n	8006a58 <_dtoa_r+0x228>
 8006a70:	2300      	movs	r3, #0
 8006a72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	9307      	str	r3, [sp, #28]
 8006a80:	bfb8      	it	lt
 8006a82:	2301      	movlt	r3, #1
 8006a84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a88:	2100      	movs	r1, #0
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	f102 0514 	add.w	r5, r2, #20
 8006a90:	429d      	cmp	r5, r3
 8006a92:	d91f      	bls.n	8006ad4 <_dtoa_r+0x2a4>
 8006a94:	6041      	str	r1, [r0, #4]
 8006a96:	4658      	mov	r0, fp
 8006a98:	f000 fd8e 	bl	80075b8 <_Balloc>
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d13c      	bne.n	8006b1c <_dtoa_r+0x2ec>
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <_dtoa_r+0x2e0>)
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006aaa:	e6d8      	b.n	800685e <_dtoa_r+0x2e>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e7e0      	b.n	8006a72 <_dtoa_r+0x242>
 8006ab0:	2401      	movs	r4, #1
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2312      	movs	r3, #18
 8006ac4:	e7d0      	b.n	8006a68 <_dtoa_r+0x238>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aca:	e7f5      	b.n	8006ab8 <_dtoa_r+0x288>
 8006acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	9307      	str	r3, [sp, #28]
 8006ad2:	e7d7      	b.n	8006a84 <_dtoa_r+0x254>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	0052      	lsls	r2, r2, #1
 8006ad8:	e7d8      	b.n	8006a8c <_dtoa_r+0x25c>
 8006ada:	bf00      	nop
 8006adc:	f3af 8000 	nop.w
 8006ae0:	636f4361 	.word	0x636f4361
 8006ae4:	3fd287a7 	.word	0x3fd287a7
 8006ae8:	8b60c8b3 	.word	0x8b60c8b3
 8006aec:	3fc68a28 	.word	0x3fc68a28
 8006af0:	509f79fb 	.word	0x509f79fb
 8006af4:	3fd34413 	.word	0x3fd34413
 8006af8:	080083fd 	.word	0x080083fd
 8006afc:	08008414 	.word	0x08008414
 8006b00:	7ff00000 	.word	0x7ff00000
 8006b04:	080083cd 	.word	0x080083cd
 8006b08:	3ff80000 	.word	0x3ff80000
 8006b0c:	08008510 	.word	0x08008510
 8006b10:	0800846c 	.word	0x0800846c
 8006b14:	080083f9 	.word	0x080083f9
 8006b18:	080083cc 	.word	0x080083cc
 8006b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b20:	6018      	str	r0, [r3, #0]
 8006b22:	9b07      	ldr	r3, [sp, #28]
 8006b24:	2b0e      	cmp	r3, #14
 8006b26:	f200 80a4 	bhi.w	8006c72 <_dtoa_r+0x442>
 8006b2a:	2c00      	cmp	r4, #0
 8006b2c:	f000 80a1 	beq.w	8006c72 <_dtoa_r+0x442>
 8006b30:	2f00      	cmp	r7, #0
 8006b32:	dd33      	ble.n	8006b9c <_dtoa_r+0x36c>
 8006b34:	4bad      	ldr	r3, [pc, #692]	@ (8006dec <_dtoa_r+0x5bc>)
 8006b36:	f007 020f 	and.w	r2, r7, #15
 8006b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b3e:	ed93 7b00 	vldr	d7, [r3]
 8006b42:	05f8      	lsls	r0, r7, #23
 8006b44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b4c:	d516      	bpl.n	8006b7c <_dtoa_r+0x34c>
 8006b4e:	4ba8      	ldr	r3, [pc, #672]	@ (8006df0 <_dtoa_r+0x5c0>)
 8006b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b58:	f7f9 fea0 	bl	800089c <__aeabi_ddiv>
 8006b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b60:	f004 040f 	and.w	r4, r4, #15
 8006b64:	2603      	movs	r6, #3
 8006b66:	4da2      	ldr	r5, [pc, #648]	@ (8006df0 <_dtoa_r+0x5c0>)
 8006b68:	b954      	cbnz	r4, 8006b80 <_dtoa_r+0x350>
 8006b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b72:	f7f9 fe93 	bl	800089c <__aeabi_ddiv>
 8006b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b7a:	e028      	b.n	8006bce <_dtoa_r+0x39e>
 8006b7c:	2602      	movs	r6, #2
 8006b7e:	e7f2      	b.n	8006b66 <_dtoa_r+0x336>
 8006b80:	07e1      	lsls	r1, r4, #31
 8006b82:	d508      	bpl.n	8006b96 <_dtoa_r+0x366>
 8006b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b8c:	f7f9 fd5c 	bl	8000648 <__aeabi_dmul>
 8006b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b94:	3601      	adds	r6, #1
 8006b96:	1064      	asrs	r4, r4, #1
 8006b98:	3508      	adds	r5, #8
 8006b9a:	e7e5      	b.n	8006b68 <_dtoa_r+0x338>
 8006b9c:	f000 80d2 	beq.w	8006d44 <_dtoa_r+0x514>
 8006ba0:	427c      	negs	r4, r7
 8006ba2:	4b92      	ldr	r3, [pc, #584]	@ (8006dec <_dtoa_r+0x5bc>)
 8006ba4:	4d92      	ldr	r5, [pc, #584]	@ (8006df0 <_dtoa_r+0x5c0>)
 8006ba6:	f004 020f 	and.w	r2, r4, #15
 8006baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bb6:	f7f9 fd47 	bl	8000648 <__aeabi_dmul>
 8006bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bbe:	1124      	asrs	r4, r4, #4
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2602      	movs	r6, #2
 8006bc4:	2c00      	cmp	r4, #0
 8006bc6:	f040 80b2 	bne.w	8006d2e <_dtoa_r+0x4fe>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1d3      	bne.n	8006b76 <_dtoa_r+0x346>
 8006bce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80b7 	beq.w	8006d48 <_dtoa_r+0x518>
 8006bda:	4b86      	ldr	r3, [pc, #536]	@ (8006df4 <_dtoa_r+0x5c4>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f000 80ae 	beq.w	8006d48 <_dtoa_r+0x518>
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 80aa 	beq.w	8006d48 <_dtoa_r+0x518>
 8006bf4:	9b00      	ldr	r3, [sp, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd37      	ble.n	8006c6a <_dtoa_r+0x43a>
 8006bfa:	1e7b      	subs	r3, r7, #1
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4b7d      	ldr	r3, [pc, #500]	@ (8006df8 <_dtoa_r+0x5c8>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	4629      	mov	r1, r5
 8006c06:	f7f9 fd1f 	bl	8000648 <__aeabi_dmul>
 8006c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c0e:	9c00      	ldr	r4, [sp, #0]
 8006c10:	3601      	adds	r6, #1
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7f9 fcae 	bl	8000574 <__aeabi_i2d>
 8006c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c1c:	f7f9 fd14 	bl	8000648 <__aeabi_dmul>
 8006c20:	4b76      	ldr	r3, [pc, #472]	@ (8006dfc <_dtoa_r+0x5cc>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	f7f9 fb5a 	bl	80002dc <__adddf3>
 8006c28:	4605      	mov	r5, r0
 8006c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c2e:	2c00      	cmp	r4, #0
 8006c30:	f040 808d 	bne.w	8006d4e <_dtoa_r+0x51e>
 8006c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c38:	4b71      	ldr	r3, [pc, #452]	@ (8006e00 <_dtoa_r+0x5d0>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f7f9 fb4c 	bl	80002d8 <__aeabi_dsub>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c48:	462a      	mov	r2, r5
 8006c4a:	4633      	mov	r3, r6
 8006c4c:	f7f9 ff8c 	bl	8000b68 <__aeabi_dcmpgt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f040 828b 	bne.w	800716c <_dtoa_r+0x93c>
 8006c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c60:	f7f9 ff64 	bl	8000b2c <__aeabi_dcmplt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f040 8128 	bne.w	8006eba <_dtoa_r+0x68a>
 8006c6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f2c0 815a 	blt.w	8006f2e <_dtoa_r+0x6fe>
 8006c7a:	2f0e      	cmp	r7, #14
 8006c7c:	f300 8157 	bgt.w	8006f2e <_dtoa_r+0x6fe>
 8006c80:	4b5a      	ldr	r3, [pc, #360]	@ (8006dec <_dtoa_r+0x5bc>)
 8006c82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c86:	ed93 7b00 	vldr	d7, [r3]
 8006c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	ed8d 7b00 	vstr	d7, [sp]
 8006c92:	da03      	bge.n	8006c9c <_dtoa_r+0x46c>
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f340 8101 	ble.w	8006e9e <_dtoa_r+0x66e>
 8006c9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ca0:	4656      	mov	r6, sl
 8006ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 fdf7 	bl	800089c <__aeabi_ddiv>
 8006cae:	f7f9 ff7b 	bl	8000ba8 <__aeabi_d2iz>
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	f7f9 fc5e 	bl	8000574 <__aeabi_i2d>
 8006cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cbc:	f7f9 fcc4 	bl	8000648 <__aeabi_dmul>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ccc:	f7f9 fb04 	bl	80002d8 <__aeabi_dsub>
 8006cd0:	f806 4b01 	strb.w	r4, [r6], #1
 8006cd4:	9d07      	ldr	r5, [sp, #28]
 8006cd6:	eba6 040a 	sub.w	r4, r6, sl
 8006cda:	42a5      	cmp	r5, r4
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	f040 8117 	bne.w	8006f12 <_dtoa_r+0x6e2>
 8006ce4:	f7f9 fafa 	bl	80002dc <__adddf3>
 8006ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cec:	4604      	mov	r4, r0
 8006cee:	460d      	mov	r5, r1
 8006cf0:	f7f9 ff3a 	bl	8000b68 <__aeabi_dcmpgt>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f040 80f9 	bne.w	8006eec <_dtoa_r+0x6bc>
 8006cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 ff09 	bl	8000b18 <__aeabi_dcmpeq>
 8006d06:	b118      	cbz	r0, 8006d10 <_dtoa_r+0x4e0>
 8006d08:	f018 0f01 	tst.w	r8, #1
 8006d0c:	f040 80ee 	bne.w	8006eec <_dtoa_r+0x6bc>
 8006d10:	4649      	mov	r1, r9
 8006d12:	4658      	mov	r0, fp
 8006d14:	f000 fc90 	bl	8007638 <_Bfree>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	7033      	strb	r3, [r6, #0]
 8006d1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d1e:	3701      	adds	r7, #1
 8006d20:	601f      	str	r7, [r3, #0]
 8006d22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 831d 	beq.w	8007364 <_dtoa_r+0xb34>
 8006d2a:	601e      	str	r6, [r3, #0]
 8006d2c:	e31a      	b.n	8007364 <_dtoa_r+0xb34>
 8006d2e:	07e2      	lsls	r2, r4, #31
 8006d30:	d505      	bpl.n	8006d3e <_dtoa_r+0x50e>
 8006d32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d36:	f7f9 fc87 	bl	8000648 <__aeabi_dmul>
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	1064      	asrs	r4, r4, #1
 8006d40:	3508      	adds	r5, #8
 8006d42:	e73f      	b.n	8006bc4 <_dtoa_r+0x394>
 8006d44:	2602      	movs	r6, #2
 8006d46:	e742      	b.n	8006bce <_dtoa_r+0x39e>
 8006d48:	9c07      	ldr	r4, [sp, #28]
 8006d4a:	9704      	str	r7, [sp, #16]
 8006d4c:	e761      	b.n	8006c12 <_dtoa_r+0x3e2>
 8006d4e:	4b27      	ldr	r3, [pc, #156]	@ (8006dec <_dtoa_r+0x5bc>)
 8006d50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d5a:	4454      	add	r4, sl
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d053      	beq.n	8006e08 <_dtoa_r+0x5d8>
 8006d60:	4928      	ldr	r1, [pc, #160]	@ (8006e04 <_dtoa_r+0x5d4>)
 8006d62:	2000      	movs	r0, #0
 8006d64:	f7f9 fd9a 	bl	800089c <__aeabi_ddiv>
 8006d68:	4633      	mov	r3, r6
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	f7f9 fab4 	bl	80002d8 <__aeabi_dsub>
 8006d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d74:	4656      	mov	r6, sl
 8006d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7a:	f7f9 ff15 	bl	8000ba8 <__aeabi_d2iz>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	f7f9 fbf8 	bl	8000574 <__aeabi_i2d>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d8c:	f7f9 faa4 	bl	80002d8 <__aeabi_dsub>
 8006d90:	3530      	adds	r5, #48	@ 0x30
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d9a:	f806 5b01 	strb.w	r5, [r6], #1
 8006d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006da2:	f7f9 fec3 	bl	8000b2c <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d171      	bne.n	8006e8e <_dtoa_r+0x65e>
 8006daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dae:	4911      	ldr	r1, [pc, #68]	@ (8006df4 <_dtoa_r+0x5c4>)
 8006db0:	2000      	movs	r0, #0
 8006db2:	f7f9 fa91 	bl	80002d8 <__aeabi_dsub>
 8006db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dba:	f7f9 feb7 	bl	8000b2c <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f040 8095 	bne.w	8006eee <_dtoa_r+0x6be>
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	f43f af50 	beq.w	8006c6a <_dtoa_r+0x43a>
 8006dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006dce:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <_dtoa_r+0x5c8>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 fc39 	bl	8000648 <__aeabi_dmul>
 8006dd6:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <_dtoa_r+0x5c8>)
 8006dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de2:	f7f9 fc31 	bl	8000648 <__aeabi_dmul>
 8006de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dea:	e7c4      	b.n	8006d76 <_dtoa_r+0x546>
 8006dec:	08008510 	.word	0x08008510
 8006df0:	080084e8 	.word	0x080084e8
 8006df4:	3ff00000 	.word	0x3ff00000
 8006df8:	40240000 	.word	0x40240000
 8006dfc:	401c0000 	.word	0x401c0000
 8006e00:	40140000 	.word	0x40140000
 8006e04:	3fe00000 	.word	0x3fe00000
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f7f9 fc1c 	bl	8000648 <__aeabi_dmul>
 8006e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e14:	9415      	str	r4, [sp, #84]	@ 0x54
 8006e16:	4656      	mov	r6, sl
 8006e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1c:	f7f9 fec4 	bl	8000ba8 <__aeabi_d2iz>
 8006e20:	4605      	mov	r5, r0
 8006e22:	f7f9 fba7 	bl	8000574 <__aeabi_i2d>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2e:	f7f9 fa53 	bl	80002d8 <__aeabi_dsub>
 8006e32:	3530      	adds	r5, #48	@ 0x30
 8006e34:	f806 5b01 	strb.w	r5, [r6], #1
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	42a6      	cmp	r6, r4
 8006e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	d124      	bne.n	8006e92 <_dtoa_r+0x662>
 8006e48:	4bac      	ldr	r3, [pc, #688]	@ (80070fc <_dtoa_r+0x8cc>)
 8006e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e4e:	f7f9 fa45 	bl	80002dc <__adddf3>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e5a:	f7f9 fe85 	bl	8000b68 <__aeabi_dcmpgt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d145      	bne.n	8006eee <_dtoa_r+0x6be>
 8006e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e66:	49a5      	ldr	r1, [pc, #660]	@ (80070fc <_dtoa_r+0x8cc>)
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f7f9 fa35 	bl	80002d8 <__aeabi_dsub>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e76:	f7f9 fe59 	bl	8000b2c <__aeabi_dcmplt>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f43f aef5 	beq.w	8006c6a <_dtoa_r+0x43a>
 8006e80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006e82:	1e73      	subs	r3, r6, #1
 8006e84:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e8a:	2b30      	cmp	r3, #48	@ 0x30
 8006e8c:	d0f8      	beq.n	8006e80 <_dtoa_r+0x650>
 8006e8e:	9f04      	ldr	r7, [sp, #16]
 8006e90:	e73e      	b.n	8006d10 <_dtoa_r+0x4e0>
 8006e92:	4b9b      	ldr	r3, [pc, #620]	@ (8007100 <_dtoa_r+0x8d0>)
 8006e94:	f7f9 fbd8 	bl	8000648 <__aeabi_dmul>
 8006e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e9c:	e7bc      	b.n	8006e18 <_dtoa_r+0x5e8>
 8006e9e:	d10c      	bne.n	8006eba <_dtoa_r+0x68a>
 8006ea0:	4b98      	ldr	r3, [pc, #608]	@ (8007104 <_dtoa_r+0x8d4>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ea8:	f7f9 fbce 	bl	8000648 <__aeabi_dmul>
 8006eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb0:	f7f9 fe50 	bl	8000b54 <__aeabi_dcmpge>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f000 8157 	beq.w	8007168 <_dtoa_r+0x938>
 8006eba:	2400      	movs	r4, #0
 8006ebc:	4625      	mov	r5, r4
 8006ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	4656      	mov	r6, sl
 8006ec6:	2700      	movs	r7, #0
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4658      	mov	r0, fp
 8006ecc:	f000 fbb4 	bl	8007638 <_Bfree>
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	d0dc      	beq.n	8006e8e <_dtoa_r+0x65e>
 8006ed4:	b12f      	cbz	r7, 8006ee2 <_dtoa_r+0x6b2>
 8006ed6:	42af      	cmp	r7, r5
 8006ed8:	d003      	beq.n	8006ee2 <_dtoa_r+0x6b2>
 8006eda:	4639      	mov	r1, r7
 8006edc:	4658      	mov	r0, fp
 8006ede:	f000 fbab 	bl	8007638 <_Bfree>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	4658      	mov	r0, fp
 8006ee6:	f000 fba7 	bl	8007638 <_Bfree>
 8006eea:	e7d0      	b.n	8006e8e <_dtoa_r+0x65e>
 8006eec:	9704      	str	r7, [sp, #16]
 8006eee:	4633      	mov	r3, r6
 8006ef0:	461e      	mov	r6, r3
 8006ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef6:	2a39      	cmp	r2, #57	@ 0x39
 8006ef8:	d107      	bne.n	8006f0a <_dtoa_r+0x6da>
 8006efa:	459a      	cmp	sl, r3
 8006efc:	d1f8      	bne.n	8006ef0 <_dtoa_r+0x6c0>
 8006efe:	9a04      	ldr	r2, [sp, #16]
 8006f00:	3201      	adds	r2, #1
 8006f02:	9204      	str	r2, [sp, #16]
 8006f04:	2230      	movs	r2, #48	@ 0x30
 8006f06:	f88a 2000 	strb.w	r2, [sl]
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	3201      	adds	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e7bd      	b.n	8006e8e <_dtoa_r+0x65e>
 8006f12:	4b7b      	ldr	r3, [pc, #492]	@ (8007100 <_dtoa_r+0x8d0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	f7f9 fb97 	bl	8000648 <__aeabi_dmul>
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	f7f9 fdf9 	bl	8000b18 <__aeabi_dcmpeq>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f aebb 	beq.w	8006ca2 <_dtoa_r+0x472>
 8006f2c:	e6f0      	b.n	8006d10 <_dtoa_r+0x4e0>
 8006f2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	f000 80db 	beq.w	80070ec <_dtoa_r+0x8bc>
 8006f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f38:	2a01      	cmp	r2, #1
 8006f3a:	f300 80bf 	bgt.w	80070bc <_dtoa_r+0x88c>
 8006f3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	f000 80b7 	beq.w	80070b4 <_dtoa_r+0x884>
 8006f46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f4c:	4646      	mov	r6, r8
 8006f4e:	9a08      	ldr	r2, [sp, #32]
 8006f50:	2101      	movs	r1, #1
 8006f52:	441a      	add	r2, r3
 8006f54:	4658      	mov	r0, fp
 8006f56:	4498      	add	r8, r3
 8006f58:	9208      	str	r2, [sp, #32]
 8006f5a:	f000 fc21 	bl	80077a0 <__i2b>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	b15e      	cbz	r6, 8006f7a <_dtoa_r+0x74a>
 8006f62:	9b08      	ldr	r3, [sp, #32]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dd08      	ble.n	8006f7a <_dtoa_r+0x74a>
 8006f68:	42b3      	cmp	r3, r6
 8006f6a:	9a08      	ldr	r2, [sp, #32]
 8006f6c:	bfa8      	it	ge
 8006f6e:	4633      	movge	r3, r6
 8006f70:	eba8 0803 	sub.w	r8, r8, r3
 8006f74:	1af6      	subs	r6, r6, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f7c:	b1f3      	cbz	r3, 8006fbc <_dtoa_r+0x78c>
 8006f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 80b7 	beq.w	80070f4 <_dtoa_r+0x8c4>
 8006f86:	b18c      	cbz	r4, 8006fac <_dtoa_r+0x77c>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fcc7 	bl	8007920 <__pow5mult>
 8006f92:	464a      	mov	r2, r9
 8006f94:	4601      	mov	r1, r0
 8006f96:	4605      	mov	r5, r0
 8006f98:	4658      	mov	r0, fp
 8006f9a:	f000 fc17 	bl	80077cc <__multiply>
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	9004      	str	r0, [sp, #16]
 8006fa2:	4658      	mov	r0, fp
 8006fa4:	f000 fb48 	bl	8007638 <_Bfree>
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	4699      	mov	r9, r3
 8006fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fae:	1b1a      	subs	r2, r3, r4
 8006fb0:	d004      	beq.n	8006fbc <_dtoa_r+0x78c>
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4658      	mov	r0, fp
 8006fb6:	f000 fcb3 	bl	8007920 <__pow5mult>
 8006fba:	4681      	mov	r9, r0
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4658      	mov	r0, fp
 8006fc0:	f000 fbee 	bl	80077a0 <__i2b>
 8006fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 81cf 	beq.w	800736c <_dtoa_r+0xb3c>
 8006fce:	461a      	mov	r2, r3
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f000 fca4 	bl	8007920 <__pow5mult>
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	4604      	mov	r4, r0
 8006fde:	f300 8095 	bgt.w	800710c <_dtoa_r+0x8dc>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f040 8087 	bne.w	80070f8 <_dtoa_r+0x8c8>
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f040 8089 	bne.w	8007108 <_dtoa_r+0x8d8>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ffc:	0d1b      	lsrs	r3, r3, #20
 8006ffe:	051b      	lsls	r3, r3, #20
 8007000:	b12b      	cbz	r3, 800700e <_dtoa_r+0x7de>
 8007002:	9b08      	ldr	r3, [sp, #32]
 8007004:	3301      	adds	r3, #1
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	2301      	movs	r3, #1
 800700e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 81b0 	beq.w	8007378 <_dtoa_r+0xb48>
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800701e:	6918      	ldr	r0, [r3, #16]
 8007020:	f000 fb72 	bl	8007708 <__hi0bits>
 8007024:	f1c0 0020 	rsb	r0, r0, #32
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	4418      	add	r0, r3
 800702c:	f010 001f 	ands.w	r0, r0, #31
 8007030:	d077      	beq.n	8007122 <_dtoa_r+0x8f2>
 8007032:	f1c0 0320 	rsb	r3, r0, #32
 8007036:	2b04      	cmp	r3, #4
 8007038:	dd6b      	ble.n	8007112 <_dtoa_r+0x8e2>
 800703a:	9b08      	ldr	r3, [sp, #32]
 800703c:	f1c0 001c 	rsb	r0, r0, #28
 8007040:	4403      	add	r3, r0
 8007042:	4480      	add	r8, r0
 8007044:	4406      	add	r6, r0
 8007046:	9308      	str	r3, [sp, #32]
 8007048:	f1b8 0f00 	cmp.w	r8, #0
 800704c:	dd05      	ble.n	800705a <_dtoa_r+0x82a>
 800704e:	4649      	mov	r1, r9
 8007050:	4642      	mov	r2, r8
 8007052:	4658      	mov	r0, fp
 8007054:	f000 fcbe 	bl	80079d4 <__lshift>
 8007058:	4681      	mov	r9, r0
 800705a:	9b08      	ldr	r3, [sp, #32]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dd05      	ble.n	800706c <_dtoa_r+0x83c>
 8007060:	4621      	mov	r1, r4
 8007062:	461a      	mov	r2, r3
 8007064:	4658      	mov	r0, fp
 8007066:	f000 fcb5 	bl	80079d4 <__lshift>
 800706a:	4604      	mov	r4, r0
 800706c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800706e:	2b00      	cmp	r3, #0
 8007070:	d059      	beq.n	8007126 <_dtoa_r+0x8f6>
 8007072:	4621      	mov	r1, r4
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fd19 	bl	8007aac <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	da53      	bge.n	8007126 <_dtoa_r+0x8f6>
 800707e:	1e7b      	subs	r3, r7, #1
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	4649      	mov	r1, r9
 8007084:	2300      	movs	r3, #0
 8007086:	220a      	movs	r2, #10
 8007088:	4658      	mov	r0, fp
 800708a:	f000 faf7 	bl	800767c <__multadd>
 800708e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007090:	4681      	mov	r9, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8172 	beq.w	800737c <_dtoa_r+0xb4c>
 8007098:	2300      	movs	r3, #0
 800709a:	4629      	mov	r1, r5
 800709c:	220a      	movs	r2, #10
 800709e:	4658      	mov	r0, fp
 80070a0:	f000 faec 	bl	800767c <__multadd>
 80070a4:	9b00      	ldr	r3, [sp, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	4605      	mov	r5, r0
 80070aa:	dc67      	bgt.n	800717c <_dtoa_r+0x94c>
 80070ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	dc41      	bgt.n	8007136 <_dtoa_r+0x906>
 80070b2:	e063      	b.n	800717c <_dtoa_r+0x94c>
 80070b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070ba:	e746      	b.n	8006f4a <_dtoa_r+0x71a>
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	1e5c      	subs	r4, r3, #1
 80070c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	bfbf      	itttt	lt
 80070c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80070c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80070ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80070cc:	1ae3      	sublt	r3, r4, r3
 80070ce:	bfb4      	ite	lt
 80070d0:	18d2      	addlt	r2, r2, r3
 80070d2:	1b1c      	subge	r4, r3, r4
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	bfbc      	itt	lt
 80070d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80070da:	2400      	movlt	r4, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bfb5      	itete	lt
 80070e0:	eba8 0603 	sublt.w	r6, r8, r3
 80070e4:	9b07      	ldrge	r3, [sp, #28]
 80070e6:	2300      	movlt	r3, #0
 80070e8:	4646      	movge	r6, r8
 80070ea:	e730      	b.n	8006f4e <_dtoa_r+0x71e>
 80070ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070f0:	4646      	mov	r6, r8
 80070f2:	e735      	b.n	8006f60 <_dtoa_r+0x730>
 80070f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f6:	e75c      	b.n	8006fb2 <_dtoa_r+0x782>
 80070f8:	2300      	movs	r3, #0
 80070fa:	e788      	b.n	800700e <_dtoa_r+0x7de>
 80070fc:	3fe00000 	.word	0x3fe00000
 8007100:	40240000 	.word	0x40240000
 8007104:	40140000 	.word	0x40140000
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	e780      	b.n	800700e <_dtoa_r+0x7de>
 800710c:	2300      	movs	r3, #0
 800710e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007110:	e782      	b.n	8007018 <_dtoa_r+0x7e8>
 8007112:	d099      	beq.n	8007048 <_dtoa_r+0x818>
 8007114:	9a08      	ldr	r2, [sp, #32]
 8007116:	331c      	adds	r3, #28
 8007118:	441a      	add	r2, r3
 800711a:	4498      	add	r8, r3
 800711c:	441e      	add	r6, r3
 800711e:	9208      	str	r2, [sp, #32]
 8007120:	e792      	b.n	8007048 <_dtoa_r+0x818>
 8007122:	4603      	mov	r3, r0
 8007124:	e7f6      	b.n	8007114 <_dtoa_r+0x8e4>
 8007126:	9b07      	ldr	r3, [sp, #28]
 8007128:	9704      	str	r7, [sp, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dc20      	bgt.n	8007170 <_dtoa_r+0x940>
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007132:	2b02      	cmp	r3, #2
 8007134:	dd1e      	ble.n	8007174 <_dtoa_r+0x944>
 8007136:	9b00      	ldr	r3, [sp, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f47f aec0 	bne.w	8006ebe <_dtoa_r+0x68e>
 800713e:	4621      	mov	r1, r4
 8007140:	2205      	movs	r2, #5
 8007142:	4658      	mov	r0, fp
 8007144:	f000 fa9a 	bl	800767c <__multadd>
 8007148:	4601      	mov	r1, r0
 800714a:	4604      	mov	r4, r0
 800714c:	4648      	mov	r0, r9
 800714e:	f000 fcad 	bl	8007aac <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	f77f aeb3 	ble.w	8006ebe <_dtoa_r+0x68e>
 8007158:	4656      	mov	r6, sl
 800715a:	2331      	movs	r3, #49	@ 0x31
 800715c:	f806 3b01 	strb.w	r3, [r6], #1
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	3301      	adds	r3, #1
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	e6ae      	b.n	8006ec6 <_dtoa_r+0x696>
 8007168:	9c07      	ldr	r4, [sp, #28]
 800716a:	9704      	str	r7, [sp, #16]
 800716c:	4625      	mov	r5, r4
 800716e:	e7f3      	b.n	8007158 <_dtoa_r+0x928>
 8007170:	9b07      	ldr	r3, [sp, #28]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8104 	beq.w	8007384 <_dtoa_r+0xb54>
 800717c:	2e00      	cmp	r6, #0
 800717e:	dd05      	ble.n	800718c <_dtoa_r+0x95c>
 8007180:	4629      	mov	r1, r5
 8007182:	4632      	mov	r2, r6
 8007184:	4658      	mov	r0, fp
 8007186:	f000 fc25 	bl	80079d4 <__lshift>
 800718a:	4605      	mov	r5, r0
 800718c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d05a      	beq.n	8007248 <_dtoa_r+0xa18>
 8007192:	6869      	ldr	r1, [r5, #4]
 8007194:	4658      	mov	r0, fp
 8007196:	f000 fa0f 	bl	80075b8 <_Balloc>
 800719a:	4606      	mov	r6, r0
 800719c:	b928      	cbnz	r0, 80071aa <_dtoa_r+0x97a>
 800719e:	4b84      	ldr	r3, [pc, #528]	@ (80073b0 <_dtoa_r+0xb80>)
 80071a0:	4602      	mov	r2, r0
 80071a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80071a6:	f7ff bb5a 	b.w	800685e <_dtoa_r+0x2e>
 80071aa:	692a      	ldr	r2, [r5, #16]
 80071ac:	3202      	adds	r2, #2
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	f105 010c 	add.w	r1, r5, #12
 80071b4:	300c      	adds	r0, #12
 80071b6:	f001 f803 	bl	80081c0 <memcpy>
 80071ba:	2201      	movs	r2, #1
 80071bc:	4631      	mov	r1, r6
 80071be:	4658      	mov	r0, fp
 80071c0:	f000 fc08 	bl	80079d4 <__lshift>
 80071c4:	f10a 0301 	add.w	r3, sl, #1
 80071c8:	9307      	str	r3, [sp, #28]
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	4453      	add	r3, sl
 80071ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	462f      	mov	r7, r5
 80071d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80071da:	4605      	mov	r5, r0
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	4621      	mov	r1, r4
 80071e0:	3b01      	subs	r3, #1
 80071e2:	4648      	mov	r0, r9
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	f7ff fa9a 	bl	800671e <quorem>
 80071ea:	4639      	mov	r1, r7
 80071ec:	9002      	str	r0, [sp, #8]
 80071ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071f2:	4648      	mov	r0, r9
 80071f4:	f000 fc5a 	bl	8007aac <__mcmp>
 80071f8:	462a      	mov	r2, r5
 80071fa:	9008      	str	r0, [sp, #32]
 80071fc:	4621      	mov	r1, r4
 80071fe:	4658      	mov	r0, fp
 8007200:	f000 fc70 	bl	8007ae4 <__mdiff>
 8007204:	68c2      	ldr	r2, [r0, #12]
 8007206:	4606      	mov	r6, r0
 8007208:	bb02      	cbnz	r2, 800724c <_dtoa_r+0xa1c>
 800720a:	4601      	mov	r1, r0
 800720c:	4648      	mov	r0, r9
 800720e:	f000 fc4d 	bl	8007aac <__mcmp>
 8007212:	4602      	mov	r2, r0
 8007214:	4631      	mov	r1, r6
 8007216:	4658      	mov	r0, fp
 8007218:	920e      	str	r2, [sp, #56]	@ 0x38
 800721a:	f000 fa0d 	bl	8007638 <_Bfree>
 800721e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007222:	9e07      	ldr	r6, [sp, #28]
 8007224:	ea43 0102 	orr.w	r1, r3, r2
 8007228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722a:	4319      	orrs	r1, r3
 800722c:	d110      	bne.n	8007250 <_dtoa_r+0xa20>
 800722e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007232:	d029      	beq.n	8007288 <_dtoa_r+0xa58>
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd02      	ble.n	8007240 <_dtoa_r+0xa10>
 800723a:	9b02      	ldr	r3, [sp, #8]
 800723c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	f883 8000 	strb.w	r8, [r3]
 8007246:	e63f      	b.n	8006ec8 <_dtoa_r+0x698>
 8007248:	4628      	mov	r0, r5
 800724a:	e7bb      	b.n	80071c4 <_dtoa_r+0x994>
 800724c:	2201      	movs	r2, #1
 800724e:	e7e1      	b.n	8007214 <_dtoa_r+0x9e4>
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	db04      	blt.n	8007260 <_dtoa_r+0xa30>
 8007256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007258:	430b      	orrs	r3, r1
 800725a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800725c:	430b      	orrs	r3, r1
 800725e:	d120      	bne.n	80072a2 <_dtoa_r+0xa72>
 8007260:	2a00      	cmp	r2, #0
 8007262:	dded      	ble.n	8007240 <_dtoa_r+0xa10>
 8007264:	4649      	mov	r1, r9
 8007266:	2201      	movs	r2, #1
 8007268:	4658      	mov	r0, fp
 800726a:	f000 fbb3 	bl	80079d4 <__lshift>
 800726e:	4621      	mov	r1, r4
 8007270:	4681      	mov	r9, r0
 8007272:	f000 fc1b 	bl	8007aac <__mcmp>
 8007276:	2800      	cmp	r0, #0
 8007278:	dc03      	bgt.n	8007282 <_dtoa_r+0xa52>
 800727a:	d1e1      	bne.n	8007240 <_dtoa_r+0xa10>
 800727c:	f018 0f01 	tst.w	r8, #1
 8007280:	d0de      	beq.n	8007240 <_dtoa_r+0xa10>
 8007282:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007286:	d1d8      	bne.n	800723a <_dtoa_r+0xa0a>
 8007288:	9a00      	ldr	r2, [sp, #0]
 800728a:	2339      	movs	r3, #57	@ 0x39
 800728c:	7013      	strb	r3, [r2, #0]
 800728e:	4633      	mov	r3, r6
 8007290:	461e      	mov	r6, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007298:	2a39      	cmp	r2, #57	@ 0x39
 800729a:	d052      	beq.n	8007342 <_dtoa_r+0xb12>
 800729c:	3201      	adds	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e612      	b.n	8006ec8 <_dtoa_r+0x698>
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	dd07      	ble.n	80072b6 <_dtoa_r+0xa86>
 80072a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072aa:	d0ed      	beq.n	8007288 <_dtoa_r+0xa58>
 80072ac:	9a00      	ldr	r2, [sp, #0]
 80072ae:	f108 0301 	add.w	r3, r8, #1
 80072b2:	7013      	strb	r3, [r2, #0]
 80072b4:	e608      	b.n	8006ec8 <_dtoa_r+0x698>
 80072b6:	9b07      	ldr	r3, [sp, #28]
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80072be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d028      	beq.n	8007316 <_dtoa_r+0xae6>
 80072c4:	4649      	mov	r1, r9
 80072c6:	2300      	movs	r3, #0
 80072c8:	220a      	movs	r2, #10
 80072ca:	4658      	mov	r0, fp
 80072cc:	f000 f9d6 	bl	800767c <__multadd>
 80072d0:	42af      	cmp	r7, r5
 80072d2:	4681      	mov	r9, r0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	f04f 020a 	mov.w	r2, #10
 80072dc:	4639      	mov	r1, r7
 80072de:	4658      	mov	r0, fp
 80072e0:	d107      	bne.n	80072f2 <_dtoa_r+0xac2>
 80072e2:	f000 f9cb 	bl	800767c <__multadd>
 80072e6:	4607      	mov	r7, r0
 80072e8:	4605      	mov	r5, r0
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	3301      	adds	r3, #1
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	e774      	b.n	80071dc <_dtoa_r+0x9ac>
 80072f2:	f000 f9c3 	bl	800767c <__multadd>
 80072f6:	4629      	mov	r1, r5
 80072f8:	4607      	mov	r7, r0
 80072fa:	2300      	movs	r3, #0
 80072fc:	220a      	movs	r2, #10
 80072fe:	4658      	mov	r0, fp
 8007300:	f000 f9bc 	bl	800767c <__multadd>
 8007304:	4605      	mov	r5, r0
 8007306:	e7f0      	b.n	80072ea <_dtoa_r+0xaba>
 8007308:	9b00      	ldr	r3, [sp, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfcc      	ite	gt
 800730e:	461e      	movgt	r6, r3
 8007310:	2601      	movle	r6, #1
 8007312:	4456      	add	r6, sl
 8007314:	2700      	movs	r7, #0
 8007316:	4649      	mov	r1, r9
 8007318:	2201      	movs	r2, #1
 800731a:	4658      	mov	r0, fp
 800731c:	f000 fb5a 	bl	80079d4 <__lshift>
 8007320:	4621      	mov	r1, r4
 8007322:	4681      	mov	r9, r0
 8007324:	f000 fbc2 	bl	8007aac <__mcmp>
 8007328:	2800      	cmp	r0, #0
 800732a:	dcb0      	bgt.n	800728e <_dtoa_r+0xa5e>
 800732c:	d102      	bne.n	8007334 <_dtoa_r+0xb04>
 800732e:	f018 0f01 	tst.w	r8, #1
 8007332:	d1ac      	bne.n	800728e <_dtoa_r+0xa5e>
 8007334:	4633      	mov	r3, r6
 8007336:	461e      	mov	r6, r3
 8007338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800733c:	2a30      	cmp	r2, #48	@ 0x30
 800733e:	d0fa      	beq.n	8007336 <_dtoa_r+0xb06>
 8007340:	e5c2      	b.n	8006ec8 <_dtoa_r+0x698>
 8007342:	459a      	cmp	sl, r3
 8007344:	d1a4      	bne.n	8007290 <_dtoa_r+0xa60>
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	3301      	adds	r3, #1
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	2331      	movs	r3, #49	@ 0x31
 800734e:	f88a 3000 	strb.w	r3, [sl]
 8007352:	e5b9      	b.n	8006ec8 <_dtoa_r+0x698>
 8007354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007356:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80073b4 <_dtoa_r+0xb84>
 800735a:	b11b      	cbz	r3, 8007364 <_dtoa_r+0xb34>
 800735c:	f10a 0308 	add.w	r3, sl, #8
 8007360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	4650      	mov	r0, sl
 8007366:	b019      	add	sp, #100	@ 0x64
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800736e:	2b01      	cmp	r3, #1
 8007370:	f77f ae37 	ble.w	8006fe2 <_dtoa_r+0x7b2>
 8007374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007376:	930a      	str	r3, [sp, #40]	@ 0x28
 8007378:	2001      	movs	r0, #1
 800737a:	e655      	b.n	8007028 <_dtoa_r+0x7f8>
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f77f aed6 	ble.w	8007130 <_dtoa_r+0x900>
 8007384:	4656      	mov	r6, sl
 8007386:	4621      	mov	r1, r4
 8007388:	4648      	mov	r0, r9
 800738a:	f7ff f9c8 	bl	800671e <quorem>
 800738e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007392:	f806 8b01 	strb.w	r8, [r6], #1
 8007396:	9b00      	ldr	r3, [sp, #0]
 8007398:	eba6 020a 	sub.w	r2, r6, sl
 800739c:	4293      	cmp	r3, r2
 800739e:	ddb3      	ble.n	8007308 <_dtoa_r+0xad8>
 80073a0:	4649      	mov	r1, r9
 80073a2:	2300      	movs	r3, #0
 80073a4:	220a      	movs	r2, #10
 80073a6:	4658      	mov	r0, fp
 80073a8:	f000 f968 	bl	800767c <__multadd>
 80073ac:	4681      	mov	r9, r0
 80073ae:	e7ea      	b.n	8007386 <_dtoa_r+0xb56>
 80073b0:	0800846c 	.word	0x0800846c
 80073b4:	080083f0 	.word	0x080083f0

080073b8 <_free_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4605      	mov	r5, r0
 80073bc:	2900      	cmp	r1, #0
 80073be:	d041      	beq.n	8007444 <_free_r+0x8c>
 80073c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c4:	1f0c      	subs	r4, r1, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfb8      	it	lt
 80073ca:	18e4      	addlt	r4, r4, r3
 80073cc:	f000 f8e8 	bl	80075a0 <__malloc_lock>
 80073d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007448 <_free_r+0x90>)
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	b933      	cbnz	r3, 80073e4 <_free_r+0x2c>
 80073d6:	6063      	str	r3, [r4, #4]
 80073d8:	6014      	str	r4, [r2, #0]
 80073da:	4628      	mov	r0, r5
 80073dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e0:	f000 b8e4 	b.w	80075ac <__malloc_unlock>
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	d908      	bls.n	80073fa <_free_r+0x42>
 80073e8:	6820      	ldr	r0, [r4, #0]
 80073ea:	1821      	adds	r1, r4, r0
 80073ec:	428b      	cmp	r3, r1
 80073ee:	bf01      	itttt	eq
 80073f0:	6819      	ldreq	r1, [r3, #0]
 80073f2:	685b      	ldreq	r3, [r3, #4]
 80073f4:	1809      	addeq	r1, r1, r0
 80073f6:	6021      	streq	r1, [r4, #0]
 80073f8:	e7ed      	b.n	80073d6 <_free_r+0x1e>
 80073fa:	461a      	mov	r2, r3
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	b10b      	cbz	r3, 8007404 <_free_r+0x4c>
 8007400:	42a3      	cmp	r3, r4
 8007402:	d9fa      	bls.n	80073fa <_free_r+0x42>
 8007404:	6811      	ldr	r1, [r2, #0]
 8007406:	1850      	adds	r0, r2, r1
 8007408:	42a0      	cmp	r0, r4
 800740a:	d10b      	bne.n	8007424 <_free_r+0x6c>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	4401      	add	r1, r0
 8007410:	1850      	adds	r0, r2, r1
 8007412:	4283      	cmp	r3, r0
 8007414:	6011      	str	r1, [r2, #0]
 8007416:	d1e0      	bne.n	80073da <_free_r+0x22>
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	6053      	str	r3, [r2, #4]
 800741e:	4408      	add	r0, r1
 8007420:	6010      	str	r0, [r2, #0]
 8007422:	e7da      	b.n	80073da <_free_r+0x22>
 8007424:	d902      	bls.n	800742c <_free_r+0x74>
 8007426:	230c      	movs	r3, #12
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	e7d6      	b.n	80073da <_free_r+0x22>
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	1821      	adds	r1, r4, r0
 8007430:	428b      	cmp	r3, r1
 8007432:	bf04      	itt	eq
 8007434:	6819      	ldreq	r1, [r3, #0]
 8007436:	685b      	ldreq	r3, [r3, #4]
 8007438:	6063      	str	r3, [r4, #4]
 800743a:	bf04      	itt	eq
 800743c:	1809      	addeq	r1, r1, r0
 800743e:	6021      	streq	r1, [r4, #0]
 8007440:	6054      	str	r4, [r2, #4]
 8007442:	e7ca      	b.n	80073da <_free_r+0x22>
 8007444:	bd38      	pop	{r3, r4, r5, pc}
 8007446:	bf00      	nop
 8007448:	200004fc 	.word	0x200004fc

0800744c <malloc>:
 800744c:	4b02      	ldr	r3, [pc, #8]	@ (8007458 <malloc+0xc>)
 800744e:	4601      	mov	r1, r0
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	f000 b825 	b.w	80074a0 <_malloc_r>
 8007456:	bf00      	nop
 8007458:	20000018 	.word	0x20000018

0800745c <sbrk_aligned>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4e0f      	ldr	r6, [pc, #60]	@ (800749c <sbrk_aligned+0x40>)
 8007460:	460c      	mov	r4, r1
 8007462:	6831      	ldr	r1, [r6, #0]
 8007464:	4605      	mov	r5, r0
 8007466:	b911      	cbnz	r1, 800746e <sbrk_aligned+0x12>
 8007468:	f000 fe9a 	bl	80081a0 <_sbrk_r>
 800746c:	6030      	str	r0, [r6, #0]
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 fe95 	bl	80081a0 <_sbrk_r>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d103      	bne.n	8007482 <sbrk_aligned+0x26>
 800747a:	f04f 34ff 	mov.w	r4, #4294967295
 800747e:	4620      	mov	r0, r4
 8007480:	bd70      	pop	{r4, r5, r6, pc}
 8007482:	1cc4      	adds	r4, r0, #3
 8007484:	f024 0403 	bic.w	r4, r4, #3
 8007488:	42a0      	cmp	r0, r4
 800748a:	d0f8      	beq.n	800747e <sbrk_aligned+0x22>
 800748c:	1a21      	subs	r1, r4, r0
 800748e:	4628      	mov	r0, r5
 8007490:	f000 fe86 	bl	80081a0 <_sbrk_r>
 8007494:	3001      	adds	r0, #1
 8007496:	d1f2      	bne.n	800747e <sbrk_aligned+0x22>
 8007498:	e7ef      	b.n	800747a <sbrk_aligned+0x1e>
 800749a:	bf00      	nop
 800749c:	200004f8 	.word	0x200004f8

080074a0 <_malloc_r>:
 80074a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a4:	1ccd      	adds	r5, r1, #3
 80074a6:	f025 0503 	bic.w	r5, r5, #3
 80074aa:	3508      	adds	r5, #8
 80074ac:	2d0c      	cmp	r5, #12
 80074ae:	bf38      	it	cc
 80074b0:	250c      	movcc	r5, #12
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	4606      	mov	r6, r0
 80074b6:	db01      	blt.n	80074bc <_malloc_r+0x1c>
 80074b8:	42a9      	cmp	r1, r5
 80074ba:	d904      	bls.n	80074c6 <_malloc_r+0x26>
 80074bc:	230c      	movs	r3, #12
 80074be:	6033      	str	r3, [r6, #0]
 80074c0:	2000      	movs	r0, #0
 80074c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800759c <_malloc_r+0xfc>
 80074ca:	f000 f869 	bl	80075a0 <__malloc_lock>
 80074ce:	f8d8 3000 	ldr.w	r3, [r8]
 80074d2:	461c      	mov	r4, r3
 80074d4:	bb44      	cbnz	r4, 8007528 <_malloc_r+0x88>
 80074d6:	4629      	mov	r1, r5
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff ffbf 	bl	800745c <sbrk_aligned>
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	4604      	mov	r4, r0
 80074e2:	d158      	bne.n	8007596 <_malloc_r+0xf6>
 80074e4:	f8d8 4000 	ldr.w	r4, [r8]
 80074e8:	4627      	mov	r7, r4
 80074ea:	2f00      	cmp	r7, #0
 80074ec:	d143      	bne.n	8007576 <_malloc_r+0xd6>
 80074ee:	2c00      	cmp	r4, #0
 80074f0:	d04b      	beq.n	800758a <_malloc_r+0xea>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	4639      	mov	r1, r7
 80074f6:	4630      	mov	r0, r6
 80074f8:	eb04 0903 	add.w	r9, r4, r3
 80074fc:	f000 fe50 	bl	80081a0 <_sbrk_r>
 8007500:	4581      	cmp	r9, r0
 8007502:	d142      	bne.n	800758a <_malloc_r+0xea>
 8007504:	6821      	ldr	r1, [r4, #0]
 8007506:	1a6d      	subs	r5, r5, r1
 8007508:	4629      	mov	r1, r5
 800750a:	4630      	mov	r0, r6
 800750c:	f7ff ffa6 	bl	800745c <sbrk_aligned>
 8007510:	3001      	adds	r0, #1
 8007512:	d03a      	beq.n	800758a <_malloc_r+0xea>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	442b      	add	r3, r5
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	f8d8 3000 	ldr.w	r3, [r8]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	bb62      	cbnz	r2, 800757c <_malloc_r+0xdc>
 8007522:	f8c8 7000 	str.w	r7, [r8]
 8007526:	e00f      	b.n	8007548 <_malloc_r+0xa8>
 8007528:	6822      	ldr	r2, [r4, #0]
 800752a:	1b52      	subs	r2, r2, r5
 800752c:	d420      	bmi.n	8007570 <_malloc_r+0xd0>
 800752e:	2a0b      	cmp	r2, #11
 8007530:	d917      	bls.n	8007562 <_malloc_r+0xc2>
 8007532:	1961      	adds	r1, r4, r5
 8007534:	42a3      	cmp	r3, r4
 8007536:	6025      	str	r5, [r4, #0]
 8007538:	bf18      	it	ne
 800753a:	6059      	strne	r1, [r3, #4]
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	bf08      	it	eq
 8007540:	f8c8 1000 	streq.w	r1, [r8]
 8007544:	5162      	str	r2, [r4, r5]
 8007546:	604b      	str	r3, [r1, #4]
 8007548:	4630      	mov	r0, r6
 800754a:	f000 f82f 	bl	80075ac <__malloc_unlock>
 800754e:	f104 000b 	add.w	r0, r4, #11
 8007552:	1d23      	adds	r3, r4, #4
 8007554:	f020 0007 	bic.w	r0, r0, #7
 8007558:	1ac2      	subs	r2, r0, r3
 800755a:	bf1c      	itt	ne
 800755c:	1a1b      	subne	r3, r3, r0
 800755e:	50a3      	strne	r3, [r4, r2]
 8007560:	e7af      	b.n	80074c2 <_malloc_r+0x22>
 8007562:	6862      	ldr	r2, [r4, #4]
 8007564:	42a3      	cmp	r3, r4
 8007566:	bf0c      	ite	eq
 8007568:	f8c8 2000 	streq.w	r2, [r8]
 800756c:	605a      	strne	r2, [r3, #4]
 800756e:	e7eb      	b.n	8007548 <_malloc_r+0xa8>
 8007570:	4623      	mov	r3, r4
 8007572:	6864      	ldr	r4, [r4, #4]
 8007574:	e7ae      	b.n	80074d4 <_malloc_r+0x34>
 8007576:	463c      	mov	r4, r7
 8007578:	687f      	ldr	r7, [r7, #4]
 800757a:	e7b6      	b.n	80074ea <_malloc_r+0x4a>
 800757c:	461a      	mov	r2, r3
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	42a3      	cmp	r3, r4
 8007582:	d1fb      	bne.n	800757c <_malloc_r+0xdc>
 8007584:	2300      	movs	r3, #0
 8007586:	6053      	str	r3, [r2, #4]
 8007588:	e7de      	b.n	8007548 <_malloc_r+0xa8>
 800758a:	230c      	movs	r3, #12
 800758c:	6033      	str	r3, [r6, #0]
 800758e:	4630      	mov	r0, r6
 8007590:	f000 f80c 	bl	80075ac <__malloc_unlock>
 8007594:	e794      	b.n	80074c0 <_malloc_r+0x20>
 8007596:	6005      	str	r5, [r0, #0]
 8007598:	e7d6      	b.n	8007548 <_malloc_r+0xa8>
 800759a:	bf00      	nop
 800759c:	200004fc 	.word	0x200004fc

080075a0 <__malloc_lock>:
 80075a0:	4801      	ldr	r0, [pc, #4]	@ (80075a8 <__malloc_lock+0x8>)
 80075a2:	f7ff b8ba 	b.w	800671a <__retarget_lock_acquire_recursive>
 80075a6:	bf00      	nop
 80075a8:	200004f4 	.word	0x200004f4

080075ac <__malloc_unlock>:
 80075ac:	4801      	ldr	r0, [pc, #4]	@ (80075b4 <__malloc_unlock+0x8>)
 80075ae:	f7ff b8b5 	b.w	800671c <__retarget_lock_release_recursive>
 80075b2:	bf00      	nop
 80075b4:	200004f4 	.word	0x200004f4

080075b8 <_Balloc>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	69c6      	ldr	r6, [r0, #28]
 80075bc:	4604      	mov	r4, r0
 80075be:	460d      	mov	r5, r1
 80075c0:	b976      	cbnz	r6, 80075e0 <_Balloc+0x28>
 80075c2:	2010      	movs	r0, #16
 80075c4:	f7ff ff42 	bl	800744c <malloc>
 80075c8:	4602      	mov	r2, r0
 80075ca:	61e0      	str	r0, [r4, #28]
 80075cc:	b920      	cbnz	r0, 80075d8 <_Balloc+0x20>
 80075ce:	4b18      	ldr	r3, [pc, #96]	@ (8007630 <_Balloc+0x78>)
 80075d0:	4818      	ldr	r0, [pc, #96]	@ (8007634 <_Balloc+0x7c>)
 80075d2:	216b      	movs	r1, #107	@ 0x6b
 80075d4:	f000 fe02 	bl	80081dc <__assert_func>
 80075d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075dc:	6006      	str	r6, [r0, #0]
 80075de:	60c6      	str	r6, [r0, #12]
 80075e0:	69e6      	ldr	r6, [r4, #28]
 80075e2:	68f3      	ldr	r3, [r6, #12]
 80075e4:	b183      	cbz	r3, 8007608 <_Balloc+0x50>
 80075e6:	69e3      	ldr	r3, [r4, #28]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075ee:	b9b8      	cbnz	r0, 8007620 <_Balloc+0x68>
 80075f0:	2101      	movs	r1, #1
 80075f2:	fa01 f605 	lsl.w	r6, r1, r5
 80075f6:	1d72      	adds	r2, r6, #5
 80075f8:	0092      	lsls	r2, r2, #2
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 fe0c 	bl	8008218 <_calloc_r>
 8007600:	b160      	cbz	r0, 800761c <_Balloc+0x64>
 8007602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007606:	e00e      	b.n	8007626 <_Balloc+0x6e>
 8007608:	2221      	movs	r2, #33	@ 0x21
 800760a:	2104      	movs	r1, #4
 800760c:	4620      	mov	r0, r4
 800760e:	f000 fe03 	bl	8008218 <_calloc_r>
 8007612:	69e3      	ldr	r3, [r4, #28]
 8007614:	60f0      	str	r0, [r6, #12]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e4      	bne.n	80075e6 <_Balloc+0x2e>
 800761c:	2000      	movs	r0, #0
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	6802      	ldr	r2, [r0, #0]
 8007622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007626:	2300      	movs	r3, #0
 8007628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800762c:	e7f7      	b.n	800761e <_Balloc+0x66>
 800762e:	bf00      	nop
 8007630:	080083fd 	.word	0x080083fd
 8007634:	0800847d 	.word	0x0800847d

08007638 <_Bfree>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	69c6      	ldr	r6, [r0, #28]
 800763c:	4605      	mov	r5, r0
 800763e:	460c      	mov	r4, r1
 8007640:	b976      	cbnz	r6, 8007660 <_Bfree+0x28>
 8007642:	2010      	movs	r0, #16
 8007644:	f7ff ff02 	bl	800744c <malloc>
 8007648:	4602      	mov	r2, r0
 800764a:	61e8      	str	r0, [r5, #28]
 800764c:	b920      	cbnz	r0, 8007658 <_Bfree+0x20>
 800764e:	4b09      	ldr	r3, [pc, #36]	@ (8007674 <_Bfree+0x3c>)
 8007650:	4809      	ldr	r0, [pc, #36]	@ (8007678 <_Bfree+0x40>)
 8007652:	218f      	movs	r1, #143	@ 0x8f
 8007654:	f000 fdc2 	bl	80081dc <__assert_func>
 8007658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800765c:	6006      	str	r6, [r0, #0]
 800765e:	60c6      	str	r6, [r0, #12]
 8007660:	b13c      	cbz	r4, 8007672 <_Bfree+0x3a>
 8007662:	69eb      	ldr	r3, [r5, #28]
 8007664:	6862      	ldr	r2, [r4, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800766c:	6021      	str	r1, [r4, #0]
 800766e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	080083fd 	.word	0x080083fd
 8007678:	0800847d 	.word	0x0800847d

0800767c <__multadd>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	690d      	ldr	r5, [r1, #16]
 8007682:	4607      	mov	r7, r0
 8007684:	460c      	mov	r4, r1
 8007686:	461e      	mov	r6, r3
 8007688:	f101 0c14 	add.w	ip, r1, #20
 800768c:	2000      	movs	r0, #0
 800768e:	f8dc 3000 	ldr.w	r3, [ip]
 8007692:	b299      	uxth	r1, r3
 8007694:	fb02 6101 	mla	r1, r2, r1, r6
 8007698:	0c1e      	lsrs	r6, r3, #16
 800769a:	0c0b      	lsrs	r3, r1, #16
 800769c:	fb02 3306 	mla	r3, r2, r6, r3
 80076a0:	b289      	uxth	r1, r1
 80076a2:	3001      	adds	r0, #1
 80076a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076a8:	4285      	cmp	r5, r0
 80076aa:	f84c 1b04 	str.w	r1, [ip], #4
 80076ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076b2:	dcec      	bgt.n	800768e <__multadd+0x12>
 80076b4:	b30e      	cbz	r6, 80076fa <__multadd+0x7e>
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dc19      	bgt.n	80076f0 <__multadd+0x74>
 80076bc:	6861      	ldr	r1, [r4, #4]
 80076be:	4638      	mov	r0, r7
 80076c0:	3101      	adds	r1, #1
 80076c2:	f7ff ff79 	bl	80075b8 <_Balloc>
 80076c6:	4680      	mov	r8, r0
 80076c8:	b928      	cbnz	r0, 80076d6 <__multadd+0x5a>
 80076ca:	4602      	mov	r2, r0
 80076cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <__multadd+0x84>)
 80076ce:	480d      	ldr	r0, [pc, #52]	@ (8007704 <__multadd+0x88>)
 80076d0:	21ba      	movs	r1, #186	@ 0xba
 80076d2:	f000 fd83 	bl	80081dc <__assert_func>
 80076d6:	6922      	ldr	r2, [r4, #16]
 80076d8:	3202      	adds	r2, #2
 80076da:	f104 010c 	add.w	r1, r4, #12
 80076de:	0092      	lsls	r2, r2, #2
 80076e0:	300c      	adds	r0, #12
 80076e2:	f000 fd6d 	bl	80081c0 <memcpy>
 80076e6:	4621      	mov	r1, r4
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7ff ffa5 	bl	8007638 <_Bfree>
 80076ee:	4644      	mov	r4, r8
 80076f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076f4:	3501      	adds	r5, #1
 80076f6:	615e      	str	r6, [r3, #20]
 80076f8:	6125      	str	r5, [r4, #16]
 80076fa:	4620      	mov	r0, r4
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	0800846c 	.word	0x0800846c
 8007704:	0800847d 	.word	0x0800847d

08007708 <__hi0bits>:
 8007708:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800770c:	4603      	mov	r3, r0
 800770e:	bf36      	itet	cc
 8007710:	0403      	lslcc	r3, r0, #16
 8007712:	2000      	movcs	r0, #0
 8007714:	2010      	movcc	r0, #16
 8007716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800771a:	bf3c      	itt	cc
 800771c:	021b      	lslcc	r3, r3, #8
 800771e:	3008      	addcc	r0, #8
 8007720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007724:	bf3c      	itt	cc
 8007726:	011b      	lslcc	r3, r3, #4
 8007728:	3004      	addcc	r0, #4
 800772a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772e:	bf3c      	itt	cc
 8007730:	009b      	lslcc	r3, r3, #2
 8007732:	3002      	addcc	r0, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	db05      	blt.n	8007744 <__hi0bits+0x3c>
 8007738:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800773c:	f100 0001 	add.w	r0, r0, #1
 8007740:	bf08      	it	eq
 8007742:	2020      	moveq	r0, #32
 8007744:	4770      	bx	lr

08007746 <__lo0bits>:
 8007746:	6803      	ldr	r3, [r0, #0]
 8007748:	4602      	mov	r2, r0
 800774a:	f013 0007 	ands.w	r0, r3, #7
 800774e:	d00b      	beq.n	8007768 <__lo0bits+0x22>
 8007750:	07d9      	lsls	r1, r3, #31
 8007752:	d421      	bmi.n	8007798 <__lo0bits+0x52>
 8007754:	0798      	lsls	r0, r3, #30
 8007756:	bf49      	itett	mi
 8007758:	085b      	lsrmi	r3, r3, #1
 800775a:	089b      	lsrpl	r3, r3, #2
 800775c:	2001      	movmi	r0, #1
 800775e:	6013      	strmi	r3, [r2, #0]
 8007760:	bf5c      	itt	pl
 8007762:	6013      	strpl	r3, [r2, #0]
 8007764:	2002      	movpl	r0, #2
 8007766:	4770      	bx	lr
 8007768:	b299      	uxth	r1, r3
 800776a:	b909      	cbnz	r1, 8007770 <__lo0bits+0x2a>
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	2010      	movs	r0, #16
 8007770:	b2d9      	uxtb	r1, r3
 8007772:	b909      	cbnz	r1, 8007778 <__lo0bits+0x32>
 8007774:	3008      	adds	r0, #8
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	0719      	lsls	r1, r3, #28
 800777a:	bf04      	itt	eq
 800777c:	091b      	lsreq	r3, r3, #4
 800777e:	3004      	addeq	r0, #4
 8007780:	0799      	lsls	r1, r3, #30
 8007782:	bf04      	itt	eq
 8007784:	089b      	lsreq	r3, r3, #2
 8007786:	3002      	addeq	r0, #2
 8007788:	07d9      	lsls	r1, r3, #31
 800778a:	d403      	bmi.n	8007794 <__lo0bits+0x4e>
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	f100 0001 	add.w	r0, r0, #1
 8007792:	d003      	beq.n	800779c <__lo0bits+0x56>
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	4770      	bx	lr
 8007798:	2000      	movs	r0, #0
 800779a:	4770      	bx	lr
 800779c:	2020      	movs	r0, #32
 800779e:	4770      	bx	lr

080077a0 <__i2b>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	460c      	mov	r4, r1
 80077a4:	2101      	movs	r1, #1
 80077a6:	f7ff ff07 	bl	80075b8 <_Balloc>
 80077aa:	4602      	mov	r2, r0
 80077ac:	b928      	cbnz	r0, 80077ba <__i2b+0x1a>
 80077ae:	4b05      	ldr	r3, [pc, #20]	@ (80077c4 <__i2b+0x24>)
 80077b0:	4805      	ldr	r0, [pc, #20]	@ (80077c8 <__i2b+0x28>)
 80077b2:	f240 1145 	movw	r1, #325	@ 0x145
 80077b6:	f000 fd11 	bl	80081dc <__assert_func>
 80077ba:	2301      	movs	r3, #1
 80077bc:	6144      	str	r4, [r0, #20]
 80077be:	6103      	str	r3, [r0, #16]
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	bf00      	nop
 80077c4:	0800846c 	.word	0x0800846c
 80077c8:	0800847d 	.word	0x0800847d

080077cc <__multiply>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	4614      	mov	r4, r2
 80077d2:	690a      	ldr	r2, [r1, #16]
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	bfa8      	it	ge
 80077da:	4623      	movge	r3, r4
 80077dc:	460f      	mov	r7, r1
 80077de:	bfa4      	itt	ge
 80077e0:	460c      	movge	r4, r1
 80077e2:	461f      	movge	r7, r3
 80077e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	6861      	ldr	r1, [r4, #4]
 80077f0:	eb0a 0609 	add.w	r6, sl, r9
 80077f4:	42b3      	cmp	r3, r6
 80077f6:	b085      	sub	sp, #20
 80077f8:	bfb8      	it	lt
 80077fa:	3101      	addlt	r1, #1
 80077fc:	f7ff fedc 	bl	80075b8 <_Balloc>
 8007800:	b930      	cbnz	r0, 8007810 <__multiply+0x44>
 8007802:	4602      	mov	r2, r0
 8007804:	4b44      	ldr	r3, [pc, #272]	@ (8007918 <__multiply+0x14c>)
 8007806:	4845      	ldr	r0, [pc, #276]	@ (800791c <__multiply+0x150>)
 8007808:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800780c:	f000 fce6 	bl	80081dc <__assert_func>
 8007810:	f100 0514 	add.w	r5, r0, #20
 8007814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007818:	462b      	mov	r3, r5
 800781a:	2200      	movs	r2, #0
 800781c:	4543      	cmp	r3, r8
 800781e:	d321      	bcc.n	8007864 <__multiply+0x98>
 8007820:	f107 0114 	add.w	r1, r7, #20
 8007824:	f104 0214 	add.w	r2, r4, #20
 8007828:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800782c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007830:	9302      	str	r3, [sp, #8]
 8007832:	1b13      	subs	r3, r2, r4
 8007834:	3b15      	subs	r3, #21
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	3304      	adds	r3, #4
 800783c:	f104 0715 	add.w	r7, r4, #21
 8007840:	42ba      	cmp	r2, r7
 8007842:	bf38      	it	cc
 8007844:	2304      	movcc	r3, #4
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	9103      	str	r1, [sp, #12]
 800784c:	428b      	cmp	r3, r1
 800784e:	d80c      	bhi.n	800786a <__multiply+0x9e>
 8007850:	2e00      	cmp	r6, #0
 8007852:	dd03      	ble.n	800785c <__multiply+0x90>
 8007854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05b      	beq.n	8007914 <__multiply+0x148>
 800785c:	6106      	str	r6, [r0, #16]
 800785e:	b005      	add	sp, #20
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	f843 2b04 	str.w	r2, [r3], #4
 8007868:	e7d8      	b.n	800781c <__multiply+0x50>
 800786a:	f8b1 a000 	ldrh.w	sl, [r1]
 800786e:	f1ba 0f00 	cmp.w	sl, #0
 8007872:	d024      	beq.n	80078be <__multiply+0xf2>
 8007874:	f104 0e14 	add.w	lr, r4, #20
 8007878:	46a9      	mov	r9, r5
 800787a:	f04f 0c00 	mov.w	ip, #0
 800787e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007882:	f8d9 3000 	ldr.w	r3, [r9]
 8007886:	fa1f fb87 	uxth.w	fp, r7
 800788a:	b29b      	uxth	r3, r3
 800788c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007890:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007894:	f8d9 7000 	ldr.w	r7, [r9]
 8007898:	4463      	add	r3, ip
 800789a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800789e:	fb0a c70b 	mla	r7, sl, fp, ip
 80078a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078ac:	4572      	cmp	r2, lr
 80078ae:	f849 3b04 	str.w	r3, [r9], #4
 80078b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078b6:	d8e2      	bhi.n	800787e <__multiply+0xb2>
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	f845 c003 	str.w	ip, [r5, r3]
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80078c4:	3104      	adds	r1, #4
 80078c6:	f1b9 0f00 	cmp.w	r9, #0
 80078ca:	d021      	beq.n	8007910 <__multiply+0x144>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	f104 0c14 	add.w	ip, r4, #20
 80078d2:	46ae      	mov	lr, r5
 80078d4:	f04f 0a00 	mov.w	sl, #0
 80078d8:	f8bc b000 	ldrh.w	fp, [ip]
 80078dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80078e0:	fb09 770b 	mla	r7, r9, fp, r7
 80078e4:	4457      	add	r7, sl
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078ec:	f84e 3b04 	str.w	r3, [lr], #4
 80078f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078f8:	f8be 3000 	ldrh.w	r3, [lr]
 80078fc:	fb09 330a 	mla	r3, r9, sl, r3
 8007900:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007904:	4562      	cmp	r2, ip
 8007906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800790a:	d8e5      	bhi.n	80078d8 <__multiply+0x10c>
 800790c:	9f01      	ldr	r7, [sp, #4]
 800790e:	51eb      	str	r3, [r5, r7]
 8007910:	3504      	adds	r5, #4
 8007912:	e799      	b.n	8007848 <__multiply+0x7c>
 8007914:	3e01      	subs	r6, #1
 8007916:	e79b      	b.n	8007850 <__multiply+0x84>
 8007918:	0800846c 	.word	0x0800846c
 800791c:	0800847d 	.word	0x0800847d

08007920 <__pow5mult>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4615      	mov	r5, r2
 8007926:	f012 0203 	ands.w	r2, r2, #3
 800792a:	4607      	mov	r7, r0
 800792c:	460e      	mov	r6, r1
 800792e:	d007      	beq.n	8007940 <__pow5mult+0x20>
 8007930:	4c25      	ldr	r4, [pc, #148]	@ (80079c8 <__pow5mult+0xa8>)
 8007932:	3a01      	subs	r2, #1
 8007934:	2300      	movs	r3, #0
 8007936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800793a:	f7ff fe9f 	bl	800767c <__multadd>
 800793e:	4606      	mov	r6, r0
 8007940:	10ad      	asrs	r5, r5, #2
 8007942:	d03d      	beq.n	80079c0 <__pow5mult+0xa0>
 8007944:	69fc      	ldr	r4, [r7, #28]
 8007946:	b97c      	cbnz	r4, 8007968 <__pow5mult+0x48>
 8007948:	2010      	movs	r0, #16
 800794a:	f7ff fd7f 	bl	800744c <malloc>
 800794e:	4602      	mov	r2, r0
 8007950:	61f8      	str	r0, [r7, #28]
 8007952:	b928      	cbnz	r0, 8007960 <__pow5mult+0x40>
 8007954:	4b1d      	ldr	r3, [pc, #116]	@ (80079cc <__pow5mult+0xac>)
 8007956:	481e      	ldr	r0, [pc, #120]	@ (80079d0 <__pow5mult+0xb0>)
 8007958:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800795c:	f000 fc3e 	bl	80081dc <__assert_func>
 8007960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007964:	6004      	str	r4, [r0, #0]
 8007966:	60c4      	str	r4, [r0, #12]
 8007968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800796c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007970:	b94c      	cbnz	r4, 8007986 <__pow5mult+0x66>
 8007972:	f240 2171 	movw	r1, #625	@ 0x271
 8007976:	4638      	mov	r0, r7
 8007978:	f7ff ff12 	bl	80077a0 <__i2b>
 800797c:	2300      	movs	r3, #0
 800797e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007982:	4604      	mov	r4, r0
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	f04f 0900 	mov.w	r9, #0
 800798a:	07eb      	lsls	r3, r5, #31
 800798c:	d50a      	bpl.n	80079a4 <__pow5mult+0x84>
 800798e:	4631      	mov	r1, r6
 8007990:	4622      	mov	r2, r4
 8007992:	4638      	mov	r0, r7
 8007994:	f7ff ff1a 	bl	80077cc <__multiply>
 8007998:	4631      	mov	r1, r6
 800799a:	4680      	mov	r8, r0
 800799c:	4638      	mov	r0, r7
 800799e:	f7ff fe4b 	bl	8007638 <_Bfree>
 80079a2:	4646      	mov	r6, r8
 80079a4:	106d      	asrs	r5, r5, #1
 80079a6:	d00b      	beq.n	80079c0 <__pow5mult+0xa0>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	b938      	cbnz	r0, 80079bc <__pow5mult+0x9c>
 80079ac:	4622      	mov	r2, r4
 80079ae:	4621      	mov	r1, r4
 80079b0:	4638      	mov	r0, r7
 80079b2:	f7ff ff0b 	bl	80077cc <__multiply>
 80079b6:	6020      	str	r0, [r4, #0]
 80079b8:	f8c0 9000 	str.w	r9, [r0]
 80079bc:	4604      	mov	r4, r0
 80079be:	e7e4      	b.n	800798a <__pow5mult+0x6a>
 80079c0:	4630      	mov	r0, r6
 80079c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c6:	bf00      	nop
 80079c8:	080084d8 	.word	0x080084d8
 80079cc:	080083fd 	.word	0x080083fd
 80079d0:	0800847d 	.word	0x0800847d

080079d4 <__lshift>:
 80079d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d8:	460c      	mov	r4, r1
 80079da:	6849      	ldr	r1, [r1, #4]
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079e2:	68a3      	ldr	r3, [r4, #8]
 80079e4:	4607      	mov	r7, r0
 80079e6:	4691      	mov	r9, r2
 80079e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079ec:	f108 0601 	add.w	r6, r8, #1
 80079f0:	42b3      	cmp	r3, r6
 80079f2:	db0b      	blt.n	8007a0c <__lshift+0x38>
 80079f4:	4638      	mov	r0, r7
 80079f6:	f7ff fddf 	bl	80075b8 <_Balloc>
 80079fa:	4605      	mov	r5, r0
 80079fc:	b948      	cbnz	r0, 8007a12 <__lshift+0x3e>
 80079fe:	4602      	mov	r2, r0
 8007a00:	4b28      	ldr	r3, [pc, #160]	@ (8007aa4 <__lshift+0xd0>)
 8007a02:	4829      	ldr	r0, [pc, #164]	@ (8007aa8 <__lshift+0xd4>)
 8007a04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a08:	f000 fbe8 	bl	80081dc <__assert_func>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	e7ee      	b.n	80079f0 <__lshift+0x1c>
 8007a12:	2300      	movs	r3, #0
 8007a14:	f100 0114 	add.w	r1, r0, #20
 8007a18:	f100 0210 	add.w	r2, r0, #16
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	4553      	cmp	r3, sl
 8007a20:	db33      	blt.n	8007a8a <__lshift+0xb6>
 8007a22:	6920      	ldr	r0, [r4, #16]
 8007a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a28:	f104 0314 	add.w	r3, r4, #20
 8007a2c:	f019 091f 	ands.w	r9, r9, #31
 8007a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a38:	d02b      	beq.n	8007a92 <__lshift+0xbe>
 8007a3a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a3e:	468a      	mov	sl, r1
 8007a40:	2200      	movs	r2, #0
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	fa00 f009 	lsl.w	r0, r0, r9
 8007a48:	4310      	orrs	r0, r2
 8007a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8007a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a52:	459c      	cmp	ip, r3
 8007a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a58:	d8f3      	bhi.n	8007a42 <__lshift+0x6e>
 8007a5a:	ebac 0304 	sub.w	r3, ip, r4
 8007a5e:	3b15      	subs	r3, #21
 8007a60:	f023 0303 	bic.w	r3, r3, #3
 8007a64:	3304      	adds	r3, #4
 8007a66:	f104 0015 	add.w	r0, r4, #21
 8007a6a:	4584      	cmp	ip, r0
 8007a6c:	bf38      	it	cc
 8007a6e:	2304      	movcc	r3, #4
 8007a70:	50ca      	str	r2, [r1, r3]
 8007a72:	b10a      	cbz	r2, 8007a78 <__lshift+0xa4>
 8007a74:	f108 0602 	add.w	r6, r8, #2
 8007a78:	3e01      	subs	r6, #1
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	612e      	str	r6, [r5, #16]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f7ff fdda 	bl	8007638 <_Bfree>
 8007a84:	4628      	mov	r0, r5
 8007a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a8e:	3301      	adds	r3, #1
 8007a90:	e7c5      	b.n	8007a1e <__lshift+0x4a>
 8007a92:	3904      	subs	r1, #4
 8007a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a98:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a9c:	459c      	cmp	ip, r3
 8007a9e:	d8f9      	bhi.n	8007a94 <__lshift+0xc0>
 8007aa0:	e7ea      	b.n	8007a78 <__lshift+0xa4>
 8007aa2:	bf00      	nop
 8007aa4:	0800846c 	.word	0x0800846c
 8007aa8:	0800847d 	.word	0x0800847d

08007aac <__mcmp>:
 8007aac:	690a      	ldr	r2, [r1, #16]
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6900      	ldr	r0, [r0, #16]
 8007ab2:	1a80      	subs	r0, r0, r2
 8007ab4:	b530      	push	{r4, r5, lr}
 8007ab6:	d10e      	bne.n	8007ad6 <__mcmp+0x2a>
 8007ab8:	3314      	adds	r3, #20
 8007aba:	3114      	adds	r1, #20
 8007abc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007acc:	4295      	cmp	r5, r2
 8007ace:	d003      	beq.n	8007ad8 <__mcmp+0x2c>
 8007ad0:	d205      	bcs.n	8007ade <__mcmp+0x32>
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	bd30      	pop	{r4, r5, pc}
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d3f3      	bcc.n	8007ac4 <__mcmp+0x18>
 8007adc:	e7fb      	b.n	8007ad6 <__mcmp+0x2a>
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7f9      	b.n	8007ad6 <__mcmp+0x2a>
	...

08007ae4 <__mdiff>:
 8007ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	4689      	mov	r9, r1
 8007aea:	4606      	mov	r6, r0
 8007aec:	4611      	mov	r1, r2
 8007aee:	4648      	mov	r0, r9
 8007af0:	4614      	mov	r4, r2
 8007af2:	f7ff ffdb 	bl	8007aac <__mcmp>
 8007af6:	1e05      	subs	r5, r0, #0
 8007af8:	d112      	bne.n	8007b20 <__mdiff+0x3c>
 8007afa:	4629      	mov	r1, r5
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff fd5b 	bl	80075b8 <_Balloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	b928      	cbnz	r0, 8007b12 <__mdiff+0x2e>
 8007b06:	4b3f      	ldr	r3, [pc, #252]	@ (8007c04 <__mdiff+0x120>)
 8007b08:	f240 2137 	movw	r1, #567	@ 0x237
 8007b0c:	483e      	ldr	r0, [pc, #248]	@ (8007c08 <__mdiff+0x124>)
 8007b0e:	f000 fb65 	bl	80081dc <__assert_func>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b18:	4610      	mov	r0, r2
 8007b1a:	b003      	add	sp, #12
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	bfbc      	itt	lt
 8007b22:	464b      	movlt	r3, r9
 8007b24:	46a1      	movlt	r9, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b2c:	bfba      	itte	lt
 8007b2e:	461c      	movlt	r4, r3
 8007b30:	2501      	movlt	r5, #1
 8007b32:	2500      	movge	r5, #0
 8007b34:	f7ff fd40 	bl	80075b8 <_Balloc>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	b918      	cbnz	r0, 8007b44 <__mdiff+0x60>
 8007b3c:	4b31      	ldr	r3, [pc, #196]	@ (8007c04 <__mdiff+0x120>)
 8007b3e:	f240 2145 	movw	r1, #581	@ 0x245
 8007b42:	e7e3      	b.n	8007b0c <__mdiff+0x28>
 8007b44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b48:	6926      	ldr	r6, [r4, #16]
 8007b4a:	60c5      	str	r5, [r0, #12]
 8007b4c:	f109 0310 	add.w	r3, r9, #16
 8007b50:	f109 0514 	add.w	r5, r9, #20
 8007b54:	f104 0e14 	add.w	lr, r4, #20
 8007b58:	f100 0b14 	add.w	fp, r0, #20
 8007b5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	46d9      	mov	r9, fp
 8007b68:	f04f 0c00 	mov.w	ip, #0
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	fa1f f38a 	uxth.w	r3, sl
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	b283      	uxth	r3, r0
 8007b80:	1acb      	subs	r3, r1, r3
 8007b82:	0c00      	lsrs	r0, r0, #16
 8007b84:	4463      	add	r3, ip
 8007b86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b94:	4576      	cmp	r6, lr
 8007b96:	f849 3b04 	str.w	r3, [r9], #4
 8007b9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b9e:	d8e5      	bhi.n	8007b6c <__mdiff+0x88>
 8007ba0:	1b33      	subs	r3, r6, r4
 8007ba2:	3b15      	subs	r3, #21
 8007ba4:	f023 0303 	bic.w	r3, r3, #3
 8007ba8:	3415      	adds	r4, #21
 8007baa:	3304      	adds	r3, #4
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	bf38      	it	cc
 8007bb0:	2304      	movcc	r3, #4
 8007bb2:	441d      	add	r5, r3
 8007bb4:	445b      	add	r3, fp
 8007bb6:	461e      	mov	r6, r3
 8007bb8:	462c      	mov	r4, r5
 8007bba:	4544      	cmp	r4, r8
 8007bbc:	d30e      	bcc.n	8007bdc <__mdiff+0xf8>
 8007bbe:	f108 0103 	add.w	r1, r8, #3
 8007bc2:	1b49      	subs	r1, r1, r5
 8007bc4:	f021 0103 	bic.w	r1, r1, #3
 8007bc8:	3d03      	subs	r5, #3
 8007bca:	45a8      	cmp	r8, r5
 8007bcc:	bf38      	it	cc
 8007bce:	2100      	movcc	r1, #0
 8007bd0:	440b      	add	r3, r1
 8007bd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bd6:	b191      	cbz	r1, 8007bfe <__mdiff+0x11a>
 8007bd8:	6117      	str	r7, [r2, #16]
 8007bda:	e79d      	b.n	8007b18 <__mdiff+0x34>
 8007bdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007be0:	46e6      	mov	lr, ip
 8007be2:	0c08      	lsrs	r0, r1, #16
 8007be4:	fa1c fc81 	uxtah	ip, ip, r1
 8007be8:	4471      	add	r1, lr
 8007bea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bee:	b289      	uxth	r1, r1
 8007bf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bf4:	f846 1b04 	str.w	r1, [r6], #4
 8007bf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bfc:	e7dd      	b.n	8007bba <__mdiff+0xd6>
 8007bfe:	3f01      	subs	r7, #1
 8007c00:	e7e7      	b.n	8007bd2 <__mdiff+0xee>
 8007c02:	bf00      	nop
 8007c04:	0800846c 	.word	0x0800846c
 8007c08:	0800847d 	.word	0x0800847d

08007c0c <__d2b>:
 8007c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c10:	460f      	mov	r7, r1
 8007c12:	2101      	movs	r1, #1
 8007c14:	ec59 8b10 	vmov	r8, r9, d0
 8007c18:	4616      	mov	r6, r2
 8007c1a:	f7ff fccd 	bl	80075b8 <_Balloc>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	b930      	cbnz	r0, 8007c30 <__d2b+0x24>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b23      	ldr	r3, [pc, #140]	@ (8007cb4 <__d2b+0xa8>)
 8007c26:	4824      	ldr	r0, [pc, #144]	@ (8007cb8 <__d2b+0xac>)
 8007c28:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c2c:	f000 fad6 	bl	80081dc <__assert_func>
 8007c30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c38:	b10d      	cbz	r5, 8007c3e <__d2b+0x32>
 8007c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	f1b8 0300 	subs.w	r3, r8, #0
 8007c44:	d023      	beq.n	8007c8e <__d2b+0x82>
 8007c46:	4668      	mov	r0, sp
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	f7ff fd7c 	bl	8007746 <__lo0bits>
 8007c4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c52:	b1d0      	cbz	r0, 8007c8a <__d2b+0x7e>
 8007c54:	f1c0 0320 	rsb	r3, r0, #32
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	40c2      	lsrs	r2, r0
 8007c60:	6163      	str	r3, [r4, #20]
 8007c62:	9201      	str	r2, [sp, #4]
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	61a3      	str	r3, [r4, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2201      	moveq	r2, #1
 8007c6e:	2202      	movne	r2, #2
 8007c70:	6122      	str	r2, [r4, #16]
 8007c72:	b1a5      	cbz	r5, 8007c9e <__d2b+0x92>
 8007c74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c78:	4405      	add	r5, r0
 8007c7a:	603d      	str	r5, [r7, #0]
 8007c7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c80:	6030      	str	r0, [r6, #0]
 8007c82:	4620      	mov	r0, r4
 8007c84:	b003      	add	sp, #12
 8007c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c8a:	6161      	str	r1, [r4, #20]
 8007c8c:	e7ea      	b.n	8007c64 <__d2b+0x58>
 8007c8e:	a801      	add	r0, sp, #4
 8007c90:	f7ff fd59 	bl	8007746 <__lo0bits>
 8007c94:	9b01      	ldr	r3, [sp, #4]
 8007c96:	6163      	str	r3, [r4, #20]
 8007c98:	3020      	adds	r0, #32
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	e7e8      	b.n	8007c70 <__d2b+0x64>
 8007c9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ca6:	6038      	str	r0, [r7, #0]
 8007ca8:	6918      	ldr	r0, [r3, #16]
 8007caa:	f7ff fd2d 	bl	8007708 <__hi0bits>
 8007cae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cb2:	e7e5      	b.n	8007c80 <__d2b+0x74>
 8007cb4:	0800846c 	.word	0x0800846c
 8007cb8:	0800847d 	.word	0x0800847d

08007cbc <__sfputc_r>:
 8007cbc:	6893      	ldr	r3, [r2, #8]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	b410      	push	{r4}
 8007cc4:	6093      	str	r3, [r2, #8]
 8007cc6:	da08      	bge.n	8007cda <__sfputc_r+0x1e>
 8007cc8:	6994      	ldr	r4, [r2, #24]
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	db01      	blt.n	8007cd2 <__sfputc_r+0x16>
 8007cce:	290a      	cmp	r1, #10
 8007cd0:	d103      	bne.n	8007cda <__sfputc_r+0x1e>
 8007cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd6:	f7fe bc0e 	b.w	80064f6 <__swbuf_r>
 8007cda:	6813      	ldr	r3, [r2, #0]
 8007cdc:	1c58      	adds	r0, r3, #1
 8007cde:	6010      	str	r0, [r2, #0]
 8007ce0:	7019      	strb	r1, [r3, #0]
 8007ce2:	4608      	mov	r0, r1
 8007ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <__sfputs_r>:
 8007cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cec:	4606      	mov	r6, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	18d5      	adds	r5, r2, r3
 8007cf4:	42ac      	cmp	r4, r5
 8007cf6:	d101      	bne.n	8007cfc <__sfputs_r+0x12>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e007      	b.n	8007d0c <__sfputs_r+0x22>
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	463a      	mov	r2, r7
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ffda 	bl	8007cbc <__sfputc_r>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d1f3      	bne.n	8007cf4 <__sfputs_r+0xa>
 8007d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d10 <_vfiprintf_r>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	460d      	mov	r5, r1
 8007d16:	b09d      	sub	sp, #116	@ 0x74
 8007d18:	4614      	mov	r4, r2
 8007d1a:	4698      	mov	r8, r3
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	b118      	cbz	r0, 8007d28 <_vfiprintf_r+0x18>
 8007d20:	6a03      	ldr	r3, [r0, #32]
 8007d22:	b90b      	cbnz	r3, 8007d28 <_vfiprintf_r+0x18>
 8007d24:	f7fe fafe 	bl	8006324 <__sinit>
 8007d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d2a:	07d9      	lsls	r1, r3, #31
 8007d2c:	d405      	bmi.n	8007d3a <_vfiprintf_r+0x2a>
 8007d2e:	89ab      	ldrh	r3, [r5, #12]
 8007d30:	059a      	lsls	r2, r3, #22
 8007d32:	d402      	bmi.n	8007d3a <_vfiprintf_r+0x2a>
 8007d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d36:	f7fe fcf0 	bl	800671a <__retarget_lock_acquire_recursive>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	071b      	lsls	r3, r3, #28
 8007d3e:	d501      	bpl.n	8007d44 <_vfiprintf_r+0x34>
 8007d40:	692b      	ldr	r3, [r5, #16]
 8007d42:	b99b      	cbnz	r3, 8007d6c <_vfiprintf_r+0x5c>
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7fe fc14 	bl	8006574 <__swsetup_r>
 8007d4c:	b170      	cbz	r0, 8007d6c <_vfiprintf_r+0x5c>
 8007d4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d50:	07dc      	lsls	r4, r3, #31
 8007d52:	d504      	bpl.n	8007d5e <_vfiprintf_r+0x4e>
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	b01d      	add	sp, #116	@ 0x74
 8007d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	0598      	lsls	r0, r3, #22
 8007d62:	d4f7      	bmi.n	8007d54 <_vfiprintf_r+0x44>
 8007d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d66:	f7fe fcd9 	bl	800671c <__retarget_lock_release_recursive>
 8007d6a:	e7f3      	b.n	8007d54 <_vfiprintf_r+0x44>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d70:	2320      	movs	r3, #32
 8007d72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d7a:	2330      	movs	r3, #48	@ 0x30
 8007d7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f2c <_vfiprintf_r+0x21c>
 8007d80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d84:	f04f 0901 	mov.w	r9, #1
 8007d88:	4623      	mov	r3, r4
 8007d8a:	469a      	mov	sl, r3
 8007d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d90:	b10a      	cbz	r2, 8007d96 <_vfiprintf_r+0x86>
 8007d92:	2a25      	cmp	r2, #37	@ 0x25
 8007d94:	d1f9      	bne.n	8007d8a <_vfiprintf_r+0x7a>
 8007d96:	ebba 0b04 	subs.w	fp, sl, r4
 8007d9a:	d00b      	beq.n	8007db4 <_vfiprintf_r+0xa4>
 8007d9c:	465b      	mov	r3, fp
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ffa1 	bl	8007cea <__sfputs_r>
 8007da8:	3001      	adds	r0, #1
 8007daa:	f000 80a7 	beq.w	8007efc <_vfiprintf_r+0x1ec>
 8007dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007db0:	445a      	add	r2, fp
 8007db2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007db4:	f89a 3000 	ldrb.w	r3, [sl]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 809f 	beq.w	8007efc <_vfiprintf_r+0x1ec>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc8:	f10a 0a01 	add.w	sl, sl, #1
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dd6:	4654      	mov	r4, sl
 8007dd8:	2205      	movs	r2, #5
 8007dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dde:	4853      	ldr	r0, [pc, #332]	@ (8007f2c <_vfiprintf_r+0x21c>)
 8007de0:	f7f8 fa1e 	bl	8000220 <memchr>
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	b9d8      	cbnz	r0, 8007e20 <_vfiprintf_r+0x110>
 8007de8:	06d1      	lsls	r1, r2, #27
 8007dea:	bf44      	itt	mi
 8007dec:	2320      	movmi	r3, #32
 8007dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007df2:	0713      	lsls	r3, r2, #28
 8007df4:	bf44      	itt	mi
 8007df6:	232b      	movmi	r3, #43	@ 0x2b
 8007df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e02:	d015      	beq.n	8007e30 <_vfiprintf_r+0x120>
 8007e04:	9a07      	ldr	r2, [sp, #28]
 8007e06:	4654      	mov	r4, sl
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f04f 0c0a 	mov.w	ip, #10
 8007e0e:	4621      	mov	r1, r4
 8007e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e14:	3b30      	subs	r3, #48	@ 0x30
 8007e16:	2b09      	cmp	r3, #9
 8007e18:	d94b      	bls.n	8007eb2 <_vfiprintf_r+0x1a2>
 8007e1a:	b1b0      	cbz	r0, 8007e4a <_vfiprintf_r+0x13a>
 8007e1c:	9207      	str	r2, [sp, #28]
 8007e1e:	e014      	b.n	8007e4a <_vfiprintf_r+0x13a>
 8007e20:	eba0 0308 	sub.w	r3, r0, r8
 8007e24:	fa09 f303 	lsl.w	r3, r9, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	46a2      	mov	sl, r4
 8007e2e:	e7d2      	b.n	8007dd6 <_vfiprintf_r+0xc6>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	1d19      	adds	r1, r3, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	9103      	str	r1, [sp, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bfbb      	ittet	lt
 8007e3c:	425b      	neglt	r3, r3
 8007e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e42:	9307      	strge	r3, [sp, #28]
 8007e44:	9307      	strlt	r3, [sp, #28]
 8007e46:	bfb8      	it	lt
 8007e48:	9204      	strlt	r2, [sp, #16]
 8007e4a:	7823      	ldrb	r3, [r4, #0]
 8007e4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e4e:	d10a      	bne.n	8007e66 <_vfiprintf_r+0x156>
 8007e50:	7863      	ldrb	r3, [r4, #1]
 8007e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e54:	d132      	bne.n	8007ebc <_vfiprintf_r+0x1ac>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	1d1a      	adds	r2, r3, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	9203      	str	r2, [sp, #12]
 8007e5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e62:	3402      	adds	r4, #2
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f3c <_vfiprintf_r+0x22c>
 8007e6a:	7821      	ldrb	r1, [r4, #0]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	4650      	mov	r0, sl
 8007e70:	f7f8 f9d6 	bl	8000220 <memchr>
 8007e74:	b138      	cbz	r0, 8007e86 <_vfiprintf_r+0x176>
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	eba0 000a 	sub.w	r0, r0, sl
 8007e7c:	2240      	movs	r2, #64	@ 0x40
 8007e7e:	4082      	lsls	r2, r0
 8007e80:	4313      	orrs	r3, r2
 8007e82:	3401      	adds	r4, #1
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8a:	4829      	ldr	r0, [pc, #164]	@ (8007f30 <_vfiprintf_r+0x220>)
 8007e8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e90:	2206      	movs	r2, #6
 8007e92:	f7f8 f9c5 	bl	8000220 <memchr>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d03f      	beq.n	8007f1a <_vfiprintf_r+0x20a>
 8007e9a:	4b26      	ldr	r3, [pc, #152]	@ (8007f34 <_vfiprintf_r+0x224>)
 8007e9c:	bb1b      	cbnz	r3, 8007ee6 <_vfiprintf_r+0x1d6>
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	3307      	adds	r3, #7
 8007ea2:	f023 0307 	bic.w	r3, r3, #7
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	9303      	str	r3, [sp, #12]
 8007eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eac:	443b      	add	r3, r7
 8007eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb0:	e76a      	b.n	8007d88 <_vfiprintf_r+0x78>
 8007eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	2001      	movs	r0, #1
 8007eba:	e7a8      	b.n	8007e0e <_vfiprintf_r+0xfe>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	3401      	adds	r4, #1
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f04f 0c0a 	mov.w	ip, #10
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ece:	3a30      	subs	r2, #48	@ 0x30
 8007ed0:	2a09      	cmp	r2, #9
 8007ed2:	d903      	bls.n	8007edc <_vfiprintf_r+0x1cc>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0c6      	beq.n	8007e66 <_vfiprintf_r+0x156>
 8007ed8:	9105      	str	r1, [sp, #20]
 8007eda:	e7c4      	b.n	8007e66 <_vfiprintf_r+0x156>
 8007edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e7f0      	b.n	8007ec8 <_vfiprintf_r+0x1b8>
 8007ee6:	ab03      	add	r3, sp, #12
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	462a      	mov	r2, r5
 8007eec:	4b12      	ldr	r3, [pc, #72]	@ (8007f38 <_vfiprintf_r+0x228>)
 8007eee:	a904      	add	r1, sp, #16
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7fd fdd3 	bl	8005a9c <_printf_float>
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	1c78      	adds	r0, r7, #1
 8007efa:	d1d6      	bne.n	8007eaa <_vfiprintf_r+0x19a>
 8007efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007efe:	07d9      	lsls	r1, r3, #31
 8007f00:	d405      	bmi.n	8007f0e <_vfiprintf_r+0x1fe>
 8007f02:	89ab      	ldrh	r3, [r5, #12]
 8007f04:	059a      	lsls	r2, r3, #22
 8007f06:	d402      	bmi.n	8007f0e <_vfiprintf_r+0x1fe>
 8007f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f0a:	f7fe fc07 	bl	800671c <__retarget_lock_release_recursive>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	065b      	lsls	r3, r3, #25
 8007f12:	f53f af1f 	bmi.w	8007d54 <_vfiprintf_r+0x44>
 8007f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f18:	e71e      	b.n	8007d58 <_vfiprintf_r+0x48>
 8007f1a:	ab03      	add	r3, sp, #12
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4b05      	ldr	r3, [pc, #20]	@ (8007f38 <_vfiprintf_r+0x228>)
 8007f22:	a904      	add	r1, sp, #16
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7fe f851 	bl	8005fcc <_printf_i>
 8007f2a:	e7e4      	b.n	8007ef6 <_vfiprintf_r+0x1e6>
 8007f2c:	080085d8 	.word	0x080085d8
 8007f30:	080085e2 	.word	0x080085e2
 8007f34:	08005a9d 	.word	0x08005a9d
 8007f38:	08007ceb 	.word	0x08007ceb
 8007f3c:	080085de 	.word	0x080085de

08007f40 <__sflush_r>:
 8007f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	0716      	lsls	r6, r2, #28
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	d454      	bmi.n	8007ffa <__sflush_r+0xba>
 8007f50:	684b      	ldr	r3, [r1, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dc02      	bgt.n	8007f5c <__sflush_r+0x1c>
 8007f56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dd48      	ble.n	8007fee <__sflush_r+0xae>
 8007f5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d045      	beq.n	8007fee <__sflush_r+0xae>
 8007f62:	2300      	movs	r3, #0
 8007f64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f68:	682f      	ldr	r7, [r5, #0]
 8007f6a:	6a21      	ldr	r1, [r4, #32]
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	d030      	beq.n	8007fd2 <__sflush_r+0x92>
 8007f70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	0759      	lsls	r1, r3, #29
 8007f76:	d505      	bpl.n	8007f84 <__sflush_r+0x44>
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f7e:	b10b      	cbz	r3, 8007f84 <__sflush_r+0x44>
 8007f80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f82:	1ad2      	subs	r2, r2, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f88:	6a21      	ldr	r1, [r4, #32]
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b0      	blx	r6
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	d106      	bne.n	8007fa2 <__sflush_r+0x62>
 8007f94:	6829      	ldr	r1, [r5, #0]
 8007f96:	291d      	cmp	r1, #29
 8007f98:	d82b      	bhi.n	8007ff2 <__sflush_r+0xb2>
 8007f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008044 <__sflush_r+0x104>)
 8007f9c:	410a      	asrs	r2, r1
 8007f9e:	07d6      	lsls	r6, r2, #31
 8007fa0:	d427      	bmi.n	8007ff2 <__sflush_r+0xb2>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	6062      	str	r2, [r4, #4]
 8007fa6:	04d9      	lsls	r1, r3, #19
 8007fa8:	6922      	ldr	r2, [r4, #16]
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	d504      	bpl.n	8007fb8 <__sflush_r+0x78>
 8007fae:	1c42      	adds	r2, r0, #1
 8007fb0:	d101      	bne.n	8007fb6 <__sflush_r+0x76>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	b903      	cbnz	r3, 8007fb8 <__sflush_r+0x78>
 8007fb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fba:	602f      	str	r7, [r5, #0]
 8007fbc:	b1b9      	cbz	r1, 8007fee <__sflush_r+0xae>
 8007fbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	d002      	beq.n	8007fcc <__sflush_r+0x8c>
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f7ff f9f6 	bl	80073b8 <_free_r>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fd0:	e00d      	b.n	8007fee <__sflush_r+0xae>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b0      	blx	r6
 8007fd8:	4602      	mov	r2, r0
 8007fda:	1c50      	adds	r0, r2, #1
 8007fdc:	d1c9      	bne.n	8007f72 <__sflush_r+0x32>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0c6      	beq.n	8007f72 <__sflush_r+0x32>
 8007fe4:	2b1d      	cmp	r3, #29
 8007fe6:	d001      	beq.n	8007fec <__sflush_r+0xac>
 8007fe8:	2b16      	cmp	r3, #22
 8007fea:	d11e      	bne.n	800802a <__sflush_r+0xea>
 8007fec:	602f      	str	r7, [r5, #0]
 8007fee:	2000      	movs	r0, #0
 8007ff0:	e022      	b.n	8008038 <__sflush_r+0xf8>
 8007ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ff6:	b21b      	sxth	r3, r3
 8007ff8:	e01b      	b.n	8008032 <__sflush_r+0xf2>
 8007ffa:	690f      	ldr	r7, [r1, #16]
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	d0f6      	beq.n	8007fee <__sflush_r+0xae>
 8008000:	0793      	lsls	r3, r2, #30
 8008002:	680e      	ldr	r6, [r1, #0]
 8008004:	bf08      	it	eq
 8008006:	694b      	ldreq	r3, [r1, #20]
 8008008:	600f      	str	r7, [r1, #0]
 800800a:	bf18      	it	ne
 800800c:	2300      	movne	r3, #0
 800800e:	eba6 0807 	sub.w	r8, r6, r7
 8008012:	608b      	str	r3, [r1, #8]
 8008014:	f1b8 0f00 	cmp.w	r8, #0
 8008018:	dde9      	ble.n	8007fee <__sflush_r+0xae>
 800801a:	6a21      	ldr	r1, [r4, #32]
 800801c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800801e:	4643      	mov	r3, r8
 8008020:	463a      	mov	r2, r7
 8008022:	4628      	mov	r0, r5
 8008024:	47b0      	blx	r6
 8008026:	2800      	cmp	r0, #0
 8008028:	dc08      	bgt.n	800803c <__sflush_r+0xfc>
 800802a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800803c:	4407      	add	r7, r0
 800803e:	eba8 0800 	sub.w	r8, r8, r0
 8008042:	e7e7      	b.n	8008014 <__sflush_r+0xd4>
 8008044:	dfbffffe 	.word	0xdfbffffe

08008048 <_fflush_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	690b      	ldr	r3, [r1, #16]
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	b913      	cbnz	r3, 8008058 <_fflush_r+0x10>
 8008052:	2500      	movs	r5, #0
 8008054:	4628      	mov	r0, r5
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	b118      	cbz	r0, 8008062 <_fflush_r+0x1a>
 800805a:	6a03      	ldr	r3, [r0, #32]
 800805c:	b90b      	cbnz	r3, 8008062 <_fflush_r+0x1a>
 800805e:	f7fe f961 	bl	8006324 <__sinit>
 8008062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f3      	beq.n	8008052 <_fflush_r+0xa>
 800806a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800806c:	07d0      	lsls	r0, r2, #31
 800806e:	d404      	bmi.n	800807a <_fflush_r+0x32>
 8008070:	0599      	lsls	r1, r3, #22
 8008072:	d402      	bmi.n	800807a <_fflush_r+0x32>
 8008074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008076:	f7fe fb50 	bl	800671a <__retarget_lock_acquire_recursive>
 800807a:	4628      	mov	r0, r5
 800807c:	4621      	mov	r1, r4
 800807e:	f7ff ff5f 	bl	8007f40 <__sflush_r>
 8008082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008084:	07da      	lsls	r2, r3, #31
 8008086:	4605      	mov	r5, r0
 8008088:	d4e4      	bmi.n	8008054 <_fflush_r+0xc>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	059b      	lsls	r3, r3, #22
 800808e:	d4e1      	bmi.n	8008054 <_fflush_r+0xc>
 8008090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008092:	f7fe fb43 	bl	800671c <__retarget_lock_release_recursive>
 8008096:	e7dd      	b.n	8008054 <_fflush_r+0xc>

08008098 <__swhatbuf_r>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	2900      	cmp	r1, #0
 80080a2:	b096      	sub	sp, #88	@ 0x58
 80080a4:	4615      	mov	r5, r2
 80080a6:	461e      	mov	r6, r3
 80080a8:	da0d      	bge.n	80080c6 <__swhatbuf_r+0x2e>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080b0:	f04f 0100 	mov.w	r1, #0
 80080b4:	bf14      	ite	ne
 80080b6:	2340      	movne	r3, #64	@ 0x40
 80080b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080bc:	2000      	movs	r0, #0
 80080be:	6031      	str	r1, [r6, #0]
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	b016      	add	sp, #88	@ 0x58
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	466a      	mov	r2, sp
 80080c8:	f000 f848 	bl	800815c <_fstat_r>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dbec      	blt.n	80080aa <__swhatbuf_r+0x12>
 80080d0:	9901      	ldr	r1, [sp, #4]
 80080d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080da:	4259      	negs	r1, r3
 80080dc:	4159      	adcs	r1, r3
 80080de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080e2:	e7eb      	b.n	80080bc <__swhatbuf_r+0x24>

080080e4 <__smakebuf_r>:
 80080e4:	898b      	ldrh	r3, [r1, #12]
 80080e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e8:	079d      	lsls	r5, r3, #30
 80080ea:	4606      	mov	r6, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	d507      	bpl.n	8008100 <__smakebuf_r+0x1c>
 80080f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	2301      	movs	r3, #1
 80080fa:	6163      	str	r3, [r4, #20]
 80080fc:	b003      	add	sp, #12
 80080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008100:	ab01      	add	r3, sp, #4
 8008102:	466a      	mov	r2, sp
 8008104:	f7ff ffc8 	bl	8008098 <__swhatbuf_r>
 8008108:	9f00      	ldr	r7, [sp, #0]
 800810a:	4605      	mov	r5, r0
 800810c:	4639      	mov	r1, r7
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff f9c6 	bl	80074a0 <_malloc_r>
 8008114:	b948      	cbnz	r0, 800812a <__smakebuf_r+0x46>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	059a      	lsls	r2, r3, #22
 800811c:	d4ee      	bmi.n	80080fc <__smakebuf_r+0x18>
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	f043 0302 	orr.w	r3, r3, #2
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	e7e2      	b.n	80080f0 <__smakebuf_r+0xc>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	6020      	str	r0, [r4, #0]
 800812e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800813a:	b15b      	cbz	r3, 8008154 <__smakebuf_r+0x70>
 800813c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008140:	4630      	mov	r0, r6
 8008142:	f000 f81d 	bl	8008180 <_isatty_r>
 8008146:	b128      	cbz	r0, 8008154 <__smakebuf_r+0x70>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	431d      	orrs	r5, r3
 8008158:	81a5      	strh	r5, [r4, #12]
 800815a:	e7cf      	b.n	80080fc <__smakebuf_r+0x18>

0800815c <_fstat_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	@ (800817c <_fstat_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7f9 fadd 	bl	8001728 <_fstat>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_fstat_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_fstat_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	200004f0 	.word	0x200004f0

08008180 <_isatty_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d06      	ldr	r5, [pc, #24]	@ (800819c <_isatty_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	f7f9 fadc 	bl	8001748 <_isatty>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_isatty_r+0x1a>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_isatty_r+0x1a>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	200004f0 	.word	0x200004f0

080081a0 <_sbrk_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d06      	ldr	r5, [pc, #24]	@ (80081bc <_sbrk_r+0x1c>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7f9 fae4 	bl	8001778 <_sbrk>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_sbrk_r+0x1a>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_sbrk_r+0x1a>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	200004f0 	.word	0x200004f0

080081c0 <memcpy>:
 80081c0:	440a      	add	r2, r1
 80081c2:	4291      	cmp	r1, r2
 80081c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c8:	d100      	bne.n	80081cc <memcpy+0xc>
 80081ca:	4770      	bx	lr
 80081cc:	b510      	push	{r4, lr}
 80081ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d6:	4291      	cmp	r1, r2
 80081d8:	d1f9      	bne.n	80081ce <memcpy+0xe>
 80081da:	bd10      	pop	{r4, pc}

080081dc <__assert_func>:
 80081dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081de:	4614      	mov	r4, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	4b09      	ldr	r3, [pc, #36]	@ (8008208 <__assert_func+0x2c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4605      	mov	r5, r0
 80081e8:	68d8      	ldr	r0, [r3, #12]
 80081ea:	b954      	cbnz	r4, 8008202 <__assert_func+0x26>
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <__assert_func+0x30>)
 80081ee:	461c      	mov	r4, r3
 80081f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081f4:	9100      	str	r1, [sp, #0]
 80081f6:	462b      	mov	r3, r5
 80081f8:	4905      	ldr	r1, [pc, #20]	@ (8008210 <__assert_func+0x34>)
 80081fa:	f000 f841 	bl	8008280 <fiprintf>
 80081fe:	f000 f851 	bl	80082a4 <abort>
 8008202:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <__assert_func+0x38>)
 8008204:	e7f4      	b.n	80081f0 <__assert_func+0x14>
 8008206:	bf00      	nop
 8008208:	20000018 	.word	0x20000018
 800820c:	0800862e 	.word	0x0800862e
 8008210:	08008600 	.word	0x08008600
 8008214:	080085f3 	.word	0x080085f3

08008218 <_calloc_r>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	fba1 5402 	umull	r5, r4, r1, r2
 800821e:	b93c      	cbnz	r4, 8008230 <_calloc_r+0x18>
 8008220:	4629      	mov	r1, r5
 8008222:	f7ff f93d 	bl	80074a0 <_malloc_r>
 8008226:	4606      	mov	r6, r0
 8008228:	b928      	cbnz	r0, 8008236 <_calloc_r+0x1e>
 800822a:	2600      	movs	r6, #0
 800822c:	4630      	mov	r0, r6
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	220c      	movs	r2, #12
 8008232:	6002      	str	r2, [r0, #0]
 8008234:	e7f9      	b.n	800822a <_calloc_r+0x12>
 8008236:	462a      	mov	r2, r5
 8008238:	4621      	mov	r1, r4
 800823a:	f7fe f9f1 	bl	8006620 <memset>
 800823e:	e7f5      	b.n	800822c <_calloc_r+0x14>

08008240 <__ascii_mbtowc>:
 8008240:	b082      	sub	sp, #8
 8008242:	b901      	cbnz	r1, 8008246 <__ascii_mbtowc+0x6>
 8008244:	a901      	add	r1, sp, #4
 8008246:	b142      	cbz	r2, 800825a <__ascii_mbtowc+0x1a>
 8008248:	b14b      	cbz	r3, 800825e <__ascii_mbtowc+0x1e>
 800824a:	7813      	ldrb	r3, [r2, #0]
 800824c:	600b      	str	r3, [r1, #0]
 800824e:	7812      	ldrb	r2, [r2, #0]
 8008250:	1e10      	subs	r0, r2, #0
 8008252:	bf18      	it	ne
 8008254:	2001      	movne	r0, #1
 8008256:	b002      	add	sp, #8
 8008258:	4770      	bx	lr
 800825a:	4610      	mov	r0, r2
 800825c:	e7fb      	b.n	8008256 <__ascii_mbtowc+0x16>
 800825e:	f06f 0001 	mvn.w	r0, #1
 8008262:	e7f8      	b.n	8008256 <__ascii_mbtowc+0x16>

08008264 <__ascii_wctomb>:
 8008264:	4603      	mov	r3, r0
 8008266:	4608      	mov	r0, r1
 8008268:	b141      	cbz	r1, 800827c <__ascii_wctomb+0x18>
 800826a:	2aff      	cmp	r2, #255	@ 0xff
 800826c:	d904      	bls.n	8008278 <__ascii_wctomb+0x14>
 800826e:	228a      	movs	r2, #138	@ 0x8a
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	f04f 30ff 	mov.w	r0, #4294967295
 8008276:	4770      	bx	lr
 8008278:	700a      	strb	r2, [r1, #0]
 800827a:	2001      	movs	r0, #1
 800827c:	4770      	bx	lr
	...

08008280 <fiprintf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b503      	push	{r0, r1, lr}
 8008284:	4601      	mov	r1, r0
 8008286:	ab03      	add	r3, sp, #12
 8008288:	4805      	ldr	r0, [pc, #20]	@ (80082a0 <fiprintf+0x20>)
 800828a:	f853 2b04 	ldr.w	r2, [r3], #4
 800828e:	6800      	ldr	r0, [r0, #0]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	f7ff fd3d 	bl	8007d10 <_vfiprintf_r>
 8008296:	b002      	add	sp, #8
 8008298:	f85d eb04 	ldr.w	lr, [sp], #4
 800829c:	b003      	add	sp, #12
 800829e:	4770      	bx	lr
 80082a0:	20000018 	.word	0x20000018

080082a4 <abort>:
 80082a4:	b508      	push	{r3, lr}
 80082a6:	2006      	movs	r0, #6
 80082a8:	f000 f82c 	bl	8008304 <raise>
 80082ac:	2001      	movs	r0, #1
 80082ae:	f7f9 f9eb 	bl	8001688 <_exit>

080082b2 <_raise_r>:
 80082b2:	291f      	cmp	r1, #31
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	460c      	mov	r4, r1
 80082ba:	d904      	bls.n	80082c6 <_raise_r+0x14>
 80082bc:	2316      	movs	r3, #22
 80082be:	6003      	str	r3, [r0, #0]
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082c8:	b112      	cbz	r2, 80082d0 <_raise_r+0x1e>
 80082ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082ce:	b94b      	cbnz	r3, 80082e4 <_raise_r+0x32>
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 f831 	bl	8008338 <_getpid_r>
 80082d6:	4622      	mov	r2, r4
 80082d8:	4601      	mov	r1, r0
 80082da:	4628      	mov	r0, r5
 80082dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e0:	f000 b818 	b.w	8008314 <_kill_r>
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d00a      	beq.n	80082fe <_raise_r+0x4c>
 80082e8:	1c59      	adds	r1, r3, #1
 80082ea:	d103      	bne.n	80082f4 <_raise_r+0x42>
 80082ec:	2316      	movs	r3, #22
 80082ee:	6003      	str	r3, [r0, #0]
 80082f0:	2001      	movs	r0, #1
 80082f2:	e7e7      	b.n	80082c4 <_raise_r+0x12>
 80082f4:	2100      	movs	r1, #0
 80082f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082fa:	4620      	mov	r0, r4
 80082fc:	4798      	blx	r3
 80082fe:	2000      	movs	r0, #0
 8008300:	e7e0      	b.n	80082c4 <_raise_r+0x12>
	...

08008304 <raise>:
 8008304:	4b02      	ldr	r3, [pc, #8]	@ (8008310 <raise+0xc>)
 8008306:	4601      	mov	r1, r0
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	f7ff bfd2 	b.w	80082b2 <_raise_r>
 800830e:	bf00      	nop
 8008310:	20000018 	.word	0x20000018

08008314 <_kill_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d07      	ldr	r5, [pc, #28]	@ (8008334 <_kill_r+0x20>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f7f9 f9a1 	bl	8001668 <_kill>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d102      	bne.n	8008330 <_kill_r+0x1c>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	b103      	cbz	r3, 8008330 <_kill_r+0x1c>
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	bd38      	pop	{r3, r4, r5, pc}
 8008332:	bf00      	nop
 8008334:	200004f0 	.word	0x200004f0

08008338 <_getpid_r>:
 8008338:	f7f9 b98e 	b.w	8001658 <_getpid>

0800833c <_init>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

08008348 <_fini>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr
