
projet_led_neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00006900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800590c  0800590c  0000690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005910  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000068  08005978  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08005978  00007608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e28  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d65  00000000  00000000  0001aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db2  00000000  00000000  0001edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb51  00000000  00000000  0001fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162fa  00000000  00000000  0003f6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7eaa  00000000  00000000  000559d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d87f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f98  00000000  00000000  0011d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0012285c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005874 	.word	0x08005874

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08005874 	.word	0x08005874

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <WS2812_SetPixelColor>:

static uint16_t pwm_data[LED_COUNT * 24 + 50];
static uint8_t led_buffer[LED_COUNT][3];

void WS2812_SetPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b)
{
 8000508:	b490      	push	{r4, r7}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4604      	mov	r4, r0
 8000510:	4608      	mov	r0, r1
 8000512:	4611      	mov	r1, r2
 8000514:	461a      	mov	r2, r3
 8000516:	4623      	mov	r3, r4
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	4603      	mov	r3, r0
 800051c:	717b      	strb	r3, [r7, #5]
 800051e:	460b      	mov	r3, r1
 8000520:	713b      	strb	r3, [r7, #4]
 8000522:	4613      	mov	r3, r2
 8000524:	70fb      	strb	r3, [r7, #3]
    if (n < LED_COUNT) {
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	2b07      	cmp	r3, #7
 800052a:	d819      	bhi.n	8000560 <WS2812_SetPixelColor+0x58>
        led_buffer[n][0] = g;
 800052c:	88fa      	ldrh	r2, [r7, #6]
 800052e:	490f      	ldr	r1, [pc, #60]	@ (800056c <WS2812_SetPixelColor+0x64>)
 8000530:	4613      	mov	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4413      	add	r3, r2
 8000536:	440b      	add	r3, r1
 8000538:	793a      	ldrb	r2, [r7, #4]
 800053a:	701a      	strb	r2, [r3, #0]
        led_buffer[n][1] = r;
 800053c:	88fa      	ldrh	r2, [r7, #6]
 800053e:	490b      	ldr	r1, [pc, #44]	@ (800056c <WS2812_SetPixelColor+0x64>)
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	4413      	add	r3, r2
 8000546:	440b      	add	r3, r1
 8000548:	3301      	adds	r3, #1
 800054a:	797a      	ldrb	r2, [r7, #5]
 800054c:	701a      	strb	r2, [r3, #0]
        led_buffer[n][2] = b;
 800054e:	88fa      	ldrh	r2, [r7, #6]
 8000550:	4906      	ldr	r1, [pc, #24]	@ (800056c <WS2812_SetPixelColor+0x64>)
 8000552:	4613      	mov	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4413      	add	r3, r2
 8000558:	440b      	add	r3, r1
 800055a:	3302      	adds	r3, #2
 800055c:	78fa      	ldrb	r2, [r7, #3]
 800055e:	701a      	strb	r2, [r3, #0]
    }
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bc90      	pop	{r4, r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000268 	.word	0x20000268

08000570 <WS2812_Refresh>:

void WS2812_Refresh(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
    uint32_t indx = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < LED_COUNT; i++) {
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	e034      	b.n	80005ea <WS2812_Refresh+0x7a>
        for (int j = 0; j < 3; j++) {
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e02b      	b.n	80005de <WS2812_Refresh+0x6e>
            for (int k = 7; k >= 0; k--) {
 8000586:	2307      	movs	r3, #7
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	e022      	b.n	80005d2 <WS2812_Refresh+0x62>
                if (led_buffer[i][j] & (1 << k))
 800058c:	4927      	ldr	r1, [pc, #156]	@ (800062c <WS2812_Refresh+0xbc>)
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	4613      	mov	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	18ca      	adds	r2, r1, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	fa42 f303 	asr.w	r3, r2, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d007      	beq.n	80005be <WS2812_Refresh+0x4e>
                    pwm_data[indx++] = HIGH_TIME;
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	617a      	str	r2, [r7, #20]
 80005b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000630 <WS2812_Refresh+0xc0>)
 80005b6:	2146      	movs	r1, #70	@ 0x46
 80005b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005bc:	e006      	b.n	80005cc <WS2812_Refresh+0x5c>
                else
                    pwm_data[indx++] = LOW_TIME;
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	617a      	str	r2, [r7, #20]
 80005c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000630 <WS2812_Refresh+0xc0>)
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int k = 7; k >= 0; k--) {
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad9      	bge.n	800058c <WS2812_Refresh+0x1c>
        for (int j = 0; j < 3; j++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	ddd0      	ble.n	8000586 <WS2812_Refresh+0x16>
    for (int i = 0; i < LED_COUNT; i++) {
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	3301      	adds	r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	2b07      	cmp	r3, #7
 80005ee:	ddc7      	ble.n	8000580 <WS2812_Refresh+0x10>
            }
        }
    }

    for (int i = 0; i < 50; i++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e009      	b.n	800060a <WS2812_Refresh+0x9a>
        pwm_data[indx++] = 0;
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	617a      	str	r2, [r7, #20]
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <WS2812_Refresh+0xc0>)
 80005fe:	2100      	movs	r1, #0
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 50; i++) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b31      	cmp	r3, #49	@ 0x31
 800060e:	ddf2      	ble.n	80005f6 <WS2812_Refresh+0x86>
    }

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwm_data, indx);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	b29b      	uxth	r3, r3
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <WS2812_Refresh+0xc0>)
 8000616:	2100      	movs	r1, #0
 8000618:	4806      	ldr	r0, [pc, #24]	@ (8000634 <WS2812_Refresh+0xc4>)
 800061a:	f002 fb3b 	bl	8002c94 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fd70 	bl	8001104 <HAL_Delay>
}
 8000624:	bf00      	nop
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000268 	.word	0x20000268
 8000630:	20000084 	.word	0x20000084
 8000634:	200002e4 	.word	0x200002e4

08000638 <WS2812_SendColorArray>:
        WS2812_SetPixelColor(i, 0, 0, 0);
    }
}

void WS2812_SendColorArray(uint8_t *colors, uint16_t len)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
    uint16_t led_count = len / 3;
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <WS2812_SendColorArray+0x7c>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	81fb      	strh	r3, [r7, #14]
    if (led_count > LED_COUNT)
 8000650:	89fb      	ldrh	r3, [r7, #14]
 8000652:	2b08      	cmp	r3, #8
 8000654:	d901      	bls.n	800065a <WS2812_SendColorArray+0x22>
        led_count = LED_COUNT;
 8000656:	2308      	movs	r3, #8
 8000658:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < led_count; i++) {
 800065a:	2300      	movs	r3, #0
 800065c:	81bb      	strh	r3, [r7, #12]
 800065e:	e01e      	b.n	800069e <WS2812_SendColorArray+0x66>
        WS2812_SetPixelColor(i, colors[3 * i], colors[3 * i + 1], colors[3 * i + 2]);
 8000660:	89ba      	ldrh	r2, [r7, #12]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	89ba      	ldrh	r2, [r7, #12]
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	3301      	adds	r3, #1
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	781c      	ldrb	r4, [r3, #0]
 8000680:	89ba      	ldrh	r2, [r7, #12]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	3302      	adds	r3, #2
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	89b8      	ldrh	r0, [r7, #12]
 8000692:	4622      	mov	r2, r4
 8000694:	f7ff ff38 	bl	8000508 <WS2812_SetPixelColor>
    for (uint16_t i = 0; i < led_count; i++) {
 8000698:	89bb      	ldrh	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	81bb      	strh	r3, [r7, #12]
 800069e:	89ba      	ldrh	r2, [r7, #12]
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d3dc      	bcc.n	8000660 <WS2812_SendColorArray+0x28>
    }

    WS2812_Refresh();
 80006a6:	f7ff ff63 	bl	8000570 <WS2812_Refresh>
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd90      	pop	{r4, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	aaaaaaab 	.word	0xaaaaaaab

080006b8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_DMA_Init+0x94>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006c2:	4a22      	ldr	r2, [pc, #136]	@ (800074c <MX_DMA_Init+0x94>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_DMA_Init+0x94>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_DMA_Init+0x94>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006da:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <MX_DMA_Init+0x94>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_DMA_Init+0x94>)
 80006e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_DMA_Init+0x98>)
 80006f0:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_DMA_Init+0x9c>)
 80006f2:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_DMA_Init+0x98>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_DMA_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_DMA_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_DMA_Init+0x98>)
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_DMA_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_DMA_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_DMA_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000724:	480a      	ldr	r0, [pc, #40]	@ (8000750 <MX_DMA_Init+0x98>)
 8000726:	f000 fe1f 	bl	8001368 <HAL_DMA_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DMA_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f8cf 	bl	80008d2 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	200c      	movs	r0, #12
 800073a:	f000 fde0 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800073e:	200c      	movs	r0, #12
 8000740:	f000 fdf7 	bl	8001332 <HAL_NVIC_EnableIRQ>

}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	20000280 	.word	0x20000280
 8000754:	40020008 	.word	0x40020008

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_GPIO_Init+0x5c>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000770:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <MX_GPIO_Init+0x5c>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_GPIO_Init+0x5c>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2102      	movs	r1, #2
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f001 f9e0 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000790:	2302      	movs	r3, #2
 8000792:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f001 f850 	bl	800184c <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80007c0:	1d39      	adds	r1, r7, #4
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	2201      	movs	r2, #1
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <__io_putchar+0x20>)
 80007ca:	f003 fd2b 	bl	8004224 <HAL_UART_Transmit>
	return chr;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000390 	.word	0x20000390

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_Init();
 80007e2:	f000 fc1e 	bl	8001022 <HAL_Init>
	SystemClock_Config();
 80007e6:	f000 f829 	bl	800083c <SystemClock_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fc1a 	bl	8001022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f825 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f7ff ffb1 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f6:	f7ff ff5f 	bl	80006b8 <MX_DMA_Init>
  MX_TIM1_Init();
 80007fa:	f000 f985 	bl	8000b08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007fe:	f000 fab7 	bl	8000d70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000802:	f000 fb01 	bl	8000e08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n===== VESTE LED =====\r\n");
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <main+0x58>)
 8000808:	f004 fca0 	bl	800514c <puts>
	//  PWM_SetDutyCycle();

	while (1)
	{

		uint8_t colors[LED_COUNT * 3] = {
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <main+0x5c>)
 800080e:	463c      	mov	r4, r7
 8000810:	461d      	mov	r5, r3
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	e895 0003 	ldmia.w	r5, {r0, r1}
 800081a:	e884 0003 	stmia.w	r4, {r0, r1}
//				255, 0, 255, // LED 5 magenta
//				0, 255, 255, // LED 6 cyan
//				128, 128, 128, // LED 7 white-ish
//				0, 0, 0      // LED 8 off

		WS2812_SendColorArray(colors, sizeof(colors));
 800081e:	463b      	mov	r3, r7
 8000820:	2118      	movs	r1, #24
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff08 	bl	8000638 <WS2812_SendColorArray>
		HAL_Delay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082c:	f000 fc6a 	bl	8001104 <HAL_Delay>
	{
 8000830:	bf00      	nop
 8000832:	e7eb      	b.n	800080c <main+0x30>
 8000834:	0800588c 	.word	0x0800588c
 8000838:	080058a8 	.word	0x080058a8

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2238      	movs	r2, #56	@ 0x38
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fd5e 	bl	800530c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800085e:	2000      	movs	r0, #0
 8000860:	f001 f98e 	bl	8001b80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	2340      	movs	r3, #64	@ 0x40
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800087a:	2301      	movs	r3, #1
 800087c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800087e:	2314      	movs	r3, #20
 8000880:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fa28 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800089e:	f000 f818 	bl	80008d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2104      	movs	r1, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fd26 	bl	800230c <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008c6:	f000 f804 	bl	80008d2 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	@ 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
}
 80008d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008da:	bf00      	nop
 80008dc:	e7fd      	b.n	80008da <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000916:	f001 f9d7 	bl	8001cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 fba3 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <DMA1_Channel2_IRQHandler+0x10>)
 800098e:	f000 fe0e 	bl	80015ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000330 	.word	0x20000330

0800099c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
  }

  return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fee1 	bl	80007b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf1      	blt.n	80009e8 <_write+0x12>
  }
  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a36:	605a      	str	r2, [r3, #4]
  return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	@ (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f004 fc7e 	bl	80053a8 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	@ (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20008000 	.word	0x20008000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200002e0 	.word	0x200002e0
 8000ae0:	20000608 	.word	0x20000608

08000ae4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09c      	sub	sp, #112	@ 0x70
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2234      	movs	r2, #52	@ 0x34
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fbe2 	bl	800530c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b48:	4b45      	ldr	r3, [pc, #276]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b4a:	4a46      	ldr	r2, [pc, #280]	@ (8000c64 <MX_TIM1_Init+0x15c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b4e:	4b44      	ldr	r3, [pc, #272]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b42      	ldr	r3, [pc, #264]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000b5a:	4b41      	ldr	r3, [pc, #260]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b5c:	22c7      	movs	r2, #199	@ 0xc7
 8000b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b66:	4b3e      	ldr	r3, [pc, #248]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b72:	483b      	ldr	r0, [pc, #236]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b74:	f001 ffd6 	bl	8002b24 <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b7e:	f7ff fea8 	bl	80008d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b86:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4834      	ldr	r0, [pc, #208]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000b90:	f002 fbac 	bl	80032ec <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b9a:	f7ff fe9a 	bl	80008d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b9e:	4830      	ldr	r0, [pc, #192]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000ba0:	f002 f817 	bl	8002bd2 <HAL_TIM_PWM_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000baa:	f7ff fe92 	bl	80008d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4827      	ldr	r0, [pc, #156]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000bc2:	f003 f9d1 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000bcc:	f7ff fe81 	bl	80008d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	@ 0x60
 8000bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481a      	ldr	r0, [pc, #104]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000bf6:	f002 fa65 	bl	80030c4 <HAL_TIM_PWM_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c00:	f7ff fe67 	bl	80008d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000c42:	f003 fa13 	bl	800406c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000c4c:	f7ff fe41 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <MX_TIM1_Init+0x158>)
 8000c52:	f000 f855 	bl	8000d00 <HAL_TIM_MspPostInit>

}
 8000c56:	bf00      	nop
 8000c58:	3770      	adds	r7, #112	@ 0x70
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200002e4 	.word	0x200002e4
 8000c64:	40012c00 	.word	0x40012c00

08000c68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf0 <HAL_TIM_Base_MspInit+0x88>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d136      	bne.n	8000ce8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000c80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000c94:	4a19      	ldr	r2, [pc, #100]	@ (8000cfc <HAL_TIM_Base_MspInit+0x94>)
 8000c96:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000c9a:	222a      	movs	r2, #42	@ 0x2a
 8000c9c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000cce:	f000 fb4b 	bl	8001368 <HAL_DMA_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000cd8:	f7ff fdfb 	bl	80008d2 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x90>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40012c00 	.word	0x40012c00
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	20000330 	.word	0x20000330
 8000cfc:	4002001c 	.word	0x4002001c

08000d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <HAL_TIM_MspPostInit+0x68>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d11d      	bne.n	8000d5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a11      	ldr	r2, [pc, #68]	@ (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_NP_Pin;
 8000d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_NP_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5a:	f000 fd77 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	40021000 	.word	0x40021000

08000d70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d76:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <MX_USART1_UART_Init+0x94>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db8:	4811      	ldr	r0, [pc, #68]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000dba:	f003 f9e3 	bl	8004184 <HAL_UART_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dc4:	f7ff fd85 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000dcc:	f003 ffdc 	bl	8004d88 <HAL_UARTEx_SetTxFifoThreshold>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dd6:	f7ff fd7c 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4808      	ldr	r0, [pc, #32]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000dde:	f004 f811 	bl	8004e04 <HAL_UARTEx_SetRxFifoThreshold>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f7ff fd73 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_USART1_UART_Init+0x90>)
 8000dee:	f003 ff92 	bl	8004d16 <HAL_UARTEx_DisableFifoMode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000df8:	f7ff fd6b 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000390 	.word	0x20000390
 8000e04:	40013800 	.word	0x40013800

08000e08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <MX_USART2_UART_Init+0x94>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e52:	f003 f997 	bl	8004184 <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e5c:	f7ff fd39 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e64:	f003 ff90 	bl	8004d88 <HAL_UARTEx_SetTxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e6e:	f7ff fd30 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e76:	f003 ffc5 	bl	8004e04 <HAL_UARTEx_SetRxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f7ff fd27 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e86:	f003 ff46 	bl	8004d16 <HAL_UARTEx_DisableFifoMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f7ff fd1f 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000424 	.word	0x20000424
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09c      	sub	sp, #112	@ 0x70
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	2244      	movs	r2, #68	@ 0x44
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 fa23 	bl	800530c <memset>
  if(uartHandle->Instance==USART1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a3e      	ldr	r2, [pc, #248]	@ (8000fc4 <HAL_UART_MspInit+0x124>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d138      	bne.n	8000f42 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 fc31 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee8:	f7ff fcf3 	bl	80008d2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef0:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef8:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f08:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f10:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f1c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f000 fc86 	bl	800184c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f40:	e03b      	b.n	8000fba <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <HAL_UART_MspInit+0x12c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d136      	bne.n	8000fba <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fbf3 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000f64:	f7ff fcb5 	bl	80008d2 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6c:	4a16      	ldr	r2, [pc, #88]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_UART_MspInit+0x128>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f000 fc49 	bl	800184c <HAL_GPIO_Init>
}
 8000fba:	bf00      	nop
 8000fbc:	3770      	adds	r7, #112	@ 0x70
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff fd86 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	@ (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800101c <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f004 f9d9 	bl	80053b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001002:	f7ff fbeb 	bl	80007dc <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   r0, =_estack
 8001008:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001014:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8001018:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800101c:	20000608 	.word	0x20000608

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>

08001022 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f95b 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f80e 	bl	8001054 <HAL_InitTick>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001044:	f7ff fc4c 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001048:	79fb      	ldrb	r3, [r7, #7]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <HAL_InitTick+0x68>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d022      	beq.n	80010ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001068:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_InitTick+0x6c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_InitTick+0x68>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001074:	fbb1 f3f3 	udiv	r3, r1, r3
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f966 	bl	800134e <HAL_SYSTICK_Config>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10f      	bne.n	80010a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d809      	bhi.n	80010a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	2200      	movs	r2, #0
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	f000 f932 	bl	80012fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_InitTick+0x70>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e004      	b.n	80010b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_IncTick+0x20>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a03      	ldr	r2, [pc, #12]	@ (80010e4 <HAL_IncTick+0x1c>)
 80010d8:	6013      	str	r3, [r2, #0]
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	200004b8 	.word	0x200004b8
 80010e8:	20000008 	.word	0x20000008

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200004b8 	.word	0x200004b8

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d004      	beq.n	8001128 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_Delay+0x40>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001128:	bf00      	nop
 800112a:	f7ff ffdf 	bl	80010ec <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	429a      	cmp	r2, r3
 8001138:	d8f7      	bhi.n	800112a <HAL_Delay+0x26>
  {
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff40 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff90 	bl	800123c <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5f 	bl	80011e8 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff33 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa4 	bl	80012a4 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e08d      	b.n	8001496 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_DMA_Init+0x138>)
 8001382:	429a      	cmp	r2, r3
 8001384:	d80f      	bhi.n	80013a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b45      	ldr	r3, [pc, #276]	@ (80014a4 <HAL_DMA_Init+0x13c>)
 800138e:	4413      	add	r3, r2
 8001390:	4a45      	ldr	r2, [pc, #276]	@ (80014a8 <HAL_DMA_Init+0x140>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	009a      	lsls	r2, r3, #2
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a42      	ldr	r2, [pc, #264]	@ (80014ac <HAL_DMA_Init+0x144>)
 80013a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a4:	e00e      	b.n	80013c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <HAL_DMA_Init+0x148>)
 80013ae:	4413      	add	r3, r2
 80013b0:	4a3d      	ldr	r2, [pc, #244]	@ (80014a8 <HAL_DMA_Init+0x140>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	009a      	lsls	r2, r3, #2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a3c      	ldr	r2, [pc, #240]	@ (80014b4 <HAL_DMA_Init+0x14c>)
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f9b6 	bl	8001788 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001424:	d102      	bne.n	800142c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001440:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d010      	beq.n	800146c <HAL_DMA_Init+0x104>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b04      	cmp	r3, #4
 8001450:	d80c      	bhi.n	800146c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f9d6 	bl	8001804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	e008      	b.n	800147e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020407 	.word	0x40020407
 80014a4:	bffdfff8 	.word	0xbffdfff8
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	40020000 	.word	0x40020000
 80014b0:	bffdfbf8 	.word	0xbffdfbf8
 80014b4:	40020400 	.word	0x40020400

080014b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_DMA_Start_IT+0x20>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e066      	b.n	80015a6 <HAL_DMA_Start_IT+0xee>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d155      	bne.n	8001598 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 f8fb 	bl	800170c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 020e 	orr.w	r2, r2, #14
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e00f      	b.n	8001550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 020a 	orr.w	r2, r2, #10
 800154e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800156c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001584:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e005      	b.n	80015a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015a0:	2302      	movs	r3, #2
 80015a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2204      	movs	r2, #4
 80015d0:	409a      	lsls	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d026      	beq.n	8001628 <HAL_DMA_IRQHandler+0x7a>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d021      	beq.n	8001628 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0204 	bic.w	r2, r2, #4
 8001600:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f003 021f 	and.w	r2, r3, #31
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	2104      	movs	r1, #4
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	2b00      	cmp	r3, #0
 800161c:	d071      	beq.n	8001702 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001626:	e06c      	b.n	8001702 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2202      	movs	r2, #2
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d02e      	beq.n	800169a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d029      	beq.n	800169a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10b      	bne.n	800166c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020a 	bic.w	r2, r2, #10
 8001662:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	2102      	movs	r1, #2
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d038      	beq.n	8001702 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001698:	e033      	b.n	8001702 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2208      	movs	r2, #8
 80016a4:	409a      	lsls	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d02a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d025      	beq.n	8001704 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 020e 	bic.w	r2, r2, #14
 80016c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f202 	lsl.w	r2, r1, r2
 80016da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001702:	bf00      	nop
 8001704:	bf00      	nop
}
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001722:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001734:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	f003 021f 	and.w	r2, r3, #31
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b10      	cmp	r3, #16
 8001758:	d108      	bne.n	800176c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800176a:	e007      	b.n	800177c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001798:	429a      	cmp	r2, r3
 800179a:	d802      	bhi.n	80017a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e001      	b.n	80017a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017a4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3b08      	subs	r3, #8
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2201      	movs	r2, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40020407 	.word	0x40020407
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020820 	.word	0x40020820
 80017fc:	cccccccd 	.word	0xcccccccd
 8001800:	40020880 	.word	0x40020880

08001804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001826:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3b01      	subs	r3, #1
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	1000823f 	.word	0x1000823f
 8001848:	40020940 	.word	0x40020940

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800185a:	e15a      	b.n	8001b12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 814c 	beq.w	8001b0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d005      	beq.n	800188c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001888:	2b02      	cmp	r3, #2
 800188a:	d130      	bne.n	80018ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c2:	2201      	movs	r2, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 0201 	and.w	r2, r3, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d017      	beq.n	800192a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d123      	bne.n	800197e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	6939      	ldr	r1, [r7, #16]
 800197a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0203 	and.w	r2, r3, #3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80a6 	beq.w	8001b0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b30 <HAL_GPIO_Init+0x2e4>)
 80019c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_GPIO_Init+0x2e4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80019cc:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <HAL_GPIO_Init+0x2e4>)
 80019ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d8:	4a56      	ldr	r2, [pc, #344]	@ (8001b34 <HAL_GPIO_Init+0x2e8>)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a02:	d01f      	beq.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4c      	ldr	r2, [pc, #304]	@ (8001b38 <HAL_GPIO_Init+0x2ec>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d019      	beq.n	8001a40 <HAL_GPIO_Init+0x1f4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4b      	ldr	r2, [pc, #300]	@ (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_GPIO_Init+0x1f0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4a      	ldr	r2, [pc, #296]	@ (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a49      	ldr	r2, [pc, #292]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1e8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a48      	ldr	r2, [pc, #288]	@ (8001b48 <HAL_GPIO_Init+0x2fc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1e4>
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	e00a      	b.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a30:	2306      	movs	r3, #6
 8001a32:	e008      	b.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e006      	b.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e004      	b.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_GPIO_Init+0x1fa>
 8001a44:	2300      	movs	r3, #0
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a56:	4937      	ldr	r1, [pc, #220]	@ (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a64:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a88:	4a30      	ldr	r2, [pc, #192]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab2:	4a26      	ldr	r2, [pc, #152]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ab8:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001adc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b06:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <HAL_GPIO_Init+0x300>)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f47f ae9d 	bne.w	800185c <HAL_GPIO_Init+0x10>
  }
}
 8001b22:	bf00      	nop
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000
 8001b38:	48000400 	.word	0x48000400
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000c00 	.word	0x48000c00
 8001b44:	48001000 	.word	0x48001000
 8001b48:	48001400 	.word	0x48001400
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d141      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9a:	d131      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b9c:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba2:	4a46      	ldr	r2, [pc, #280]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bac:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bb4:	4a41      	ldr	r2, [pc, #260]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bbc:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2232      	movs	r2, #50	@ 0x32
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd2:	e002      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bda:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be6:	d102      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f2      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bee:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfa:	d158      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e057      	b.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c00:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c06:	4a2d      	ldr	r2, [pc, #180]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c10:	e04d      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c18:	d141      	bne.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1a:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c26:	d131      	bne.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c2e:	4a23      	ldr	r2, [pc, #140]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c40:	4a1e      	ldr	r2, [pc, #120]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2232      	movs	r2, #50	@ 0x32
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5e:	e002      	b.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c72:	d102      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f2      	bne.n	8001c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c86:	d112      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e011      	b.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c9c:	e007      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	431bde83 	.word	0x431bde83

08001cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd6:	6093      	str	r3, [r2, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e2fe      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	4b97      	ldr	r3, [pc, #604]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	4b94      	ldr	r3, [pc, #592]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3e>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_OscConfig+0x44>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x108>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d157      	bne.n	8001df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e2d9      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x74>
 8001d4e:	4b85      	ldr	r3, [pc, #532]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a84      	ldr	r2, [pc, #528]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b7f      	ldr	r3, [pc, #508]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b7c      	ldr	r3, [pc, #496]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7b      	ldr	r2, [pc, #492]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d80:	4b78      	ldr	r3, [pc, #480]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a77      	ldr	r2, [pc, #476]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b75      	ldr	r3, [pc, #468]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a74      	ldr	r2, [pc, #464]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f9a4 	bl	80010ec <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f9a0 	bl	80010ec <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e29e      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4b6a      	ldr	r3, [pc, #424]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xc0>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f990 	bl	80010ec <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f98c 	bl	80010ec <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e28a      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xe8>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d075      	beq.n	8001eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b59      	ldr	r3, [pc, #356]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e08:	4b56      	ldr	r3, [pc, #344]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_OscConfig+0x136>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_OscConfig+0x13c>
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11f      	bne.n	8001e64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e24:	4b4f      	ldr	r3, [pc, #316]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_OscConfig+0x154>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e25d      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b49      	ldr	r3, [pc, #292]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	4946      	ldr	r1, [pc, #280]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e50:	4b45      	ldr	r3, [pc, #276]	@ (8001f68 <HAL_RCC_OscConfig+0x280>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f8fd 	bl	8001054 <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e249      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3c      	ldr	r2, [pc, #240]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f938 	bl	80010ec <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e80:	f7ff f934 	bl	80010ec <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e232      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e92:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	061b      	lsls	r3, r3, #24
 8001eac:	492d      	ldr	r1, [pc, #180]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
 8001eb2:	e01a      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f914 	bl	80010ec <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f910 	bl	80010ec <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e20e      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eda:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1e0>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d041      	beq.n	8001f7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f04:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f8ed 	bl	80010ec <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff f8e9 	bl	80010ec <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1e7      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ef      	beq.n	8001f16 <HAL_RCC_OscConfig+0x22e>
 8001f36:	e020      	b.n	8001f7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f38:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff f8d0 	bl	80010ec <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff f8cc 	bl	80010ec <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d906      	bls.n	8001f6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1ca      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ea      	bne.n	8001f50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a6 	beq.w	80020d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f8c:	4b84      	ldr	r3, [pc, #528]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2b4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x2b6>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b7c      	ldr	r3, [pc, #496]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbe:	4b79      	ldr	r3, [pc, #484]	@ (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fca:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	@ (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f889 	bl	80010ec <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7ff f885 	bl	80010ec <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e183      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_RCC_OscConfig+0x32e>
 8002004:	4b66      	ldr	r3, [pc, #408]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200a:	4a65      	ldr	r2, [pc, #404]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002014:	e024      	b.n	8002060 <HAL_RCC_OscConfig+0x378>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d110      	bne.n	8002040 <HAL_RCC_OscConfig+0x358>
 800201e:	4b60      	ldr	r3, [pc, #384]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002024:	4a5e      	ldr	r2, [pc, #376]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800202e:	4b5c      	ldr	r3, [pc, #368]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800203e:	e00f      	b.n	8002060 <HAL_RCC_OscConfig+0x378>
 8002040:	4b57      	ldr	r3, [pc, #348]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a56      	ldr	r2, [pc, #344]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002050:	4b53      	ldr	r3, [pc, #332]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f840 	bl	80010ec <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff f83c 	bl	80010ec <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e138      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	4b46      	ldr	r3, [pc, #280]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ed      	beq.n	8002070 <HAL_RCC_OscConfig+0x388>
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff f829 	bl	80010ec <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff f825 	bl	80010ec <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e121      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b4:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ed      	bne.n	800209e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	4b35      	ldr	r3, [pc, #212]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a34      	ldr	r2, [pc, #208]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03c      	beq.n	800215a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e8:	4b2d      	ldr	r3, [pc, #180]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ee:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe fff8 	bl	80010ec <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002100:	f7fe fff4 	bl	80010ec <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0f2      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ef      	beq.n	8002100 <HAL_RCC_OscConfig+0x418>
 8002120:	e01b      	b.n	800215a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002128:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7fe ffdb 	bl	80010ec <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213a:	f7fe ffd7 	bl	80010ec <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0d5      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80c9 	beq.w	80022f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b0c      	cmp	r3, #12
 800216e:	f000 8083 	beq.w	8002278 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d15e      	bne.n	8002238 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ffb1 	bl	80010ec <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e00c      	b.n	80021a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe ffad 	bl	80010ec <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d905      	bls.n	80021a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0ab      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	4b55      	ldr	r3, [pc, #340]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ec      	bne.n	800218e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b4:	4b52      	ldr	r3, [pc, #328]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	4b52      	ldr	r3, [pc, #328]	@ (8002304 <HAL_RCC_OscConfig+0x61c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6a11      	ldr	r1, [r2, #32]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021c4:	3a01      	subs	r2, #1
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021ce:	0212      	lsls	r2, r2, #8
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021d6:	0852      	lsrs	r2, r2, #1
 80021d8:	3a01      	subs	r2, #1
 80021da:	0552      	lsls	r2, r2, #21
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021e2:	0852      	lsrs	r2, r2, #1
 80021e4:	3a01      	subs	r2, #1
 80021e6:	0652      	lsls	r2, r2, #25
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021ee:	06d2      	lsls	r2, r2, #27
 80021f0:	430a      	orrs	r2, r1
 80021f2:	4943      	ldr	r1, [pc, #268]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a40      	ldr	r2, [pc, #256]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002204:	4b3e      	ldr	r3, [pc, #248]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a3d      	ldr	r2, [pc, #244]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800220e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe ff6c 	bl	80010ec <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe ff68 	bl	80010ec <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e066      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x530>
 8002236:	e05e      	b.n	80022f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a30      	ldr	r2, [pc, #192]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 800223e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ff52 	bl	80010ec <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe ff4e 	bl	80010ec <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e04c      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225e:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800226a:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4924      	ldr	r1, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_RCC_OscConfig+0x620>)
 8002272:	4013      	ands	r3, r2
 8002274:	60cb      	str	r3, [r1, #12]
 8002276:	e03e      	b.n	80022f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e039      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002284:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_RCC_OscConfig+0x618>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d12c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	3b01      	subs	r3, #1
 80022a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d123      	bne.n	80022f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d11b      	bne.n	80022f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d113      	bne.n	80022f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	019f800c 	.word	0x019f800c
 8002308:	feeefffc 	.word	0xfeeefffc

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e11e      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b91      	ldr	r3, [pc, #580]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b8e      	ldr	r3, [pc, #568]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 020f 	bic.w	r2, r3, #15
 800233a:	498c      	ldr	r1, [pc, #560]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b8a      	ldr	r3, [pc, #552]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e106      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d073      	beq.n	8002448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d129      	bne.n	80023bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002368:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0f4      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002378:	f000 f99e 	bl	80026b8 <RCC_GetSysClockFreqFromPLLSource>
 800237c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4a7c      	ldr	r2, [pc, #496]	@ (8002574 <HAL_RCC_ClockConfig+0x268>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d93f      	bls.n	8002406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002386:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	d033      	beq.n	8002406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12f      	bne.n	8002406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023a6:	4b72      	ldr	r3, [pc, #456]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ae:	4a70      	ldr	r2, [pc, #448]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80023b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e024      	b.n	8002406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0c6      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d4:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0be      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023e4:	f000 f8ce 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4a61      	ldr	r2, [pc, #388]	@ (8002574 <HAL_RCC_ClockConfig+0x268>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d909      	bls.n	8002406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002406:	4b5a      	ldr	r3, [pc, #360]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4957      	ldr	r1, [pc, #348]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe fe68 	bl	80010ec <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe fe64 	bl	80010ec <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e095      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 020c 	and.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1eb      	bne.n	8002420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d023      	beq.n	800249c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a42      	ldr	r2, [pc, #264]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800246a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002478:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002480:	4a3b      	ldr	r2, [pc, #236]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4936      	ldr	r1, [pc, #216]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
 800249a:	e008      	b.n	80024ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b80      	cmp	r3, #128	@ 0x80
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024a2:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4a32      	ldr	r2, [pc, #200]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 80024a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ae:	4b2f      	ldr	r3, [pc, #188]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d21d      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024bc:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 020f 	bic.w	r2, r3, #15
 80024c4:	4929      	ldr	r1, [pc, #164]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fe0e 	bl	80010ec <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fe0a 	bl	80010ec <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e03b      	b.n	8002562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_RCC_ClockConfig+0x260>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1ed      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4917      	ldr	r1, [pc, #92]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490f      	ldr	r1, [pc, #60]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002536:	f000 f825 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490c      	ldr	r1, [pc, #48]	@ (8002578 <HAL_RCC_ClockConfig+0x26c>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_RCC_ClockConfig+0x270>)
 8002554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x274>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fd7a 	bl	8001054 <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000
 8002570:	40021000 	.word	0x40021000
 8002574:	04c4b400 	.word	0x04c4b400
 8002578:	080058c0 	.word	0x080058c0
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800258a:	4b2c      	ldr	r3, [pc, #176]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d102      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002596:	4b2a      	ldr	r3, [pc, #168]	@ (8002640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	e047      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800259c:	4b27      	ldr	r3, [pc, #156]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a8:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	e03e      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025ae:	4b23      	ldr	r3, [pc, #140]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d136      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3301      	adds	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	4a16      	ldr	r2, [pc, #88]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e2:	68d2      	ldr	r2, [r2, #12]
 80025e4:	0a12      	lsrs	r2, r2, #8
 80025e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	617b      	str	r3, [r7, #20]
      break;
 80025f0:	e00c      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f2:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4a10      	ldr	r2, [pc, #64]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	0a12      	lsrs	r2, r2, #8
 8002600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
      break;
 800260a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	0e5b      	lsrs	r3, r3, #25
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	3301      	adds	r3, #1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	e001      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800262c:	693b      	ldr	r3, [r7, #16]
}
 800262e:	4618      	mov	r0, r3
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	00f42400 	.word	0x00f42400
 8002644:	007a1200 	.word	0x007a1200

08002648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002664:	f7ff fff0 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4904      	ldr	r1, [pc, #16]	@ (8002688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	080058d0 	.word	0x080058d0

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002690:	f7ff ffda 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0adb      	lsrs	r3, r3, #11
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4904      	ldr	r1, [pc, #16]	@ (80026b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	080058d0 	.word	0x080058d0

080026b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026be:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3301      	adds	r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d10c      	bne.n	80026f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026dc:	4a17      	ldr	r2, [pc, #92]	@ (800273c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026e6:	68d2      	ldr	r2, [r2, #12]
 80026e8:	0a12      	lsrs	r2, r2, #8
 80026ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
    break;
 80026f4:	e00c      	b.n	8002710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026f6:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002700:	68d2      	ldr	r2, [r2, #12]
 8002702:	0a12      	lsrs	r2, r2, #8
 8002704:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
    break;
 800270e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0e5b      	lsrs	r3, r3, #25
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	3301      	adds	r3, #1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800272a:	687b      	ldr	r3, [r7, #4]
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40021000 	.word	0x40021000
 800273c:	007a1200 	.word	0x007a1200
 8002740:	00f42400 	.word	0x00f42400

08002744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800274c:	2300      	movs	r3, #0
 800274e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002750:	2300      	movs	r3, #0
 8002752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8098 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b40      	ldr	r3, [pc, #256]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	4a3f      	ldr	r2, [pc, #252]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277c:	6593      	str	r3, [r2, #88]	@ 0x58
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800278e:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a39      	ldr	r2, [pc, #228]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800279a:	f7fe fca7 	bl	80010ec <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7fe fca3 	bl	80010ec <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	74fb      	strb	r3, [r7, #19]
        break;
 80027b4:	e005      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b6:	4b30      	ldr	r3, [pc, #192]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0ef      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d159      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01e      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d019      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f0:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002800:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002810:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe fc63 	bl	80010ec <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002828:	e00b      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fc5f 	bl	80010ec <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d902      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	74fb      	strb	r3, [r7, #19]
            break;
 8002840:	e006      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002842:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ec      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10b      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	4903      	ldr	r1, [pc, #12]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800286c:	e008      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	74bb      	strb	r3, [r7, #18]
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002880:	7c7b      	ldrb	r3, [r7, #17]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4ba6      	ldr	r3, [pc, #664]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	4aa5      	ldr	r2, [pc, #660]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289e:	4ba0      	ldr	r3, [pc, #640]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f023 0203 	bic.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	499c      	ldr	r1, [pc, #624]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c0:	4b97      	ldr	r3, [pc, #604]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f023 020c 	bic.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4994      	ldr	r1, [pc, #592]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	498b      	ldr	r1, [pc, #556]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002904:	4b86      	ldr	r3, [pc, #536]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	4983      	ldr	r1, [pc, #524]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002926:	4b7e      	ldr	r3, [pc, #504]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	497a      	ldr	r1, [pc, #488]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002948:	4b75      	ldr	r3, [pc, #468]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	4972      	ldr	r1, [pc, #456]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800296a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002970:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4969      	ldr	r1, [pc, #420]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298c:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4961      	ldr	r1, [pc, #388]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	4958      	ldr	r1, [pc, #352]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	4950      	ldr	r1, [pc, #320]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a08:	4b45      	ldr	r3, [pc, #276]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	4942      	ldr	r1, [pc, #264]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a26:	d105      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a40:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	4934      	ldr	r1, [pc, #208]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a2e      	ldr	r2, [pc, #184]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a78:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a86:	4926      	ldr	r1, [pc, #152]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a20      	ldr	r2, [pc, #128]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abe:	4918      	ldr	r1, [pc, #96]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a12      	ldr	r2, [pc, #72]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	490a      	ldr	r1, [pc, #40]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b06:	d105      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e049      	b.n	8002bca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f88c 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fdac 	bl	80036c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e049      	b.n	8002c78 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f841 	bl	8002c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 fd55 	bl	80036c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e03c      	b.n	8002d3a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d109      	bne.n	8002cda <HAL_TIM_PWM_Start_DMA+0x46>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e02f      	b.n	8002d3a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d109      	bne.n	8002cf4 <HAL_TIM_PWM_Start_DMA+0x60>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e022      	b.n	8002d3a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d109      	bne.n	8002d0e <HAL_TIM_PWM_Start_DMA+0x7a>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e015      	b.n	8002d3a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d109      	bne.n	8002d28 <HAL_TIM_PWM_Start_DMA+0x94>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e008      	b.n	8002d3a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e1a6      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e03c      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d109      	bne.n	8002d76 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e02f      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d109      	bne.n	8002d90 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e022      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d109      	bne.n	8002daa <HAL_TIM_PWM_Start_DMA+0x116>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	e015      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d109      	bne.n	8002dc4 <HAL_TIM_PWM_Start_DMA+0x130>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e008      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d034      	beq.n	8002e44 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_TIM_PWM_Start_DMA+0x152>
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e152      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start_DMA+0x166>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002df8:	e026      	b.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start_DMA+0x176>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e08:	e01e      	b.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start_DMA+0x186>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e18:	e016      	b.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start_DMA+0x196>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e28:	e00e      	b.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e38:	e006      	b.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e42:	e001      	b.n	8002e48 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e123      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	f200 80ae 	bhi.w	8002fac <HAL_TIM_PWM_Start_DMA+0x318>
 8002e50:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002fad 	.word	0x08002fad
 8002e60:	08002fad 	.word	0x08002fad
 8002e64:	08002fad 	.word	0x08002fad
 8002e68:	08002ed5 	.word	0x08002ed5
 8002e6c:	08002fad 	.word	0x08002fad
 8002e70:	08002fad 	.word	0x08002fad
 8002e74:	08002fad 	.word	0x08002fad
 8002e78:	08002f1d 	.word	0x08002f1d
 8002e7c:	08002fad 	.word	0x08002fad
 8002e80:	08002fad 	.word	0x08002fad
 8002e84:	08002fad 	.word	0x08002fad
 8002e88:	08002f65 	.word	0x08002f65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	4a81      	ldr	r2, [pc, #516]	@ (8003098 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002e92:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	4a80      	ldr	r2, [pc, #512]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x408>)
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	4a7f      	ldr	r2, [pc, #508]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002ea2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3334      	adds	r3, #52	@ 0x34
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	f7fe fb00 	bl	80014b8 <HAL_DMA_Start_IT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0e6      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed0:	60da      	str	r2, [r3, #12]
      break;
 8002ed2:	e06e      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	4a6f      	ldr	r2, [pc, #444]	@ (8003098 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002eda:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x408>)
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	4a6d      	ldr	r2, [pc, #436]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002eea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3338      	adds	r3, #56	@ 0x38
 8002ef8:	461a      	mov	r2, r3
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	f7fe fadc 	bl	80014b8 <HAL_DMA_Start_IT>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0c2      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f18:	60da      	str	r2, [r3, #12]
      break;
 8002f1a:	e04a      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	4a5d      	ldr	r2, [pc, #372]	@ (8003098 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002f22:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4a5c      	ldr	r2, [pc, #368]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x408>)
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	4a5b      	ldr	r2, [pc, #364]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002f32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	333c      	adds	r3, #60	@ 0x3c
 8002f40:	461a      	mov	r2, r3
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	f7fe fab8 	bl	80014b8 <HAL_DMA_Start_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e09e      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f60:	60da      	str	r2, [r3, #12]
      break;
 8002f62:	e026      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4a4b      	ldr	r2, [pc, #300]	@ (8003098 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	4a4a      	ldr	r2, [pc, #296]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x408>)
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	4a49      	ldr	r2, [pc, #292]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3340      	adds	r3, #64	@ 0x40
 8002f88:	461a      	mov	r2, r3
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	f7fe fa94 	bl	80014b8 <HAL_DMA_Start_IT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07a      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fa8:	60da      	str	r2, [r3, #12]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d16a      	bne.n	800308e <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 ffab 	bl	8003f1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a36      	ldr	r2, [pc, #216]	@ (80030a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x364>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a34      	ldr	r2, [pc, #208]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x364>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a33      	ldr	r2, [pc, #204]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x418>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x364>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a31      	ldr	r2, [pc, #196]	@ (80030b0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x364>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a30      	ldr	r2, [pc, #192]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_PWM_Start_DMA+0x368>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_TIM_PWM_Start_DMA+0x36a>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a23      	ldr	r2, [pc, #140]	@ (80030a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003024:	d013      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a23      	ldr	r2, [pc, #140]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x424>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a21      	ldr	r2, [pc, #132]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x428>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x418>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d115      	bne.n	800307a <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b06      	cmp	r3, #6
 800305e:	d015      	beq.n	800308c <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003066:	d011      	beq.n	800308c <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	e008      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e000      	b.n	800308e <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	080035af 	.word	0x080035af
 800309c:	08003657 	.word	0x08003657
 80030a0:	0800351d 	.word	0x0800351d
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40013400 	.word	0x40013400
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	00010007 	.word	0x00010007

080030c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030de:	2302      	movs	r3, #2
 80030e0:	e0ff      	b.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b14      	cmp	r3, #20
 80030ee:	f200 80f0 	bhi.w	80032d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030f2:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	0800314d 	.word	0x0800314d
 80030fc:	080032d3 	.word	0x080032d3
 8003100:	080032d3 	.word	0x080032d3
 8003104:	080032d3 	.word	0x080032d3
 8003108:	0800318d 	.word	0x0800318d
 800310c:	080032d3 	.word	0x080032d3
 8003110:	080032d3 	.word	0x080032d3
 8003114:	080032d3 	.word	0x080032d3
 8003118:	080031cf 	.word	0x080031cf
 800311c:	080032d3 	.word	0x080032d3
 8003120:	080032d3 	.word	0x080032d3
 8003124:	080032d3 	.word	0x080032d3
 8003128:	0800320f 	.word	0x0800320f
 800312c:	080032d3 	.word	0x080032d3
 8003130:	080032d3 	.word	0x080032d3
 8003134:	080032d3 	.word	0x080032d3
 8003138:	08003251 	.word	0x08003251
 800313c:	080032d3 	.word	0x080032d3
 8003140:	080032d3 	.word	0x080032d3
 8003144:	080032d3 	.word	0x080032d3
 8003148:	08003291 	.word	0x08003291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fb50 	bl	80037f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	619a      	str	r2, [r3, #24]
      break;
 800318a:	e0a5      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fbc0 	bl	8003918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	619a      	str	r2, [r3, #24]
      break;
 80031cc:	e084      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fc29 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0208 	orr.w	r2, r2, #8
 80031e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0204 	bic.w	r2, r2, #4
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
      break;
 800320c:	e064      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fc91 	bl	8003b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69d9      	ldr	r1, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	61da      	str	r2, [r3, #28]
      break;
 800324e:	e043      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fcfa 	bl	8003c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800328e:	e023      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fd3e 	bl	8003d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032d0:	e002      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
      break;
 80032d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop

080032ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIM_ConfigClockSource+0x1c>
 8003304:	2302      	movs	r3, #2
 8003306:	e0de      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x1da>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a63      	ldr	r2, [pc, #396]	@ (80034d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f000 80a9 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 8003348:	4a61      	ldr	r2, [pc, #388]	@ (80034d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f200 80ae 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003350:	4a60      	ldr	r2, [pc, #384]	@ (80034d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	f000 80a1 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 8003358:	4a5e      	ldr	r2, [pc, #376]	@ (80034d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f200 80a6 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003360:	4a5d      	ldr	r2, [pc, #372]	@ (80034d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f000 8099 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 8003368:	4a5b      	ldr	r2, [pc, #364]	@ (80034d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800336a:	4293      	cmp	r3, r2
 800336c:	f200 809e 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003370:	4a5a      	ldr	r2, [pc, #360]	@ (80034dc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f000 8091 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 8003378:	4a58      	ldr	r2, [pc, #352]	@ (80034dc <HAL_TIM_ConfigClockSource+0x1f0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f200 8096 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003380:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003384:	f000 8089 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 8003388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800338c:	f200 808e 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003394:	d03e      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x128>
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339a:	f200 8087 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a2:	f000 8086 	beq.w	80034b2 <HAL_TIM_ConfigClockSource+0x1c6>
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033aa:	d87f      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033ac:	2b70      	cmp	r3, #112	@ 0x70
 80033ae:	d01a      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xfa>
 80033b0:	2b70      	cmp	r3, #112	@ 0x70
 80033b2:	d87b      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033b4:	2b60      	cmp	r3, #96	@ 0x60
 80033b6:	d050      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x16e>
 80033b8:	2b60      	cmp	r3, #96	@ 0x60
 80033ba:	d877      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033bc:	2b50      	cmp	r3, #80	@ 0x50
 80033be:	d03c      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x14e>
 80033c0:	2b50      	cmp	r3, #80	@ 0x50
 80033c2:	d873      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033c4:	2b40      	cmp	r3, #64	@ 0x40
 80033c6:	d058      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x18e>
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d86f      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033cc:	2b30      	cmp	r3, #48	@ 0x30
 80033ce:	d064      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 80033d0:	2b30      	cmp	r3, #48	@ 0x30
 80033d2:	d86b      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d060      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d867      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d05a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x1ae>
 80033e4:	e062      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033f6:	f000 fd71 	bl	8003edc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	609a      	str	r2, [r3, #8]
      break;
 8003412:	e04f      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003424:	f000 fd5a 	bl	8003edc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003436:	609a      	str	r2, [r3, #8]
      break;
 8003438:	e03c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	461a      	mov	r2, r3
 8003448:	f000 fccc 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2150      	movs	r1, #80	@ 0x50
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fd25 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003458:	e02c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003466:	461a      	mov	r2, r3
 8003468:	f000 fceb 	bl	8003e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2160      	movs	r1, #96	@ 0x60
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fd15 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003478:	e01c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003486:	461a      	mov	r2, r3
 8003488:	f000 fcac 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2140      	movs	r1, #64	@ 0x40
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fd05 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003498:	e00c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 fcfc 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80034aa:	e003      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e000      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80034b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	00100070 	.word	0x00100070
 80034d4:	00100040 	.word	0x00100040
 80034d8:	00100030 	.word	0x00100030
 80034dc:	00100020 	.word	0x00100020

080034e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003542:	e02a      	b.n	800359a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d107      	bne.n	800355e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2202      	movs	r2, #2
 8003552:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800355c:	e01d      	b.n	800359a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2204      	movs	r2, #4
 800356c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003576:	e010      	b.n	800359a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d107      	bne.n	8003592 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2208      	movs	r2, #8
 8003586:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003590:	e003      	b.n	800359a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ffb4 	bl	8003508 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	771a      	strb	r2, [r3, #28]
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d10b      	bne.n	80035de <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d136      	bne.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035dc:	e031      	b.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d10b      	bne.n	8003600 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d125      	bne.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035fe:	e020      	b.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d10b      	bne.n	8003622 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2204      	movs	r2, #4
 800360e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d114      	bne.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003620:	e00f      	b.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d10a      	bne.n	8003642 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2208      	movs	r2, #8
 8003630:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff ff4c 	bl	80034e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	771a      	strb	r2, [r3, #28]
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d103      	bne.n	8003676 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	771a      	strb	r2, [r3, #28]
 8003674:	e019      	b.n	80036aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d103      	bne.n	8003688 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2202      	movs	r2, #2
 8003684:	771a      	strb	r2, [r3, #28]
 8003686:	e010      	b.n	80036aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	d103      	bne.n	800369a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2204      	movs	r2, #4
 8003696:	771a      	strb	r2, [r3, #28]
 8003698:	e007      	b.n	80036aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d102      	bne.n	80036aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2208      	movs	r2, #8
 80036a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ff22 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	771a      	strb	r2, [r3, #28]
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a42      	ldr	r2, [pc, #264]	@ (80037dc <TIM_Base_SetConfig+0x11c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00f      	beq.n	80036f8 <TIM_Base_SetConfig+0x38>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036de:	d00b      	beq.n	80036f8 <TIM_Base_SetConfig+0x38>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3f      	ldr	r2, [pc, #252]	@ (80037e0 <TIM_Base_SetConfig+0x120>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d007      	beq.n	80036f8 <TIM_Base_SetConfig+0x38>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a3e      	ldr	r2, [pc, #248]	@ (80037e4 <TIM_Base_SetConfig+0x124>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_Base_SetConfig+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a3d      	ldr	r2, [pc, #244]	@ (80037e8 <TIM_Base_SetConfig+0x128>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d108      	bne.n	800370a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a33      	ldr	r2, [pc, #204]	@ (80037dc <TIM_Base_SetConfig+0x11c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01b      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003718:	d017      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <TIM_Base_SetConfig+0x120>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2f      	ldr	r2, [pc, #188]	@ (80037e4 <TIM_Base_SetConfig+0x124>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00f      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a2e      	ldr	r2, [pc, #184]	@ (80037e8 <TIM_Base_SetConfig+0x128>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00b      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2d      	ldr	r2, [pc, #180]	@ (80037ec <TIM_Base_SetConfig+0x12c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a2c      	ldr	r2, [pc, #176]	@ (80037f0 <TIM_Base_SetConfig+0x130>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <TIM_Base_SetConfig+0x134>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a16      	ldr	r2, [pc, #88]	@ (80037dc <TIM_Base_SetConfig+0x11c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00f      	beq.n	80037a8 <TIM_Base_SetConfig+0xe8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <TIM_Base_SetConfig+0x128>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00b      	beq.n	80037a8 <TIM_Base_SetConfig+0xe8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <TIM_Base_SetConfig+0x12c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d007      	beq.n	80037a8 <TIM_Base_SetConfig+0xe8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a15      	ldr	r2, [pc, #84]	@ (80037f0 <TIM_Base_SetConfig+0x130>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <TIM_Base_SetConfig+0xe8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a14      	ldr	r2, [pc, #80]	@ (80037f4 <TIM_Base_SetConfig+0x134>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]
  }
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40013400 	.word	0x40013400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800

080037f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f023 0201 	bic.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 0302 	bic.w	r3, r3, #2
 8003844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <TIM_OC1_SetConfig+0x10c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00f      	beq.n	8003878 <TIM_OC1_SetConfig+0x80>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <TIM_OC1_SetConfig+0x110>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00b      	beq.n	8003878 <TIM_OC1_SetConfig+0x80>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2a      	ldr	r2, [pc, #168]	@ (800390c <TIM_OC1_SetConfig+0x114>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <TIM_OC1_SetConfig+0x80>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a29      	ldr	r2, [pc, #164]	@ (8003910 <TIM_OC1_SetConfig+0x118>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC1_SetConfig+0x80>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a28      	ldr	r2, [pc, #160]	@ (8003914 <TIM_OC1_SetConfig+0x11c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d10c      	bne.n	8003892 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0308 	bic.w	r3, r3, #8
 800387e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1b      	ldr	r2, [pc, #108]	@ (8003904 <TIM_OC1_SetConfig+0x10c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00f      	beq.n	80038ba <TIM_OC1_SetConfig+0xc2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1a      	ldr	r2, [pc, #104]	@ (8003908 <TIM_OC1_SetConfig+0x110>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_OC1_SetConfig+0xc2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a19      	ldr	r2, [pc, #100]	@ (800390c <TIM_OC1_SetConfig+0x114>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_OC1_SetConfig+0xc2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <TIM_OC1_SetConfig+0x118>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC1_SetConfig+0xc2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a17      	ldr	r2, [pc, #92]	@ (8003914 <TIM_OC1_SetConfig+0x11c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d111      	bne.n	80038de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40013400 	.word	0x40013400
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800

08003918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f023 0210 	bic.w	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800394a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0320 	bic.w	r3, r3, #32
 8003966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a28      	ldr	r2, [pc, #160]	@ (8003a18 <TIM_OC2_SetConfig+0x100>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_OC2_SetConfig+0x6c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a27      	ldr	r2, [pc, #156]	@ (8003a1c <TIM_OC2_SetConfig+0x104>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10d      	bne.n	80039a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800399e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <TIM_OC2_SetConfig+0x100>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00f      	beq.n	80039c8 <TIM_OC2_SetConfig+0xb0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <TIM_OC2_SetConfig+0x104>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_OC2_SetConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a20 <TIM_OC2_SetConfig+0x108>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_OC2_SetConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003a24 <TIM_OC2_SetConfig+0x10c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_OC2_SetConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <TIM_OC2_SetConfig+0x110>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d113      	bne.n	80039f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a27      	ldr	r2, [pc, #156]	@ (8003b28 <TIM_OC3_SetConfig+0xfc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC3_SetConfig+0x6a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <TIM_OC3_SetConfig+0x100>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10d      	bne.n	8003ab2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <TIM_OC3_SetConfig+0xfc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_OC3_SetConfig+0xae>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b2c <TIM_OC3_SetConfig+0x100>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_OC3_SetConfig+0xae>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b30 <TIM_OC3_SetConfig+0x104>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_OC3_SetConfig+0xae>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a19      	ldr	r2, [pc, #100]	@ (8003b34 <TIM_OC3_SetConfig+0x108>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_OC3_SetConfig+0xae>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <TIM_OC3_SetConfig+0x10c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d113      	bne.n	8003b02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40013400 	.word	0x40013400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800

08003b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	031b      	lsls	r3, r3, #12
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a28      	ldr	r2, [pc, #160]	@ (8003c3c <TIM_OC4_SetConfig+0x100>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_OC4_SetConfig+0x6c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a27      	ldr	r2, [pc, #156]	@ (8003c40 <TIM_OC4_SetConfig+0x104>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10d      	bne.n	8003bc4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	031b      	lsls	r3, r3, #12
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <TIM_OC4_SetConfig+0x100>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_OC4_SetConfig+0xb0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1c      	ldr	r2, [pc, #112]	@ (8003c40 <TIM_OC4_SetConfig+0x104>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_OC4_SetConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c44 <TIM_OC4_SetConfig+0x108>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_OC4_SetConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1a      	ldr	r2, [pc, #104]	@ (8003c48 <TIM_OC4_SetConfig+0x10c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC4_SetConfig+0xb0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a19      	ldr	r2, [pc, #100]	@ (8003c4c <TIM_OC4_SetConfig+0x110>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d113      	bne.n	8003c14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	@ (8003d04 <TIM_OC5_SetConfig+0xb4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00f      	beq.n	8003cca <TIM_OC5_SetConfig+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a16      	ldr	r2, [pc, #88]	@ (8003d08 <TIM_OC5_SetConfig+0xb8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <TIM_OC5_SetConfig+0x7a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a15      	ldr	r2, [pc, #84]	@ (8003d0c <TIM_OC5_SetConfig+0xbc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <TIM_OC5_SetConfig+0x7a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <TIM_OC5_SetConfig+0xc0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <TIM_OC5_SetConfig+0x7a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <TIM_OC5_SetConfig+0xc4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d109      	bne.n	8003cde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	051b      	lsls	r3, r3, #20
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a18      	ldr	r2, [pc, #96]	@ (8003dd0 <TIM_OC6_SetConfig+0xb8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00f      	beq.n	8003d94 <TIM_OC6_SetConfig+0x7c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a17      	ldr	r2, [pc, #92]	@ (8003dd4 <TIM_OC6_SetConfig+0xbc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_OC6_SetConfig+0x7c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	@ (8003dd8 <TIM_OC6_SetConfig+0xc0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_OC6_SetConfig+0x7c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <TIM_OC6_SetConfig+0xc4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC6_SetConfig+0x7c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <TIM_OC6_SetConfig+0xc8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d109      	bne.n	8003da8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 030a 	bic.w	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0210 	bic.w	r2, r3, #16
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f043 0307 	orr.w	r3, r3, #7
 8003ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2201      	movs	r2, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e065      	b.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2b      	ldr	r2, [pc, #172]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff6:	d013      	beq.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a12      	ldr	r2, [pc, #72]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a13      	ldr	r2, [pc, #76]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10c      	bne.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40013400 	.word	0x40013400
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40014000 	.word	0x40014000

0800406c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e073      	b.n	8004170 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d11c      	bne.n	800415e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	051b      	lsls	r3, r3, #20
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400

08004184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e042      	b.n	800421c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fc fe79 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2224      	movs	r2, #36	@ 0x24
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb82 	bl	80048d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8b3 	bl	8004340 <UART_SetConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e01b      	b.n	800421c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fc01 	bl	8004a1c <UART_CheckIdleState>
 800421a:	4603      	mov	r3, r0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	2b20      	cmp	r3, #32
 800423c:	d17b      	bne.n	8004336 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_UART_Transmit+0x26>
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e074      	b.n	8004338 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2221      	movs	r2, #33	@ 0x21
 800425a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425e:	f7fc ff45 	bl	80010ec <HAL_GetTick>
 8004262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427c:	d108      	bne.n	8004290 <HAL_UART_Transmit+0x6c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e003      	b.n	8004298 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004298:	e030      	b.n	80042fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2180      	movs	r1, #128	@ 0x80
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fc63 	bl	8004b70 <UART_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e03d      	b.n	8004338 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	3302      	adds	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e007      	b.n	80042ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1c8      	bne.n	800429a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	2140      	movs	r1, #64	@ 0x40
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fc2c 	bl	8004b70 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e006      	b.n	8004338 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b08c      	sub	sp, #48	@ 0x30
 8004346:	af00      	add	r7, sp, #0
 8004348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	431a      	orrs	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4313      	orrs	r3, r2
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4bab      	ldr	r3, [pc, #684]	@ (800461c <UART_SetConfig+0x2dc>)
 8004370:	4013      	ands	r3, r2
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004378:	430b      	orrs	r3, r1
 800437a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4aa0      	ldr	r2, [pc, #640]	@ (8004620 <UART_SetConfig+0x2e0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a8:	4313      	orrs	r3, r2
 80043aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	f023 010f 	bic.w	r1, r3, #15
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a91      	ldr	r2, [pc, #580]	@ (8004624 <UART_SetConfig+0x2e4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d125      	bne.n	8004430 <UART_SetConfig+0xf0>
 80043e4:	4b90      	ldr	r3, [pc, #576]	@ (8004628 <UART_SetConfig+0x2e8>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d81a      	bhi.n	8004428 <UART_SetConfig+0xe8>
 80043f2:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <UART_SetConfig+0xb8>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004409 	.word	0x08004409
 80043fc:	08004419 	.word	0x08004419
 8004400:	08004411 	.word	0x08004411
 8004404:	08004421 	.word	0x08004421
 8004408:	2301      	movs	r3, #1
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440e:	e0d6      	b.n	80045be <UART_SetConfig+0x27e>
 8004410:	2302      	movs	r3, #2
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004416:	e0d2      	b.n	80045be <UART_SetConfig+0x27e>
 8004418:	2304      	movs	r3, #4
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e0ce      	b.n	80045be <UART_SetConfig+0x27e>
 8004420:	2308      	movs	r3, #8
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004426:	e0ca      	b.n	80045be <UART_SetConfig+0x27e>
 8004428:	2310      	movs	r3, #16
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442e:	e0c6      	b.n	80045be <UART_SetConfig+0x27e>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a7d      	ldr	r2, [pc, #500]	@ (800462c <UART_SetConfig+0x2ec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d138      	bne.n	80044ac <UART_SetConfig+0x16c>
 800443a:	4b7b      	ldr	r3, [pc, #492]	@ (8004628 <UART_SetConfig+0x2e8>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d82d      	bhi.n	80044a4 <UART_SetConfig+0x164>
 8004448:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <UART_SetConfig+0x110>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004485 	.word	0x08004485
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080044a5 	.word	0x080044a5
 800445c:	080044a5 	.word	0x080044a5
 8004460:	08004495 	.word	0x08004495
 8004464:	080044a5 	.word	0x080044a5
 8004468:	080044a5 	.word	0x080044a5
 800446c:	080044a5 	.word	0x080044a5
 8004470:	0800448d 	.word	0x0800448d
 8004474:	080044a5 	.word	0x080044a5
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044a5 	.word	0x080044a5
 8004480:	0800449d 	.word	0x0800449d
 8004484:	2300      	movs	r3, #0
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e098      	b.n	80045be <UART_SetConfig+0x27e>
 800448c:	2302      	movs	r3, #2
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e094      	b.n	80045be <UART_SetConfig+0x27e>
 8004494:	2304      	movs	r3, #4
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e090      	b.n	80045be <UART_SetConfig+0x27e>
 800449c:	2308      	movs	r3, #8
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a2:	e08c      	b.n	80045be <UART_SetConfig+0x27e>
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044aa:	e088      	b.n	80045be <UART_SetConfig+0x27e>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004630 <UART_SetConfig+0x2f0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d125      	bne.n	8004502 <UART_SetConfig+0x1c2>
 80044b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004628 <UART_SetConfig+0x2e8>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044c0:	2b30      	cmp	r3, #48	@ 0x30
 80044c2:	d016      	beq.n	80044f2 <UART_SetConfig+0x1b2>
 80044c4:	2b30      	cmp	r3, #48	@ 0x30
 80044c6:	d818      	bhi.n	80044fa <UART_SetConfig+0x1ba>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d00a      	beq.n	80044e2 <UART_SetConfig+0x1a2>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d814      	bhi.n	80044fa <UART_SetConfig+0x1ba>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <UART_SetConfig+0x19a>
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d008      	beq.n	80044ea <UART_SetConfig+0x1aa>
 80044d8:	e00f      	b.n	80044fa <UART_SetConfig+0x1ba>
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e0:	e06d      	b.n	80045be <UART_SetConfig+0x27e>
 80044e2:	2302      	movs	r3, #2
 80044e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e8:	e069      	b.n	80045be <UART_SetConfig+0x27e>
 80044ea:	2304      	movs	r3, #4
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f0:	e065      	b.n	80045be <UART_SetConfig+0x27e>
 80044f2:	2308      	movs	r3, #8
 80044f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f8:	e061      	b.n	80045be <UART_SetConfig+0x27e>
 80044fa:	2310      	movs	r3, #16
 80044fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004500:	e05d      	b.n	80045be <UART_SetConfig+0x27e>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a4b      	ldr	r2, [pc, #300]	@ (8004634 <UART_SetConfig+0x2f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d125      	bne.n	8004558 <UART_SetConfig+0x218>
 800450c:	4b46      	ldr	r3, [pc, #280]	@ (8004628 <UART_SetConfig+0x2e8>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004516:	2bc0      	cmp	r3, #192	@ 0xc0
 8004518:	d016      	beq.n	8004548 <UART_SetConfig+0x208>
 800451a:	2bc0      	cmp	r3, #192	@ 0xc0
 800451c:	d818      	bhi.n	8004550 <UART_SetConfig+0x210>
 800451e:	2b80      	cmp	r3, #128	@ 0x80
 8004520:	d00a      	beq.n	8004538 <UART_SetConfig+0x1f8>
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d814      	bhi.n	8004550 <UART_SetConfig+0x210>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <UART_SetConfig+0x1f0>
 800452a:	2b40      	cmp	r3, #64	@ 0x40
 800452c:	d008      	beq.n	8004540 <UART_SetConfig+0x200>
 800452e:	e00f      	b.n	8004550 <UART_SetConfig+0x210>
 8004530:	2300      	movs	r3, #0
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e042      	b.n	80045be <UART_SetConfig+0x27e>
 8004538:	2302      	movs	r3, #2
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453e:	e03e      	b.n	80045be <UART_SetConfig+0x27e>
 8004540:	2304      	movs	r3, #4
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e03a      	b.n	80045be <UART_SetConfig+0x27e>
 8004548:	2308      	movs	r3, #8
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454e:	e036      	b.n	80045be <UART_SetConfig+0x27e>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004556:	e032      	b.n	80045be <UART_SetConfig+0x27e>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a30      	ldr	r2, [pc, #192]	@ (8004620 <UART_SetConfig+0x2e0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d12a      	bne.n	80045b8 <UART_SetConfig+0x278>
 8004562:	4b31      	ldr	r3, [pc, #196]	@ (8004628 <UART_SetConfig+0x2e8>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800456c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004570:	d01a      	beq.n	80045a8 <UART_SetConfig+0x268>
 8004572:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004576:	d81b      	bhi.n	80045b0 <UART_SetConfig+0x270>
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d00c      	beq.n	8004598 <UART_SetConfig+0x258>
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004582:	d815      	bhi.n	80045b0 <UART_SetConfig+0x270>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <UART_SetConfig+0x250>
 8004588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458c:	d008      	beq.n	80045a0 <UART_SetConfig+0x260>
 800458e:	e00f      	b.n	80045b0 <UART_SetConfig+0x270>
 8004590:	2300      	movs	r3, #0
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e012      	b.n	80045be <UART_SetConfig+0x27e>
 8004598:	2302      	movs	r3, #2
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459e:	e00e      	b.n	80045be <UART_SetConfig+0x27e>
 80045a0:	2304      	movs	r3, #4
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e00a      	b.n	80045be <UART_SetConfig+0x27e>
 80045a8:	2308      	movs	r3, #8
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ae:	e006      	b.n	80045be <UART_SetConfig+0x27e>
 80045b0:	2310      	movs	r3, #16
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b6:	e002      	b.n	80045be <UART_SetConfig+0x27e>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <UART_SetConfig+0x2e0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f040 80a8 	bne.w	800471a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d834      	bhi.n	800463c <UART_SetConfig+0x2fc>
 80045d2:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <UART_SetConfig+0x298>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	0800463d 	.word	0x0800463d
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800460b 	.word	0x0800460b
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800463d 	.word	0x0800463d
 80045f4:	0800463d 	.word	0x0800463d
 80045f8:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe f830 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004602:	e021      	b.n	8004648 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <UART_SetConfig+0x2f8>)
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004608:	e01e      	b.n	8004648 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fd ffbb 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800460e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004610:	e01a      	b.n	8004648 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004618:	e016      	b.n	8004648 <UART_SetConfig+0x308>
 800461a:	bf00      	nop
 800461c:	cfff69f3 	.word	0xcfff69f3
 8004620:	40008000 	.word	0x40008000
 8004624:	40013800 	.word	0x40013800
 8004628:	40021000 	.word	0x40021000
 800462c:	40004400 	.word	0x40004400
 8004630:	40004800 	.word	0x40004800
 8004634:	40004c00 	.word	0x40004c00
 8004638:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004646:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 812a 	beq.w	80048a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	4a9e      	ldr	r2, [pc, #632]	@ (80048d0 <UART_SetConfig+0x590>)
 8004656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800465a:	461a      	mov	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004662:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	429a      	cmp	r2, r3
 8004672:	d305      	bcc.n	8004680 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	d903      	bls.n	8004688 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004686:	e10d      	b.n	80048a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	2200      	movs	r2, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	60fa      	str	r2, [r7, #12]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	4a8e      	ldr	r2, [pc, #568]	@ (80048d0 <UART_SetConfig+0x590>)
 8004696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469a:	b29b      	uxth	r3, r3
 800469c:	2200      	movs	r2, #0
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046aa:	f7fb fdb5 	bl	8000218 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	020b      	lsls	r3, r1, #8
 80046c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046c4:	0202      	lsls	r2, r0, #8
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	6849      	ldr	r1, [r1, #4]
 80046ca:	0849      	lsrs	r1, r1, #1
 80046cc:	2000      	movs	r0, #0
 80046ce:	460c      	mov	r4, r1
 80046d0:	4605      	mov	r5, r0
 80046d2:	eb12 0804 	adds.w	r8, r2, r4
 80046d6:	eb43 0905 	adc.w	r9, r3, r5
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	469a      	mov	sl, r3
 80046e2:	4693      	mov	fp, r2
 80046e4:	4652      	mov	r2, sl
 80046e6:	465b      	mov	r3, fp
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	f7fb fd94 	bl	8000218 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4613      	mov	r3, r2
 80046f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046fe:	d308      	bcc.n	8004712 <UART_SetConfig+0x3d2>
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004706:	d204      	bcs.n	8004712 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	60da      	str	r2, [r3, #12]
 8004710:	e0c8      	b.n	80048a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004718:	e0c4      	b.n	80048a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004722:	d167      	bne.n	80047f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004724:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004728:	2b08      	cmp	r3, #8
 800472a:	d828      	bhi.n	800477e <UART_SetConfig+0x43e>
 800472c:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <UART_SetConfig+0x3f4>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fd ff82 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 800475c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fd ff94 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8004764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004766:	e010      	b.n	800478a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b5a      	ldr	r3, [pc, #360]	@ (80048d4 <UART_SetConfig+0x594>)
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800476c:	e00d      	b.n	800478a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fd ff09 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8004772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004774:	e009      	b.n	800478a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800477c:	e005      	b.n	800478a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8089 	beq.w	80048a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	4a4e      	ldr	r2, [pc, #312]	@ (80048d0 <UART_SetConfig+0x590>)
 8004798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479c:	461a      	mov	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a4:	005a      	lsls	r2, r3, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	441a      	add	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d916      	bls.n	80047ec <UART_SetConfig+0x4ac>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c4:	d212      	bcs.n	80047ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f023 030f 	bic.w	r3, r3, #15
 80047ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	b29a      	uxth	r2, r3
 80047dc:	8bfb      	ldrh	r3, [r7, #30]
 80047de:	4313      	orrs	r3, r2
 80047e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	8bfa      	ldrh	r2, [r7, #30]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e05b      	b.n	80048a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047f2:	e057      	b.n	80048a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d828      	bhi.n	800484e <UART_SetConfig+0x50e>
 80047fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <UART_SetConfig+0x4c4>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	0800484f 	.word	0x0800484f
 8004814:	0800483f 	.word	0x0800483f
 8004818:	0800484f 	.word	0x0800484f
 800481c:	0800484f 	.word	0x0800484f
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fd ff1a 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800482e:	e014      	b.n	800485a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7fd ff2c 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8004834:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004836:	e010      	b.n	800485a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <UART_SetConfig+0x594>)
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800483c:	e00d      	b.n	800485a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7fd fea1 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8004842:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004844:	e009      	b.n	800485a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800484c:	e005      	b.n	800485a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004858:	bf00      	nop
    }

    if (pclk != 0U)
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d021      	beq.n	80048a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	4a1a      	ldr	r2, [pc, #104]	@ (80048d0 <UART_SetConfig+0x590>)
 8004866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800486a:	461a      	mov	r2, r3
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	441a      	add	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	d909      	bls.n	800489e <UART_SetConfig+0x55e>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004890:	d205      	bcs.n	800489e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	b29a      	uxth	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e002      	b.n	80048a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3730      	adds	r7, #48	@ 0x30
 80048c8:	46bd      	mov	sp, r7
 80048ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ce:	bf00      	nop
 80048d0:	080058d8 	.word	0x080058d8
 80048d4:	00f42400 	.word	0x00f42400

080048d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01a      	beq.n	80049ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049d6:	d10a      	bne.n	80049ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b098      	sub	sp, #96	@ 0x60
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a2c:	f7fc fb5e 	bl	80010ec <HAL_GetTick>
 8004a30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d12f      	bne.n	8004aa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f88e 	bl	8004b70 <UART_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d022      	beq.n	8004aa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e6      	bne.n	8004a5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e063      	b.n	8004b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d149      	bne.n	8004b42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f857 	bl	8004b70 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d03c      	beq.n	8004b42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b1a:	61fa      	str	r2, [r7, #28]
 8004b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	69b9      	ldr	r1, [r7, #24]
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	617b      	str	r3, [r7, #20]
   return(result);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e5      	bne.n	8004afa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e012      	b.n	8004b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3758      	adds	r7, #88	@ 0x58
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b80:	e04f      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d04b      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fc faaf 	bl	80010ec <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e04e      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d037      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b80      	cmp	r3, #128	@ 0x80
 8004bb6:	d034      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b40      	cmp	r3, #64	@ 0x40
 8004bbc:	d031      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d110      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f838 	bl	8004c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e029      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bfc:	d111      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f81e 	bl	8004c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e00f      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d0a0      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b095      	sub	sp, #84	@ 0x54
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e3      	bne.n	8004c84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d118      	bne.n	8004cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 0310 	bic.w	r3, r3, #16
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d0a:	bf00      	nop
 8004d0c:	3754      	adds	r7, #84	@ 0x54
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e027      	b.n	8004d7c <HAL_UARTEx_DisableFifoMode+0x66>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	@ 0x24
 8004d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e02d      	b.n	8004dfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2224      	movs	r2, #36	@ 0x24
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f84f 	bl	8004e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e02d      	b.n	8004e78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	@ 0x24
 8004e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f811 	bl	8004e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ea0:	e031      	b.n	8004f06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	0e5b      	lsrs	r3, r3, #25
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	0f5b      	lsrs	r3, r3, #29
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eca:	7bbb      	ldrb	r3, [r7, #14]
 8004ecc:	7b3a      	ldrb	r2, [r7, #12]
 8004ece:	4911      	ldr	r1, [pc, #68]	@ (8004f14 <UARTEx_SetNbDataToProcess+0x94>)
 8004ed0:	5c8a      	ldrb	r2, [r1, r2]
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ed6:	7b3a      	ldrb	r2, [r7, #12]
 8004ed8:	490f      	ldr	r1, [pc, #60]	@ (8004f18 <UARTEx_SetNbDataToProcess+0x98>)
 8004eda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	7b7a      	ldrb	r2, [r7, #13]
 8004eec:	4909      	ldr	r1, [pc, #36]	@ (8004f14 <UARTEx_SetNbDataToProcess+0x94>)
 8004eee:	5c8a      	ldrb	r2, [r1, r2]
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ef4:	7b7a      	ldrb	r2, [r7, #13]
 8004ef6:	4908      	ldr	r1, [pc, #32]	@ (8004f18 <UARTEx_SetNbDataToProcess+0x98>)
 8004ef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	080058f0 	.word	0x080058f0
 8004f18:	080058f8 	.word	0x080058f8

08004f1c <std>:
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	4604      	mov	r4, r0
 8004f22:	e9c0 3300 	strd	r3, r3, [r0]
 8004f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f2a:	6083      	str	r3, [r0, #8]
 8004f2c:	8181      	strh	r1, [r0, #12]
 8004f2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f30:	81c2      	strh	r2, [r0, #14]
 8004f32:	6183      	str	r3, [r0, #24]
 8004f34:	4619      	mov	r1, r3
 8004f36:	2208      	movs	r2, #8
 8004f38:	305c      	adds	r0, #92	@ 0x5c
 8004f3a:	f000 f9e7 	bl	800530c <memset>
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x58>)
 8004f40:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x5c>)
 8004f44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <std+0x60>)
 8004f48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <std+0x64>)
 8004f4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <std+0x68>)
 8004f50:	6224      	str	r4, [r4, #32]
 8004f52:	429c      	cmp	r4, r3
 8004f54:	d006      	beq.n	8004f64 <std+0x48>
 8004f56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f5a:	4294      	cmp	r4, r2
 8004f5c:	d002      	beq.n	8004f64 <std+0x48>
 8004f5e:	33d0      	adds	r3, #208	@ 0xd0
 8004f60:	429c      	cmp	r4, r3
 8004f62:	d105      	bne.n	8004f70 <std+0x54>
 8004f64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f6c:	f000 ba46 	b.w	80053fc <__retarget_lock_init_recursive>
 8004f70:	bd10      	pop	{r4, pc}
 8004f72:	bf00      	nop
 8004f74:	0800515d 	.word	0x0800515d
 8004f78:	0800517f 	.word	0x0800517f
 8004f7c:	080051b7 	.word	0x080051b7
 8004f80:	080051db 	.word	0x080051db
 8004f84:	200004bc 	.word	0x200004bc

08004f88 <stdio_exit_handler>:
 8004f88:	4a02      	ldr	r2, [pc, #8]	@ (8004f94 <stdio_exit_handler+0xc>)
 8004f8a:	4903      	ldr	r1, [pc, #12]	@ (8004f98 <stdio_exit_handler+0x10>)
 8004f8c:	4803      	ldr	r0, [pc, #12]	@ (8004f9c <stdio_exit_handler+0x14>)
 8004f8e:	f000 b869 	b.w	8005064 <_fwalk_sglue>
 8004f92:	bf00      	nop
 8004f94:	2000000c 	.word	0x2000000c
 8004f98:	080056fd 	.word	0x080056fd
 8004f9c:	2000001c 	.word	0x2000001c

08004fa0 <cleanup_stdio>:
 8004fa0:	6841      	ldr	r1, [r0, #4]
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <cleanup_stdio+0x34>)
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	d001      	beq.n	8004fb0 <cleanup_stdio+0x10>
 8004fac:	f000 fba6 	bl	80056fc <_fflush_r>
 8004fb0:	68a1      	ldr	r1, [r4, #8]
 8004fb2:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <cleanup_stdio+0x38>)
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	d002      	beq.n	8004fbe <cleanup_stdio+0x1e>
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fb9f 	bl	80056fc <_fflush_r>
 8004fbe:	68e1      	ldr	r1, [r4, #12]
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <cleanup_stdio+0x3c>)
 8004fc2:	4299      	cmp	r1, r3
 8004fc4:	d004      	beq.n	8004fd0 <cleanup_stdio+0x30>
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fcc:	f000 bb96 	b.w	80056fc <_fflush_r>
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200004bc 	.word	0x200004bc
 8004fd8:	20000524 	.word	0x20000524
 8004fdc:	2000058c 	.word	0x2000058c

08004fe0 <global_stdio_init.part.0>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <global_stdio_init.part.0+0x30>)
 8004fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8005014 <global_stdio_init.part.0+0x34>)
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <global_stdio_init.part.0+0x38>)
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	4620      	mov	r0, r4
 8004fec:	2200      	movs	r2, #0
 8004fee:	2104      	movs	r1, #4
 8004ff0:	f7ff ff94 	bl	8004f1c <std>
 8004ff4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2109      	movs	r1, #9
 8004ffc:	f7ff ff8e 	bl	8004f1c <std>
 8005000:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005004:	2202      	movs	r2, #2
 8005006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500a:	2112      	movs	r1, #18
 800500c:	f7ff bf86 	b.w	8004f1c <std>
 8005010:	200005f4 	.word	0x200005f4
 8005014:	200004bc 	.word	0x200004bc
 8005018:	08004f89 	.word	0x08004f89

0800501c <__sfp_lock_acquire>:
 800501c:	4801      	ldr	r0, [pc, #4]	@ (8005024 <__sfp_lock_acquire+0x8>)
 800501e:	f000 b9ee 	b.w	80053fe <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	200005fd 	.word	0x200005fd

08005028 <__sfp_lock_release>:
 8005028:	4801      	ldr	r0, [pc, #4]	@ (8005030 <__sfp_lock_release+0x8>)
 800502a:	f000 b9e9 	b.w	8005400 <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	200005fd 	.word	0x200005fd

08005034 <__sinit>:
 8005034:	b510      	push	{r4, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	f7ff fff0 	bl	800501c <__sfp_lock_acquire>
 800503c:	6a23      	ldr	r3, [r4, #32]
 800503e:	b11b      	cbz	r3, 8005048 <__sinit+0x14>
 8005040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005044:	f7ff bff0 	b.w	8005028 <__sfp_lock_release>
 8005048:	4b04      	ldr	r3, [pc, #16]	@ (800505c <__sinit+0x28>)
 800504a:	6223      	str	r3, [r4, #32]
 800504c:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <__sinit+0x2c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f5      	bne.n	8005040 <__sinit+0xc>
 8005054:	f7ff ffc4 	bl	8004fe0 <global_stdio_init.part.0>
 8005058:	e7f2      	b.n	8005040 <__sinit+0xc>
 800505a:	bf00      	nop
 800505c:	08004fa1 	.word	0x08004fa1
 8005060:	200005f4 	.word	0x200005f4

08005064 <_fwalk_sglue>:
 8005064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005068:	4607      	mov	r7, r0
 800506a:	4688      	mov	r8, r1
 800506c:	4614      	mov	r4, r2
 800506e:	2600      	movs	r6, #0
 8005070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005074:	f1b9 0901 	subs.w	r9, r9, #1
 8005078:	d505      	bpl.n	8005086 <_fwalk_sglue+0x22>
 800507a:	6824      	ldr	r4, [r4, #0]
 800507c:	2c00      	cmp	r4, #0
 800507e:	d1f7      	bne.n	8005070 <_fwalk_sglue+0xc>
 8005080:	4630      	mov	r0, r6
 8005082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005086:	89ab      	ldrh	r3, [r5, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d907      	bls.n	800509c <_fwalk_sglue+0x38>
 800508c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005090:	3301      	adds	r3, #1
 8005092:	d003      	beq.n	800509c <_fwalk_sglue+0x38>
 8005094:	4629      	mov	r1, r5
 8005096:	4638      	mov	r0, r7
 8005098:	47c0      	blx	r8
 800509a:	4306      	orrs	r6, r0
 800509c:	3568      	adds	r5, #104	@ 0x68
 800509e:	e7e9      	b.n	8005074 <_fwalk_sglue+0x10>

080050a0 <_puts_r>:
 80050a0:	6a03      	ldr	r3, [r0, #32]
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	6884      	ldr	r4, [r0, #8]
 80050a6:	4605      	mov	r5, r0
 80050a8:	460e      	mov	r6, r1
 80050aa:	b90b      	cbnz	r3, 80050b0 <_puts_r+0x10>
 80050ac:	f7ff ffc2 	bl	8005034 <__sinit>
 80050b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050b2:	07db      	lsls	r3, r3, #31
 80050b4:	d405      	bmi.n	80050c2 <_puts_r+0x22>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	0598      	lsls	r0, r3, #22
 80050ba:	d402      	bmi.n	80050c2 <_puts_r+0x22>
 80050bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050be:	f000 f99e 	bl	80053fe <__retarget_lock_acquire_recursive>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	0719      	lsls	r1, r3, #28
 80050c6:	d502      	bpl.n	80050ce <_puts_r+0x2e>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d135      	bne.n	800513a <_puts_r+0x9a>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 f8c5 	bl	8005260 <__swsetup_r>
 80050d6:	b380      	cbz	r0, 800513a <_puts_r+0x9a>
 80050d8:	f04f 35ff 	mov.w	r5, #4294967295
 80050dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050de:	07da      	lsls	r2, r3, #31
 80050e0:	d405      	bmi.n	80050ee <_puts_r+0x4e>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	059b      	lsls	r3, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_puts_r+0x4e>
 80050e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ea:	f000 f989 	bl	8005400 <__retarget_lock_release_recursive>
 80050ee:	4628      	mov	r0, r5
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da04      	bge.n	8005100 <_puts_r+0x60>
 80050f6:	69a2      	ldr	r2, [r4, #24]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dc17      	bgt.n	800512c <_puts_r+0x8c>
 80050fc:	290a      	cmp	r1, #10
 80050fe:	d015      	beq.n	800512c <_puts_r+0x8c>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	6022      	str	r2, [r4, #0]
 8005106:	7019      	strb	r1, [r3, #0]
 8005108:	68a3      	ldr	r3, [r4, #8]
 800510a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800510e:	3b01      	subs	r3, #1
 8005110:	60a3      	str	r3, [r4, #8]
 8005112:	2900      	cmp	r1, #0
 8005114:	d1ed      	bne.n	80050f2 <_puts_r+0x52>
 8005116:	2b00      	cmp	r3, #0
 8005118:	da11      	bge.n	800513e <_puts_r+0x9e>
 800511a:	4622      	mov	r2, r4
 800511c:	210a      	movs	r1, #10
 800511e:	4628      	mov	r0, r5
 8005120:	f000 f85f 	bl	80051e2 <__swbuf_r>
 8005124:	3001      	adds	r0, #1
 8005126:	d0d7      	beq.n	80050d8 <_puts_r+0x38>
 8005128:	250a      	movs	r5, #10
 800512a:	e7d7      	b.n	80050dc <_puts_r+0x3c>
 800512c:	4622      	mov	r2, r4
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f857 	bl	80051e2 <__swbuf_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d1e7      	bne.n	8005108 <_puts_r+0x68>
 8005138:	e7ce      	b.n	80050d8 <_puts_r+0x38>
 800513a:	3e01      	subs	r6, #1
 800513c:	e7e4      	b.n	8005108 <_puts_r+0x68>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	6022      	str	r2, [r4, #0]
 8005144:	220a      	movs	r2, #10
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	e7ee      	b.n	8005128 <_puts_r+0x88>
	...

0800514c <puts>:
 800514c:	4b02      	ldr	r3, [pc, #8]	@ (8005158 <puts+0xc>)
 800514e:	4601      	mov	r1, r0
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	f7ff bfa5 	b.w	80050a0 <_puts_r>
 8005156:	bf00      	nop
 8005158:	20000018 	.word	0x20000018

0800515c <__sread>:
 800515c:	b510      	push	{r4, lr}
 800515e:	460c      	mov	r4, r1
 8005160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005164:	f000 f8fc 	bl	8005360 <_read_r>
 8005168:	2800      	cmp	r0, #0
 800516a:	bfab      	itete	ge
 800516c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800516e:	89a3      	ldrhlt	r3, [r4, #12]
 8005170:	181b      	addge	r3, r3, r0
 8005172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005176:	bfac      	ite	ge
 8005178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800517a:	81a3      	strhlt	r3, [r4, #12]
 800517c:	bd10      	pop	{r4, pc}

0800517e <__swrite>:
 800517e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005182:	461f      	mov	r7, r3
 8005184:	898b      	ldrh	r3, [r1, #12]
 8005186:	05db      	lsls	r3, r3, #23
 8005188:	4605      	mov	r5, r0
 800518a:	460c      	mov	r4, r1
 800518c:	4616      	mov	r6, r2
 800518e:	d505      	bpl.n	800519c <__swrite+0x1e>
 8005190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005194:	2302      	movs	r3, #2
 8005196:	2200      	movs	r2, #0
 8005198:	f000 f8d0 	bl	800533c <_lseek_r>
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	4632      	mov	r2, r6
 80051aa:	463b      	mov	r3, r7
 80051ac:	4628      	mov	r0, r5
 80051ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051b2:	f000 b8e7 	b.w	8005384 <_write_r>

080051b6 <__sseek>:
 80051b6:	b510      	push	{r4, lr}
 80051b8:	460c      	mov	r4, r1
 80051ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051be:	f000 f8bd 	bl	800533c <_lseek_r>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	bf15      	itete	ne
 80051c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051d2:	81a3      	strheq	r3, [r4, #12]
 80051d4:	bf18      	it	ne
 80051d6:	81a3      	strhne	r3, [r4, #12]
 80051d8:	bd10      	pop	{r4, pc}

080051da <__sclose>:
 80051da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051de:	f000 b89d 	b.w	800531c <_close_r>

080051e2 <__swbuf_r>:
 80051e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e4:	460e      	mov	r6, r1
 80051e6:	4614      	mov	r4, r2
 80051e8:	4605      	mov	r5, r0
 80051ea:	b118      	cbz	r0, 80051f4 <__swbuf_r+0x12>
 80051ec:	6a03      	ldr	r3, [r0, #32]
 80051ee:	b90b      	cbnz	r3, 80051f4 <__swbuf_r+0x12>
 80051f0:	f7ff ff20 	bl	8005034 <__sinit>
 80051f4:	69a3      	ldr	r3, [r4, #24]
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	071a      	lsls	r2, r3, #28
 80051fc:	d501      	bpl.n	8005202 <__swbuf_r+0x20>
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	b943      	cbnz	r3, 8005214 <__swbuf_r+0x32>
 8005202:	4621      	mov	r1, r4
 8005204:	4628      	mov	r0, r5
 8005206:	f000 f82b 	bl	8005260 <__swsetup_r>
 800520a:	b118      	cbz	r0, 8005214 <__swbuf_r+0x32>
 800520c:	f04f 37ff 	mov.w	r7, #4294967295
 8005210:	4638      	mov	r0, r7
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	6922      	ldr	r2, [r4, #16]
 8005218:	1a98      	subs	r0, r3, r2
 800521a:	6963      	ldr	r3, [r4, #20]
 800521c:	b2f6      	uxtb	r6, r6
 800521e:	4283      	cmp	r3, r0
 8005220:	4637      	mov	r7, r6
 8005222:	dc05      	bgt.n	8005230 <__swbuf_r+0x4e>
 8005224:	4621      	mov	r1, r4
 8005226:	4628      	mov	r0, r5
 8005228:	f000 fa68 	bl	80056fc <_fflush_r>
 800522c:	2800      	cmp	r0, #0
 800522e:	d1ed      	bne.n	800520c <__swbuf_r+0x2a>
 8005230:	68a3      	ldr	r3, [r4, #8]
 8005232:	3b01      	subs	r3, #1
 8005234:	60a3      	str	r3, [r4, #8]
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	6022      	str	r2, [r4, #0]
 800523c:	701e      	strb	r6, [r3, #0]
 800523e:	6962      	ldr	r2, [r4, #20]
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	429a      	cmp	r2, r3
 8005244:	d004      	beq.n	8005250 <__swbuf_r+0x6e>
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	07db      	lsls	r3, r3, #31
 800524a:	d5e1      	bpl.n	8005210 <__swbuf_r+0x2e>
 800524c:	2e0a      	cmp	r6, #10
 800524e:	d1df      	bne.n	8005210 <__swbuf_r+0x2e>
 8005250:	4621      	mov	r1, r4
 8005252:	4628      	mov	r0, r5
 8005254:	f000 fa52 	bl	80056fc <_fflush_r>
 8005258:	2800      	cmp	r0, #0
 800525a:	d0d9      	beq.n	8005210 <__swbuf_r+0x2e>
 800525c:	e7d6      	b.n	800520c <__swbuf_r+0x2a>
	...

08005260 <__swsetup_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4b29      	ldr	r3, [pc, #164]	@ (8005308 <__swsetup_r+0xa8>)
 8005264:	4605      	mov	r5, r0
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	460c      	mov	r4, r1
 800526a:	b118      	cbz	r0, 8005274 <__swsetup_r+0x14>
 800526c:	6a03      	ldr	r3, [r0, #32]
 800526e:	b90b      	cbnz	r3, 8005274 <__swsetup_r+0x14>
 8005270:	f7ff fee0 	bl	8005034 <__sinit>
 8005274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005278:	0719      	lsls	r1, r3, #28
 800527a:	d422      	bmi.n	80052c2 <__swsetup_r+0x62>
 800527c:	06da      	lsls	r2, r3, #27
 800527e:	d407      	bmi.n	8005290 <__swsetup_r+0x30>
 8005280:	2209      	movs	r2, #9
 8005282:	602a      	str	r2, [r5, #0]
 8005284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	e033      	b.n	80052f8 <__swsetup_r+0x98>
 8005290:	0758      	lsls	r0, r3, #29
 8005292:	d512      	bpl.n	80052ba <__swsetup_r+0x5a>
 8005294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005296:	b141      	cbz	r1, 80052aa <__swsetup_r+0x4a>
 8005298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800529c:	4299      	cmp	r1, r3
 800529e:	d002      	beq.n	80052a6 <__swsetup_r+0x46>
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f8af 	bl	8005404 <_free_r>
 80052a6:	2300      	movs	r3, #0
 80052a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6063      	str	r3, [r4, #4]
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	81a3      	strh	r3, [r4, #12]
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	b94b      	cbnz	r3, 80052da <__swsetup_r+0x7a>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d0:	d003      	beq.n	80052da <__swsetup_r+0x7a>
 80052d2:	4621      	mov	r1, r4
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 fa5f 	bl	8005798 <__smakebuf_r>
 80052da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052de:	f013 0201 	ands.w	r2, r3, #1
 80052e2:	d00a      	beq.n	80052fa <__swsetup_r+0x9a>
 80052e4:	2200      	movs	r2, #0
 80052e6:	60a2      	str	r2, [r4, #8]
 80052e8:	6962      	ldr	r2, [r4, #20]
 80052ea:	4252      	negs	r2, r2
 80052ec:	61a2      	str	r2, [r4, #24]
 80052ee:	6922      	ldr	r2, [r4, #16]
 80052f0:	b942      	cbnz	r2, 8005304 <__swsetup_r+0xa4>
 80052f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052f6:	d1c5      	bne.n	8005284 <__swsetup_r+0x24>
 80052f8:	bd38      	pop	{r3, r4, r5, pc}
 80052fa:	0799      	lsls	r1, r3, #30
 80052fc:	bf58      	it	pl
 80052fe:	6962      	ldrpl	r2, [r4, #20]
 8005300:	60a2      	str	r2, [r4, #8]
 8005302:	e7f4      	b.n	80052ee <__swsetup_r+0x8e>
 8005304:	2000      	movs	r0, #0
 8005306:	e7f7      	b.n	80052f8 <__swsetup_r+0x98>
 8005308:	20000018 	.word	0x20000018

0800530c <memset>:
 800530c:	4402      	add	r2, r0
 800530e:	4603      	mov	r3, r0
 8005310:	4293      	cmp	r3, r2
 8005312:	d100      	bne.n	8005316 <memset+0xa>
 8005314:	4770      	bx	lr
 8005316:	f803 1b01 	strb.w	r1, [r3], #1
 800531a:	e7f9      	b.n	8005310 <memset+0x4>

0800531c <_close_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d06      	ldr	r5, [pc, #24]	@ (8005338 <_close_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fb fb71 	bl	8000a0e <_close>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_close_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_close_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200005f8 	.word	0x200005f8

0800533c <_lseek_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	@ (800535c <_lseek_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fb fb86 	bl	8000a5c <_lseek>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_lseek_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_lseek_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200005f8 	.word	0x200005f8

08005360 <_read_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d07      	ldr	r5, [pc, #28]	@ (8005380 <_read_r+0x20>)
 8005364:	4604      	mov	r4, r0
 8005366:	4608      	mov	r0, r1
 8005368:	4611      	mov	r1, r2
 800536a:	2200      	movs	r2, #0
 800536c:	602a      	str	r2, [r5, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	f7fb fb14 	bl	800099c <_read>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_read_r+0x1e>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_read_r+0x1e>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	200005f8 	.word	0x200005f8

08005384 <_write_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d07      	ldr	r5, [pc, #28]	@ (80053a4 <_write_r+0x20>)
 8005388:	4604      	mov	r4, r0
 800538a:	4608      	mov	r0, r1
 800538c:	4611      	mov	r1, r2
 800538e:	2200      	movs	r2, #0
 8005390:	602a      	str	r2, [r5, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f7fb fb1f 	bl	80009d6 <_write>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_write_r+0x1e>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_write_r+0x1e>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	200005f8 	.word	0x200005f8

080053a8 <__errno>:
 80053a8:	4b01      	ldr	r3, [pc, #4]	@ (80053b0 <__errno+0x8>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000018 	.word	0x20000018

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4d0d      	ldr	r5, [pc, #52]	@ (80053ec <__libc_init_array+0x38>)
 80053b8:	4c0d      	ldr	r4, [pc, #52]	@ (80053f0 <__libc_init_array+0x3c>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	2600      	movs	r6, #0
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	4d0b      	ldr	r5, [pc, #44]	@ (80053f4 <__libc_init_array+0x40>)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	@ (80053f8 <__libc_init_array+0x44>)
 80053c8:	f000 fa54 	bl	8005874 <_init>
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	2600      	movs	r6, #0
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	08005908 	.word	0x08005908
 80053f0:	08005908 	.word	0x08005908
 80053f4:	08005908 	.word	0x08005908
 80053f8:	0800590c 	.word	0x0800590c

080053fc <__retarget_lock_init_recursive>:
 80053fc:	4770      	bx	lr

080053fe <__retarget_lock_acquire_recursive>:
 80053fe:	4770      	bx	lr

08005400 <__retarget_lock_release_recursive>:
 8005400:	4770      	bx	lr
	...

08005404 <_free_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4605      	mov	r5, r0
 8005408:	2900      	cmp	r1, #0
 800540a:	d041      	beq.n	8005490 <_free_r+0x8c>
 800540c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005410:	1f0c      	subs	r4, r1, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bfb8      	it	lt
 8005416:	18e4      	addlt	r4, r4, r3
 8005418:	f000 f8e0 	bl	80055dc <__malloc_lock>
 800541c:	4a1d      	ldr	r2, [pc, #116]	@ (8005494 <_free_r+0x90>)
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	b933      	cbnz	r3, 8005430 <_free_r+0x2c>
 8005422:	6063      	str	r3, [r4, #4]
 8005424:	6014      	str	r4, [r2, #0]
 8005426:	4628      	mov	r0, r5
 8005428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800542c:	f000 b8dc 	b.w	80055e8 <__malloc_unlock>
 8005430:	42a3      	cmp	r3, r4
 8005432:	d908      	bls.n	8005446 <_free_r+0x42>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	1821      	adds	r1, r4, r0
 8005438:	428b      	cmp	r3, r1
 800543a:	bf01      	itttt	eq
 800543c:	6819      	ldreq	r1, [r3, #0]
 800543e:	685b      	ldreq	r3, [r3, #4]
 8005440:	1809      	addeq	r1, r1, r0
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	e7ed      	b.n	8005422 <_free_r+0x1e>
 8005446:	461a      	mov	r2, r3
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	b10b      	cbz	r3, 8005450 <_free_r+0x4c>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d9fa      	bls.n	8005446 <_free_r+0x42>
 8005450:	6811      	ldr	r1, [r2, #0]
 8005452:	1850      	adds	r0, r2, r1
 8005454:	42a0      	cmp	r0, r4
 8005456:	d10b      	bne.n	8005470 <_free_r+0x6c>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	4401      	add	r1, r0
 800545c:	1850      	adds	r0, r2, r1
 800545e:	4283      	cmp	r3, r0
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	d1e0      	bne.n	8005426 <_free_r+0x22>
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	6053      	str	r3, [r2, #4]
 800546a:	4408      	add	r0, r1
 800546c:	6010      	str	r0, [r2, #0]
 800546e:	e7da      	b.n	8005426 <_free_r+0x22>
 8005470:	d902      	bls.n	8005478 <_free_r+0x74>
 8005472:	230c      	movs	r3, #12
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	e7d6      	b.n	8005426 <_free_r+0x22>
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	1821      	adds	r1, r4, r0
 800547c:	428b      	cmp	r3, r1
 800547e:	bf04      	itt	eq
 8005480:	6819      	ldreq	r1, [r3, #0]
 8005482:	685b      	ldreq	r3, [r3, #4]
 8005484:	6063      	str	r3, [r4, #4]
 8005486:	bf04      	itt	eq
 8005488:	1809      	addeq	r1, r1, r0
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	6054      	str	r4, [r2, #4]
 800548e:	e7ca      	b.n	8005426 <_free_r+0x22>
 8005490:	bd38      	pop	{r3, r4, r5, pc}
 8005492:	bf00      	nop
 8005494:	20000604 	.word	0x20000604

08005498 <sbrk_aligned>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4e0f      	ldr	r6, [pc, #60]	@ (80054d8 <sbrk_aligned+0x40>)
 800549c:	460c      	mov	r4, r1
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	4605      	mov	r5, r0
 80054a2:	b911      	cbnz	r1, 80054aa <sbrk_aligned+0x12>
 80054a4:	f000 f9d6 	bl	8005854 <_sbrk_r>
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f9d1 	bl	8005854 <_sbrk_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d103      	bne.n	80054be <sbrk_aligned+0x26>
 80054b6:	f04f 34ff 	mov.w	r4, #4294967295
 80054ba:	4620      	mov	r0, r4
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
 80054be:	1cc4      	adds	r4, r0, #3
 80054c0:	f024 0403 	bic.w	r4, r4, #3
 80054c4:	42a0      	cmp	r0, r4
 80054c6:	d0f8      	beq.n	80054ba <sbrk_aligned+0x22>
 80054c8:	1a21      	subs	r1, r4, r0
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f9c2 	bl	8005854 <_sbrk_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d1f2      	bne.n	80054ba <sbrk_aligned+0x22>
 80054d4:	e7ef      	b.n	80054b6 <sbrk_aligned+0x1e>
 80054d6:	bf00      	nop
 80054d8:	20000600 	.word	0x20000600

080054dc <_malloc_r>:
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e0:	1ccd      	adds	r5, r1, #3
 80054e2:	f025 0503 	bic.w	r5, r5, #3
 80054e6:	3508      	adds	r5, #8
 80054e8:	2d0c      	cmp	r5, #12
 80054ea:	bf38      	it	cc
 80054ec:	250c      	movcc	r5, #12
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	4606      	mov	r6, r0
 80054f2:	db01      	blt.n	80054f8 <_malloc_r+0x1c>
 80054f4:	42a9      	cmp	r1, r5
 80054f6:	d904      	bls.n	8005502 <_malloc_r+0x26>
 80054f8:	230c      	movs	r3, #12
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	2000      	movs	r0, #0
 80054fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055d8 <_malloc_r+0xfc>
 8005506:	f000 f869 	bl	80055dc <__malloc_lock>
 800550a:	f8d8 3000 	ldr.w	r3, [r8]
 800550e:	461c      	mov	r4, r3
 8005510:	bb44      	cbnz	r4, 8005564 <_malloc_r+0x88>
 8005512:	4629      	mov	r1, r5
 8005514:	4630      	mov	r0, r6
 8005516:	f7ff ffbf 	bl	8005498 <sbrk_aligned>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	4604      	mov	r4, r0
 800551e:	d158      	bne.n	80055d2 <_malloc_r+0xf6>
 8005520:	f8d8 4000 	ldr.w	r4, [r8]
 8005524:	4627      	mov	r7, r4
 8005526:	2f00      	cmp	r7, #0
 8005528:	d143      	bne.n	80055b2 <_malloc_r+0xd6>
 800552a:	2c00      	cmp	r4, #0
 800552c:	d04b      	beq.n	80055c6 <_malloc_r+0xea>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	4639      	mov	r1, r7
 8005532:	4630      	mov	r0, r6
 8005534:	eb04 0903 	add.w	r9, r4, r3
 8005538:	f000 f98c 	bl	8005854 <_sbrk_r>
 800553c:	4581      	cmp	r9, r0
 800553e:	d142      	bne.n	80055c6 <_malloc_r+0xea>
 8005540:	6821      	ldr	r1, [r4, #0]
 8005542:	1a6d      	subs	r5, r5, r1
 8005544:	4629      	mov	r1, r5
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff ffa6 	bl	8005498 <sbrk_aligned>
 800554c:	3001      	adds	r0, #1
 800554e:	d03a      	beq.n	80055c6 <_malloc_r+0xea>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	442b      	add	r3, r5
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	f8d8 3000 	ldr.w	r3, [r8]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	bb62      	cbnz	r2, 80055b8 <_malloc_r+0xdc>
 800555e:	f8c8 7000 	str.w	r7, [r8]
 8005562:	e00f      	b.n	8005584 <_malloc_r+0xa8>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	1b52      	subs	r2, r2, r5
 8005568:	d420      	bmi.n	80055ac <_malloc_r+0xd0>
 800556a:	2a0b      	cmp	r2, #11
 800556c:	d917      	bls.n	800559e <_malloc_r+0xc2>
 800556e:	1961      	adds	r1, r4, r5
 8005570:	42a3      	cmp	r3, r4
 8005572:	6025      	str	r5, [r4, #0]
 8005574:	bf18      	it	ne
 8005576:	6059      	strne	r1, [r3, #4]
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	bf08      	it	eq
 800557c:	f8c8 1000 	streq.w	r1, [r8]
 8005580:	5162      	str	r2, [r4, r5]
 8005582:	604b      	str	r3, [r1, #4]
 8005584:	4630      	mov	r0, r6
 8005586:	f000 f82f 	bl	80055e8 <__malloc_unlock>
 800558a:	f104 000b 	add.w	r0, r4, #11
 800558e:	1d23      	adds	r3, r4, #4
 8005590:	f020 0007 	bic.w	r0, r0, #7
 8005594:	1ac2      	subs	r2, r0, r3
 8005596:	bf1c      	itt	ne
 8005598:	1a1b      	subne	r3, r3, r0
 800559a:	50a3      	strne	r3, [r4, r2]
 800559c:	e7af      	b.n	80054fe <_malloc_r+0x22>
 800559e:	6862      	ldr	r2, [r4, #4]
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	bf0c      	ite	eq
 80055a4:	f8c8 2000 	streq.w	r2, [r8]
 80055a8:	605a      	strne	r2, [r3, #4]
 80055aa:	e7eb      	b.n	8005584 <_malloc_r+0xa8>
 80055ac:	4623      	mov	r3, r4
 80055ae:	6864      	ldr	r4, [r4, #4]
 80055b0:	e7ae      	b.n	8005510 <_malloc_r+0x34>
 80055b2:	463c      	mov	r4, r7
 80055b4:	687f      	ldr	r7, [r7, #4]
 80055b6:	e7b6      	b.n	8005526 <_malloc_r+0x4a>
 80055b8:	461a      	mov	r2, r3
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d1fb      	bne.n	80055b8 <_malloc_r+0xdc>
 80055c0:	2300      	movs	r3, #0
 80055c2:	6053      	str	r3, [r2, #4]
 80055c4:	e7de      	b.n	8005584 <_malloc_r+0xa8>
 80055c6:	230c      	movs	r3, #12
 80055c8:	6033      	str	r3, [r6, #0]
 80055ca:	4630      	mov	r0, r6
 80055cc:	f000 f80c 	bl	80055e8 <__malloc_unlock>
 80055d0:	e794      	b.n	80054fc <_malloc_r+0x20>
 80055d2:	6005      	str	r5, [r0, #0]
 80055d4:	e7d6      	b.n	8005584 <_malloc_r+0xa8>
 80055d6:	bf00      	nop
 80055d8:	20000604 	.word	0x20000604

080055dc <__malloc_lock>:
 80055dc:	4801      	ldr	r0, [pc, #4]	@ (80055e4 <__malloc_lock+0x8>)
 80055de:	f7ff bf0e 	b.w	80053fe <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	200005fc 	.word	0x200005fc

080055e8 <__malloc_unlock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	@ (80055f0 <__malloc_unlock+0x8>)
 80055ea:	f7ff bf09 	b.w	8005400 <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	200005fc 	.word	0x200005fc

080055f4 <__sflush_r>:
 80055f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fc:	0716      	lsls	r6, r2, #28
 80055fe:	4605      	mov	r5, r0
 8005600:	460c      	mov	r4, r1
 8005602:	d454      	bmi.n	80056ae <__sflush_r+0xba>
 8005604:	684b      	ldr	r3, [r1, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	dc02      	bgt.n	8005610 <__sflush_r+0x1c>
 800560a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd48      	ble.n	80056a2 <__sflush_r+0xae>
 8005610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005612:	2e00      	cmp	r6, #0
 8005614:	d045      	beq.n	80056a2 <__sflush_r+0xae>
 8005616:	2300      	movs	r3, #0
 8005618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800561c:	682f      	ldr	r7, [r5, #0]
 800561e:	6a21      	ldr	r1, [r4, #32]
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	d030      	beq.n	8005686 <__sflush_r+0x92>
 8005624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	0759      	lsls	r1, r3, #29
 800562a:	d505      	bpl.n	8005638 <__sflush_r+0x44>
 800562c:	6863      	ldr	r3, [r4, #4]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005632:	b10b      	cbz	r3, 8005638 <__sflush_r+0x44>
 8005634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800563c:	6a21      	ldr	r1, [r4, #32]
 800563e:	4628      	mov	r0, r5
 8005640:	47b0      	blx	r6
 8005642:	1c43      	adds	r3, r0, #1
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	d106      	bne.n	8005656 <__sflush_r+0x62>
 8005648:	6829      	ldr	r1, [r5, #0]
 800564a:	291d      	cmp	r1, #29
 800564c:	d82b      	bhi.n	80056a6 <__sflush_r+0xb2>
 800564e:	4a2a      	ldr	r2, [pc, #168]	@ (80056f8 <__sflush_r+0x104>)
 8005650:	410a      	asrs	r2, r1
 8005652:	07d6      	lsls	r6, r2, #31
 8005654:	d427      	bmi.n	80056a6 <__sflush_r+0xb2>
 8005656:	2200      	movs	r2, #0
 8005658:	6062      	str	r2, [r4, #4]
 800565a:	04d9      	lsls	r1, r3, #19
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	d504      	bpl.n	800566c <__sflush_r+0x78>
 8005662:	1c42      	adds	r2, r0, #1
 8005664:	d101      	bne.n	800566a <__sflush_r+0x76>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	b903      	cbnz	r3, 800566c <__sflush_r+0x78>
 800566a:	6560      	str	r0, [r4, #84]	@ 0x54
 800566c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800566e:	602f      	str	r7, [r5, #0]
 8005670:	b1b9      	cbz	r1, 80056a2 <__sflush_r+0xae>
 8005672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005676:	4299      	cmp	r1, r3
 8005678:	d002      	beq.n	8005680 <__sflush_r+0x8c>
 800567a:	4628      	mov	r0, r5
 800567c:	f7ff fec2 	bl	8005404 <_free_r>
 8005680:	2300      	movs	r3, #0
 8005682:	6363      	str	r3, [r4, #52]	@ 0x34
 8005684:	e00d      	b.n	80056a2 <__sflush_r+0xae>
 8005686:	2301      	movs	r3, #1
 8005688:	4628      	mov	r0, r5
 800568a:	47b0      	blx	r6
 800568c:	4602      	mov	r2, r0
 800568e:	1c50      	adds	r0, r2, #1
 8005690:	d1c9      	bne.n	8005626 <__sflush_r+0x32>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0c6      	beq.n	8005626 <__sflush_r+0x32>
 8005698:	2b1d      	cmp	r3, #29
 800569a:	d001      	beq.n	80056a0 <__sflush_r+0xac>
 800569c:	2b16      	cmp	r3, #22
 800569e:	d11e      	bne.n	80056de <__sflush_r+0xea>
 80056a0:	602f      	str	r7, [r5, #0]
 80056a2:	2000      	movs	r0, #0
 80056a4:	e022      	b.n	80056ec <__sflush_r+0xf8>
 80056a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	e01b      	b.n	80056e6 <__sflush_r+0xf2>
 80056ae:	690f      	ldr	r7, [r1, #16]
 80056b0:	2f00      	cmp	r7, #0
 80056b2:	d0f6      	beq.n	80056a2 <__sflush_r+0xae>
 80056b4:	0793      	lsls	r3, r2, #30
 80056b6:	680e      	ldr	r6, [r1, #0]
 80056b8:	bf08      	it	eq
 80056ba:	694b      	ldreq	r3, [r1, #20]
 80056bc:	600f      	str	r7, [r1, #0]
 80056be:	bf18      	it	ne
 80056c0:	2300      	movne	r3, #0
 80056c2:	eba6 0807 	sub.w	r8, r6, r7
 80056c6:	608b      	str	r3, [r1, #8]
 80056c8:	f1b8 0f00 	cmp.w	r8, #0
 80056cc:	dde9      	ble.n	80056a2 <__sflush_r+0xae>
 80056ce:	6a21      	ldr	r1, [r4, #32]
 80056d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056d2:	4643      	mov	r3, r8
 80056d4:	463a      	mov	r2, r7
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b0      	blx	r6
 80056da:	2800      	cmp	r0, #0
 80056dc:	dc08      	bgt.n	80056f0 <__sflush_r+0xfc>
 80056de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	4407      	add	r7, r0
 80056f2:	eba8 0800 	sub.w	r8, r8, r0
 80056f6:	e7e7      	b.n	80056c8 <__sflush_r+0xd4>
 80056f8:	dfbffffe 	.word	0xdfbffffe

080056fc <_fflush_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	690b      	ldr	r3, [r1, #16]
 8005700:	4605      	mov	r5, r0
 8005702:	460c      	mov	r4, r1
 8005704:	b913      	cbnz	r3, 800570c <_fflush_r+0x10>
 8005706:	2500      	movs	r5, #0
 8005708:	4628      	mov	r0, r5
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	b118      	cbz	r0, 8005716 <_fflush_r+0x1a>
 800570e:	6a03      	ldr	r3, [r0, #32]
 8005710:	b90b      	cbnz	r3, 8005716 <_fflush_r+0x1a>
 8005712:	f7ff fc8f 	bl	8005034 <__sinit>
 8005716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f3      	beq.n	8005706 <_fflush_r+0xa>
 800571e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005720:	07d0      	lsls	r0, r2, #31
 8005722:	d404      	bmi.n	800572e <_fflush_r+0x32>
 8005724:	0599      	lsls	r1, r3, #22
 8005726:	d402      	bmi.n	800572e <_fflush_r+0x32>
 8005728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800572a:	f7ff fe68 	bl	80053fe <__retarget_lock_acquire_recursive>
 800572e:	4628      	mov	r0, r5
 8005730:	4621      	mov	r1, r4
 8005732:	f7ff ff5f 	bl	80055f4 <__sflush_r>
 8005736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005738:	07da      	lsls	r2, r3, #31
 800573a:	4605      	mov	r5, r0
 800573c:	d4e4      	bmi.n	8005708 <_fflush_r+0xc>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	059b      	lsls	r3, r3, #22
 8005742:	d4e1      	bmi.n	8005708 <_fflush_r+0xc>
 8005744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005746:	f7ff fe5b 	bl	8005400 <__retarget_lock_release_recursive>
 800574a:	e7dd      	b.n	8005708 <_fflush_r+0xc>

0800574c <__swhatbuf_r>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	460c      	mov	r4, r1
 8005750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005754:	2900      	cmp	r1, #0
 8005756:	b096      	sub	sp, #88	@ 0x58
 8005758:	4615      	mov	r5, r2
 800575a:	461e      	mov	r6, r3
 800575c:	da0d      	bge.n	800577a <__swhatbuf_r+0x2e>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005764:	f04f 0100 	mov.w	r1, #0
 8005768:	bf14      	ite	ne
 800576a:	2340      	movne	r3, #64	@ 0x40
 800576c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005770:	2000      	movs	r0, #0
 8005772:	6031      	str	r1, [r6, #0]
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	b016      	add	sp, #88	@ 0x58
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	466a      	mov	r2, sp
 800577c:	f000 f848 	bl	8005810 <_fstat_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	dbec      	blt.n	800575e <__swhatbuf_r+0x12>
 8005784:	9901      	ldr	r1, [sp, #4]
 8005786:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800578a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800578e:	4259      	negs	r1, r3
 8005790:	4159      	adcs	r1, r3
 8005792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005796:	e7eb      	b.n	8005770 <__swhatbuf_r+0x24>

08005798 <__smakebuf_r>:
 8005798:	898b      	ldrh	r3, [r1, #12]
 800579a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800579c:	079d      	lsls	r5, r3, #30
 800579e:	4606      	mov	r6, r0
 80057a0:	460c      	mov	r4, r1
 80057a2:	d507      	bpl.n	80057b4 <__smakebuf_r+0x1c>
 80057a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	6123      	str	r3, [r4, #16]
 80057ac:	2301      	movs	r3, #1
 80057ae:	6163      	str	r3, [r4, #20]
 80057b0:	b003      	add	sp, #12
 80057b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b4:	ab01      	add	r3, sp, #4
 80057b6:	466a      	mov	r2, sp
 80057b8:	f7ff ffc8 	bl	800574c <__swhatbuf_r>
 80057bc:	9f00      	ldr	r7, [sp, #0]
 80057be:	4605      	mov	r5, r0
 80057c0:	4639      	mov	r1, r7
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff fe8a 	bl	80054dc <_malloc_r>
 80057c8:	b948      	cbnz	r0, 80057de <__smakebuf_r+0x46>
 80057ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ce:	059a      	lsls	r2, r3, #22
 80057d0:	d4ee      	bmi.n	80057b0 <__smakebuf_r+0x18>
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	f043 0302 	orr.w	r3, r3, #2
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	e7e2      	b.n	80057a4 <__smakebuf_r+0xc>
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	6020      	str	r0, [r4, #0]
 80057e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e6:	81a3      	strh	r3, [r4, #12]
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80057ee:	b15b      	cbz	r3, 8005808 <__smakebuf_r+0x70>
 80057f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 f81d 	bl	8005834 <_isatty_r>
 80057fa:	b128      	cbz	r0, 8005808 <__smakebuf_r+0x70>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	431d      	orrs	r5, r3
 800580c:	81a5      	strh	r5, [r4, #12]
 800580e:	e7cf      	b.n	80057b0 <__smakebuf_r+0x18>

08005810 <_fstat_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d07      	ldr	r5, [pc, #28]	@ (8005830 <_fstat_r+0x20>)
 8005814:	2300      	movs	r3, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	f7fb f902 	bl	8000a26 <_fstat>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d102      	bne.n	800582c <_fstat_r+0x1c>
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	b103      	cbz	r3, 800582c <_fstat_r+0x1c>
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	bf00      	nop
 8005830:	200005f8 	.word	0x200005f8

08005834 <_isatty_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d06      	ldr	r5, [pc, #24]	@ (8005850 <_isatty_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f7fb f901 	bl	8000a46 <_isatty>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_isatty_r+0x1a>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_isatty_r+0x1a>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	200005f8 	.word	0x200005f8

08005854 <_sbrk_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d06      	ldr	r5, [pc, #24]	@ (8005870 <_sbrk_r+0x1c>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	f7fb f90a 	bl	8000a78 <_sbrk>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_sbrk_r+0x1a>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_sbrk_r+0x1a>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	200005f8 	.word	0x200005f8

08005874 <_init>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr

08005880 <_fini>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr
