
projet_led_neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004a2c  08004a2c  00005a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  08004af0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004af0  0000634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118d2  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002358  00000000  00000000  0001796a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00019cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd8  00000000  00000000  0001ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef9b  00000000  00000000  0001ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012da5  00000000  00000000  0003a9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a1f  00000000  00000000  0004d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  001151bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00119de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a14 	.word	0x08004a14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08004a14 	.word	0x08004a14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	@ (8000528 <__io_putchar+0x20>)
 800051a:	f002 ff53 	bl	80033c4 <HAL_UART_Transmit>
	return chr;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000d0 	.word	0x200000d0

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fbf9 	bl	8000d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f818 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f99e 	bl	8000878 <MX_GPIO_Init>
  MX_TIM1_Init();
 800053c:	f000 f854 	bl	80005e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 f902 	bl	8000748 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f94c 	bl	80007e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("BONJOUR\r\n");
 8000548:	4806      	ldr	r0, [pc, #24]	@ (8000564 <main+0x38>)
 800054a:	f003 fecf 	bl	80042ec <puts>
//  PWM_Start(); // Démarre le signal PWM une seule fois
//  PWM_SetDutyCycle();

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 800054e:	2102      	movs	r1, #2
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 fef8 	bl	8001348 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f000 fc55 	bl	8000e08 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 800055e:	bf00      	nop
 8000560:	e7f5      	b.n	800054e <main+0x22>
 8000562:	bf00      	nop
 8000564:	08004a2c 	.word	0x08004a2c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2238      	movs	r2, #56	@ 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 ff98 	bl	80044ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800058e:	f000 fef5 	bl	800137c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2340      	movs	r3, #64	@ 0x40
 800059e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 ff9b 	bl	80014e4 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005b4:	f000 f990 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fa99 	bl	8001b08 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005dc:	f000 f97c 	bl	80008d8 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	@ 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	@ 0x70
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000608:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ff42 	bl	80044ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000628:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <MX_TIM1_Init+0x158>)
 800062a:	4a46      	ldr	r2, [pc, #280]	@ (8000744 <MX_TIM1_Init+0x15c>)
 800062c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800062e:	4b44      	ldr	r3, [pc, #272]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800063a:	4b41      	ldr	r3, [pc, #260]	@ (8000740 <MX_TIM1_Init+0x158>)
 800063c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000640:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b3f      	ldr	r3, [pc, #252]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <MX_TIM1_Init+0x158>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000654:	483a      	ldr	r0, [pc, #232]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000656:	f001 fe63 	bl	8002320 <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000660:	f000 f93a 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800066a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800066e:	4619      	mov	r1, r3
 8000670:	4833      	ldr	r0, [pc, #204]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000672:	f002 f821 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800067c:	f000 f92c 	bl	80008d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000680:	482f      	ldr	r0, [pc, #188]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000682:	f001 fea4 	bl	80023ce <HAL_TIM_PWM_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800068c:	f000 f924 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800069c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a0:	4619      	mov	r1, r3
 80006a2:	4827      	ldr	r0, [pc, #156]	@ (8000740 <MX_TIM1_Init+0x158>)
 80006a4:	f002 fd30 	bl	8003108 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006ae:	f000 f913 	bl	80008d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	2360      	movs	r3, #96	@ 0x60
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006be:	2300      	movs	r3, #0
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	481a      	ldr	r0, [pc, #104]	@ (8000740 <MX_TIM1_Init+0x158>)
 80006d8:	f001 feda 	bl	8002490 <HAL_TIM_PWM_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006e2:	f000 f8f9 	bl	80008d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800070c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4807      	ldr	r0, [pc, #28]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000724:	f002 fd72 	bl	800320c <HAL_TIMEx_ConfigBreakDeadTime>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800072e:	f000 f8d3 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000732:	4803      	ldr	r0, [pc, #12]	@ (8000740 <MX_TIM1_Init+0x158>)
 8000734:	f000 f91a 	bl	800096c <HAL_TIM_MspPostInit>

}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	@ 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000084 	.word	0x20000084
 8000744:	40012c00 	.word	0x40012c00

08000748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 800074e:	4a23      	ldr	r2, [pc, #140]	@ (80007dc <MX_USART1_UART_Init+0x94>)
 8000750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000752:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000790:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 8000792:	f002 fdc7 	bl	8003324 <HAL_UART_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f89c 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 80007a4:	f003 fbc0 	bl	8003f28 <HAL_UARTEx_SetTxFifoThreshold>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f893 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 80007b6:	f003 fbf5 	bl	8003fa4 <HAL_UARTEx_SetRxFifoThreshold>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f88a 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_USART1_UART_Init+0x90>)
 80007c6:	f003 fb76 	bl	8003eb6 <HAL_UARTEx_DisableFifoMode>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f882 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000d0 	.word	0x200000d0
 80007dc:	40013800 	.word	0x40013800

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	@ (8000874 <MX_USART2_UART_Init+0x94>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000828:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 800082a:	f002 fd7b 	bl	8003324 <HAL_UART_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 f850 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 800083c:	f003 fb74 	bl	8003f28 <HAL_UARTEx_SetTxFifoThreshold>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000846:	f000 f847 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4808      	ldr	r0, [pc, #32]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 800084e:	f003 fba9 	bl	8003fa4 <HAL_UARTEx_SetRxFifoThreshold>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f83e 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_USART2_UART_Init+0x90>)
 800085e:	f003 fb2a 	bl	8003eb6 <HAL_UARTEx_DisableFifoMode>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 f836 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000164 	.word	0x20000164
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	4a10      	ldr	r2, [pc, #64]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_GPIO_Init+0x5c>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ac:	f000 fd34 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 80008b0:	2302      	movs	r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f000 fba4 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	@ 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800091a:	f000 fdd3 	bl	80014c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_TIM_Base_MspInit+0x38>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d10b      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_TIM_Base_MspInit+0x3c>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000948:	6613      	str	r3, [r2, #96]	@ 0x60
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_TIM_Base_MspInit+0x3c>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40012c00 	.word	0x40012c00
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <HAL_TIM_MspPostInit+0x68>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d11d      	bne.n	80009ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_TIM_MspPostInit+0x6c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <HAL_TIM_MspPostInit+0x6c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_TIM_MspPostInit+0x6c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_NP_Pin;
 80009a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009b8:	2306      	movs	r3, #6
 80009ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_NP_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c6:	f000 fb25 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40012c00 	.word	0x40012c00
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	@ 0x70
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	2244      	movs	r2, #68	@ 0x44
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fd55 	bl	80044ac <memset>
  if(huart->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a3e      	ldr	r2, [pc, #248]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d138      	bne.n	8000a7e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa91 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff58 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a28:	4b36      	ldr	r3, [pc, #216]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2c:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a32:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a34:	4b33      	ldr	r3, [pc, #204]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 facc 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7c:	e03b      	b.n	8000af6 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <HAL_UART_MspInit+0x12c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d136      	bne.n	8000af6 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fa53 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000aa0:	f7ff ff1a 	bl	80008d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 fa8f 	bl	8001014 <HAL_GPIO_Init>
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	@ 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40004400 	.word	0x40004400

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 f933 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e00a      	b.n	8000b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7c:	f3af 8000 	nop.w
 8000b80:	4601      	mov	r1, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	60ba      	str	r2, [r7, #8]
 8000b88:	b2ca      	uxtb	r2, r1
 8000b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dbf0      	blt.n	8000b7c <_read+0x12>
  }

  return len;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e009      	b.n	8000bca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	60ba      	str	r2, [r7, #8]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fca2 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	dbf1      	blt.n	8000bb6 <_write+0x12>
  }
  return len;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_close>:

int _close(int file)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c04:	605a      	str	r2, [r3, #4]
  return 0;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_isatty>:

int _isatty(int file)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f003 fc68 	bl	8004548 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20008000 	.word	0x20008000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	200001f8 	.word	0x200001f8
 8000cac:	20000350 	.word	0x20000350

08000cb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd8:	f7ff ffea 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	@ (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f003 fc27 	bl	8004554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d06:	f7ff fc11 	bl	800052c <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d18:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 8000d1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d20:	2000034c 	.word	0x2000034c

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>

08000d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f93d 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f80e 	bl	8000d58 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	e001      	b.n	8000d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d48:	f7ff fdcc 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_InitTick+0x68>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d022      	beq.n	8000db2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_InitTick+0x6c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_InitTick+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f93a 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10f      	bne.n	8000dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d809      	bhi.n	8000da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d92:	2200      	movs	r2, #0
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	f000 f914 	bl	8000fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_InitTick+0x70>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e004      	b.n	8000db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e001      	b.n	8000db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <HAL_IncTick+0x20>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a03      	ldr	r2, [pc, #12]	@ (8000de8 <HAL_IncTick+0x1c>)
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	200001fc 	.word	0x200001fc
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200001fc 	.word	0x200001fc

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d004      	beq.n	8000e2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <HAL_Delay+0x40>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2c:	bf00      	nop
 8000e2e:	f7ff ffdf 	bl	8000df0 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d8f7      	bhi.n	8000e2e <HAL_Delay+0x26>
  {
  }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	@ (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff90 	bl	8000f04 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5f 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb2 	bl	8000f6c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001022:	e15a      	b.n	80012da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 814c 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118c:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	@ 0x60
 8001194:	4b58      	ldr	r3, [pc, #352]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	4a56      	ldr	r2, [pc, #344]	@ (80012fc <HAL_GPIO_Init+0x2e8>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ca:	d01f      	beq.n	800120c <HAL_GPIO_Init+0x1f8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001300 <HAL_GPIO_Init+0x2ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d019      	beq.n	8001208 <HAL_GPIO_Init+0x1f4>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1f0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4a      	ldr	r2, [pc, #296]	@ (8001308 <HAL_GPIO_Init+0x2f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1ec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a49      	ldr	r2, [pc, #292]	@ (800130c <HAL_GPIO_Init+0x2f8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1e8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a48      	ldr	r2, [pc, #288]	@ (8001310 <HAL_GPIO_Init+0x2fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011f4:	2305      	movs	r3, #5
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011f8:	2306      	movs	r3, #6
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	@ (80012fc <HAL_GPIO_Init+0x2e8>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122c:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <HAL_GPIO_Init+0x300>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001250:	4a30      	ldr	r2, [pc, #192]	@ (8001314 <HAL_GPIO_Init+0x300>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_GPIO_Init+0x300>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127a:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <HAL_GPIO_Init+0x300>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_GPIO_Init+0x300>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ce:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae9d 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43d9      	mvns	r1, r3
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	400b      	ands	r3, r1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d141      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800138a:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001396:	d131      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001398:	4b47      	ldr	r3, [pc, #284]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139e:	4a46      	ldr	r2, [pc, #280]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b0:	4a41      	ldr	r2, [pc, #260]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b8:	4b40      	ldr	r3, [pc, #256]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2232      	movs	r2, #50	@ 0x32
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ce:	e002      	b.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d102      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f2      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ea:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f6:	d158      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e057      	b.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013fc:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001402:	4a2d      	ldr	r2, [pc, #180]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800140c:	e04d      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001414:	d141      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001416:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001422:	d131      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800142a:	4a23      	ldr	r2, [pc, #140]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2232      	movs	r2, #50	@ 0x32
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145a:	e002      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146e:	d102      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f2      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001482:	d112      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e011      	b.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001498:	e007      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40007000 	.word	0x40007000
 80014bc:	20000000 	.word	0x20000000
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d2:	6093      	str	r3, [r2, #8]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40007000 	.word	0x40007000

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e2fe      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d075      	beq.n	80015ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001502:	4b97      	ldr	r3, [pc, #604]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150c:	4b94      	ldr	r3, [pc, #592]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d102      	bne.n	8001522 <HAL_RCC_OscConfig+0x3e>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d002      	beq.n	8001528 <HAL_RCC_OscConfig+0x44>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d10b      	bne.n	8001540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4b8d      	ldr	r3, [pc, #564]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d05b      	beq.n	80015ec <HAL_RCC_OscConfig+0x108>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d157      	bne.n	80015ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e2d9      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001548:	d106      	bne.n	8001558 <HAL_RCC_OscConfig+0x74>
 800154a:	4b85      	ldr	r3, [pc, #532]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a84      	ldr	r2, [pc, #528]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e01d      	b.n	8001594 <HAL_RCC_OscConfig+0xb0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x98>
 8001562:	4b7f      	ldr	r3, [pc, #508]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b7c      	ldr	r3, [pc, #496]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0xb0>
 800157c:	4b78      	ldr	r3, [pc, #480]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a77      	ldr	r2, [pc, #476]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a74      	ldr	r2, [pc, #464]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fc28 	bl	8000df0 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fc24 	bl	8000df0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	@ 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e29e      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0xc0>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc14 	bl	8000df0 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc10 	bl	8000df0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e28a      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	4b60      	ldr	r3, [pc, #384]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0xe8>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d075      	beq.n	80016e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fa:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001604:	4b56      	ldr	r3, [pc, #344]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b0c      	cmp	r3, #12
 8001612:	d102      	bne.n	800161a <HAL_RCC_OscConfig+0x136>
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d002      	beq.n	8001620 <HAL_RCC_OscConfig+0x13c>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d11f      	bne.n	8001660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b4f      	ldr	r3, [pc, #316]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x154>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e25d      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b49      	ldr	r3, [pc, #292]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4946      	ldr	r1, [pc, #280]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb81 	bl	8000d58 <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d043      	beq.n	80016e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e249      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d023      	beq.n	80016b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fbbc 	bl	8000df0 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fbb8 	bl	8000df0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e232      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b31      	ldr	r3, [pc, #196]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	492d      	ldr	r1, [pc, #180]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
 80016ae:	e01a      	b.n	80016e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb98 	bl	8000df0 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fb94 	bl	8000df0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e20e      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1e0>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d041      	beq.n	8001776 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01c      	beq.n	8001734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fb71 	bl	8000df0 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fb6d 	bl	8000df0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1e7      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ef      	beq.n	8001712 <HAL_RCC_OscConfig+0x22e>
 8001732:	e020      	b.n	8001776 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fb54 	bl	8000df0 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174a:	e00d      	b.n	8001768 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fb50 	bl	8000df0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d906      	bls.n	8001768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1ca      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b8c      	ldr	r3, [pc, #560]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ea      	bne.n	800174c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a6 	beq.w	80018d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001788:	4b84      	ldr	r3, [pc, #528]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x2b4>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x2b6>
 8001798:	2300      	movs	r3, #0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b7f      	ldr	r3, [pc, #508]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a7e      	ldr	r2, [pc, #504]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b7c      	ldr	r3, [pc, #496]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	4b79      	ldr	r3, [pc, #484]	@ (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c6:	4b76      	ldr	r3, [pc, #472]	@ (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a75      	ldr	r2, [pc, #468]	@ (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fb0d 	bl	8000df0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fb09 	bl	8000df0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e183      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	4b6c      	ldr	r3, [pc, #432]	@ (80019a0 <HAL_RCC_OscConfig+0x4bc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_RCC_OscConfig+0x32e>
 8001800:	4b66      	ldr	r3, [pc, #408]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001806:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001810:	e024      	b.n	800185c <HAL_RCC_OscConfig+0x378>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d110      	bne.n	800183c <HAL_RCC_OscConfig+0x358>
 800181a:	4b60      	ldr	r3, [pc, #384]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001820:	4a5e      	ldr	r2, [pc, #376]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182a:	4b5c      	ldr	r3, [pc, #368]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001830:	4a5a      	ldr	r2, [pc, #360]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x378>
 800183c:	4b57      	ldr	r3, [pc, #348]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	4a56      	ldr	r2, [pc, #344]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184c:	4b53      	ldr	r3, [pc, #332]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	4a52      	ldr	r2, [pc, #328]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d016      	beq.n	8001892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fac4 	bl	8000df0 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fac0 	bl	8000df0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e138      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	4b46      	ldr	r3, [pc, #280]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ed      	beq.n	800186c <HAL_RCC_OscConfig+0x388>
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff faad 	bl	8000df0 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff faa9 	bl	8000df0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e121      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	4b3a      	ldr	r3, [pc, #232]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ed      	bne.n	800189a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b35      	ldr	r3, [pc, #212]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a34      	ldr	r2, [pc, #208]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03c      	beq.n	8001956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e4:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ea:	4a2c      	ldr	r2, [pc, #176]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa7c 	bl	8000df0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fc:	f7ff fa78 	bl	8000df0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0f2      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ef      	beq.n	80018fc <HAL_RCC_OscConfig+0x418>
 800191c:	e01b      	b.n	8001956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fa5f 	bl	8000df0 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001936:	f7ff fa5b 	bl	8000df0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0d5      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ef      	bne.n	8001936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80c9 	beq.w	8001af2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b0c      	cmp	r3, #12
 800196a:	f000 8083 	beq.w	8001a74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d15e      	bne.n	8001a34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_RCC_OscConfig+0x4b8>)
 800197c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff fa35 	bl	8000df0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	e00c      	b.n	80019a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fa31 	bl	8000df0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d905      	bls.n	80019a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0ab      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	4b55      	ldr	r3, [pc, #340]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ec      	bne.n	800198a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	4b52      	ldr	r3, [pc, #328]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	4b52      	ldr	r3, [pc, #328]	@ (8001b00 <HAL_RCC_OscConfig+0x61c>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6a11      	ldr	r1, [r2, #32]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019d2:	0852      	lsrs	r2, r2, #1
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0552      	lsls	r2, r2, #21
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0652      	lsls	r2, r2, #25
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019ea:	06d2      	lsls	r2, r2, #27
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4943      	ldr	r1, [pc, #268]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a40      	ldr	r2, [pc, #256]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a00:	4b3e      	ldr	r3, [pc, #248]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a3d      	ldr	r2, [pc, #244]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9f0 	bl	8000df0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f9ec 	bl	8000df0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e066      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x530>
 8001a32:	e05e      	b.n	8001af2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a30      	ldr	r2, [pc, #192]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f9d6 	bl	8000df0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f9d2 	bl	8000df0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04c      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5a:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a66:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	4924      	ldr	r1, [pc, #144]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]
 8001a72:	e03e      	b.n	8001af2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e039      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <HAL_RCC_OscConfig+0x618>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d12c      	bne.n	8001aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d123      	bne.n	8001aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d11b      	bne.n	8001aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d113      	bne.n	8001aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	019f800c 	.word	0x019f800c
 8001b04:	feeefffc 	.word	0xfeeefffc

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e11e      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b91      	ldr	r3, [pc, #580]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b8e      	ldr	r3, [pc, #568]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	498c      	ldr	r1, [pc, #560]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b8a      	ldr	r3, [pc, #552]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e106      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d073      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d129      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b64:	4b81      	ldr	r3, [pc, #516]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0f4      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b74:	f000 f99e 	bl	8001eb4 <RCC_GetSysClockFreqFromPLLSource>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d70 <HAL_RCC_ClockConfig+0x268>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d93f      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b82:	4b7a      	ldr	r3, [pc, #488]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d033      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12f      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ba2:	4b72      	ldr	r3, [pc, #456]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001baa:	4a70      	ldr	r2, [pc, #448]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e024      	b.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0c6      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	4b66      	ldr	r3, [pc, #408]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0be      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001be0:	f000 f8ce 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4a61      	ldr	r2, [pc, #388]	@ (8001d70 <HAL_RCC_ClockConfig+0x268>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d909      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bee:	4b5f      	ldr	r3, [pc, #380]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b5a      	ldr	r3, [pc, #360]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4957      	ldr	r1, [pc, #348]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f8ec 	bl	8000df0 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f8e8 	bl	8000df0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e095      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b4e      	ldr	r3, [pc, #312]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b43      	ldr	r3, [pc, #268]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a42      	ldr	r2, [pc, #264]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c74:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4936      	ldr	r1, [pc, #216]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
 8001c96:	e008      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b80      	cmp	r3, #128	@ 0x80
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c9e:	4b33      	ldr	r3, [pc, #204]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4a32      	ldr	r2, [pc, #200]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ca8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b2f      	ldr	r3, [pc, #188]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d21d      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 020f 	bic.w	r2, r3, #15
 8001cc0:	4929      	ldr	r1, [pc, #164]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f892 	bl	8000df0 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff f88e 	bl	8000df0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e03b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1ed      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4917      	ldr	r1, [pc, #92]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490f      	ldr	r1, [pc, #60]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d32:	f000 f825 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <HAL_RCC_ClockConfig+0x26c>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_RCC_ClockConfig+0x270>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_RCC_ClockConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fffe 	bl	8000d58 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	04c4b400 	.word	0x04c4b400
 8001d74:	08004a38 	.word	0x08004a38
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d86:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d92:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e047      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d98:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e03e      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d136      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db6:	4b20      	ldr	r3, [pc, #128]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	0a12      	lsrs	r2, r2, #8
 8001de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
      break;
 8001dec:	e00c      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dee:	4a13      	ldr	r2, [pc, #76]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df8:	68d2      	ldr	r2, [r2, #12]
 8001dfa:	0a12      	lsrs	r2, r2, #8
 8001dfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0e5b      	lsrs	r3, r3, #25
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e001      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e28:	693b      	ldr	r3, [r7, #16]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08004a48 	.word	0x08004a48

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e8c:	f7ff ffda 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4904      	ldr	r1, [pc, #16]	@ (8001eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08004a48 	.word	0x08004a48

08001eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d10c      	bne.n	8001ef2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee2:	68d2      	ldr	r2, [r2, #12]
 8001ee4:	0a12      	lsrs	r2, r2, #8
 8001ee6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
    break;
 8001ef0:	e00c      	b.n	8001f0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef2:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4a0e      	ldr	r2, [pc, #56]	@ (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efc:	68d2      	ldr	r2, [r2, #12]
 8001efe:	0a12      	lsrs	r2, r2, #8
 8001f00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    break;
 8001f0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0e5b      	lsrs	r3, r3, #25
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	007a1200 	.word	0x007a1200
 8001f3c:	00f42400 	.word	0x00f42400

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8098 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b43      	ldr	r3, [pc, #268]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	4a3f      	ldr	r2, [pc, #252]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a39      	ldr	r2, [pc, #228]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f96:	f7fe ff2b 	bl	8000df0 <HAL_GetTick>
 8001f9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe ff27 	bl	8000df0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	74fb      	strb	r3, [r7, #19]
        break;
 8001fb0:	e005      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fb2:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d159      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01e      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d019      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fec:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002002:	4a1b      	ldr	r2, [pc, #108]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe fee7 	bl	8000df0 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002024:	e00b      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fee3 	bl	8000df0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d902      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	74fb      	strb	r3, [r7, #19]
            break;
 800203c:	e006      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ec      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10b      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	4903      	ldr	r1, [pc, #12]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002068:	e008      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	74bb      	strb	r3, [r7, #18]
 800206e:	e005      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7c7b      	ldrb	r3, [r7, #17]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4ba6      	ldr	r3, [pc, #664]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	4aa5      	ldr	r2, [pc, #660]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209a:	4ba0      	ldr	r3, [pc, #640]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	499c      	ldr	r1, [pc, #624]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	4b97      	ldr	r3, [pc, #604]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	f023 020c 	bic.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4994      	ldr	r1, [pc, #592]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020de:	4b8f      	ldr	r3, [pc, #572]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	498b      	ldr	r1, [pc, #556]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002100:	4b86      	ldr	r3, [pc, #536]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	4983      	ldr	r1, [pc, #524]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002122:	4b7e      	ldr	r3, [pc, #504]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002128:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	497a      	ldr	r1, [pc, #488]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002144:	4b75      	ldr	r3, [pc, #468]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4972      	ldr	r1, [pc, #456]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002166:	4b6d      	ldr	r3, [pc, #436]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4969      	ldr	r1, [pc, #420]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002188:	4b64      	ldr	r3, [pc, #400]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4961      	ldr	r1, [pc, #388]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021aa:	4b5c      	ldr	r3, [pc, #368]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	4958      	ldr	r1, [pc, #352]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021cc:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	4950      	ldr	r1, [pc, #320]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ea:	d105      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ec:	4b4b      	ldr	r3, [pc, #300]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a4a      	ldr	r2, [pc, #296]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002204:	4b45      	ldr	r3, [pc, #276]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	4942      	ldr	r1, [pc, #264]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002222:	d105      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002224:	4b3d      	ldr	r3, [pc, #244]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a3c      	ldr	r2, [pc, #240]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800222e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800223c:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4934      	ldr	r1, [pc, #208]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225a:	d105      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225c:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a2e      	ldr	r2, [pc, #184]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002266:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002282:	4926      	ldr	r1, [pc, #152]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002292:	d105      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002294:	4b21      	ldr	r3, [pc, #132]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a20      	ldr	r2, [pc, #128]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800229e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022ac:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ba:	4918      	ldr	r1, [pc, #96]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a12      	ldr	r2, [pc, #72]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022e4:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	490a      	ldr	r1, [pc, #40]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002302:	d105      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a04      	ldr	r2, [pc, #16]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002310:	7cbb      	ldrb	r3, [r7, #18]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e049      	b.n	80023c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe faf0 	bl	800092c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 faa4 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e049      	b.n	8002474 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f841 	bl	800247c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f000 fa4d 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0ff      	b.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b14      	cmp	r3, #20
 80024ba:	f200 80f0 	bhi.w	800269e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024be:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	08002519 	.word	0x08002519
 80024c8:	0800269f 	.word	0x0800269f
 80024cc:	0800269f 	.word	0x0800269f
 80024d0:	0800269f 	.word	0x0800269f
 80024d4:	08002559 	.word	0x08002559
 80024d8:	0800269f 	.word	0x0800269f
 80024dc:	0800269f 	.word	0x0800269f
 80024e0:	0800269f 	.word	0x0800269f
 80024e4:	0800259b 	.word	0x0800259b
 80024e8:	0800269f 	.word	0x0800269f
 80024ec:	0800269f 	.word	0x0800269f
 80024f0:	0800269f 	.word	0x0800269f
 80024f4:	080025db 	.word	0x080025db
 80024f8:	0800269f 	.word	0x0800269f
 80024fc:	0800269f 	.word	0x0800269f
 8002500:	0800269f 	.word	0x0800269f
 8002504:	0800261d 	.word	0x0800261d
 8002508:	0800269f 	.word	0x0800269f
 800250c:	0800269f 	.word	0x0800269f
 8002510:	0800269f 	.word	0x0800269f
 8002514:	0800265d 	.word	0x0800265d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fa60 	bl	80029e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0204 	bic.w	r2, r2, #4
 8002542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6999      	ldr	r1, [r3, #24]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	619a      	str	r2, [r3, #24]
      break;
 8002556:	e0a5      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fad0 	bl	8002b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6999      	ldr	r1, [r3, #24]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	021a      	lsls	r2, r3, #8
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	619a      	str	r2, [r3, #24]
      break;
 8002598:	e084      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fb39 	bl	8002c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0208 	orr.w	r2, r2, #8
 80025b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0204 	bic.w	r2, r2, #4
 80025c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69d9      	ldr	r1, [r3, #28]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	61da      	str	r2, [r3, #28]
      break;
 80025d8:	e064      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fba1 	bl	8002d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69d9      	ldr	r1, [r3, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	021a      	lsls	r2, r3, #8
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	61da      	str	r2, [r3, #28]
      break;
 800261a:	e043      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fc0a 	bl	8002e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0208 	orr.w	r2, r2, #8
 8002636:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800265a:	e023      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fc4e 	bl	8002f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002676:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002686:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800269c:	e002      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
      break;
 80026a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop

080026b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_ConfigClockSource+0x1c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0de      	b.n	8002892 <HAL_TIM_ConfigClockSource+0x1da>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80026f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a63      	ldr	r2, [pc, #396]	@ (800289c <HAL_TIM_ConfigClockSource+0x1e4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	f000 80a9 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 8002714:	4a61      	ldr	r2, [pc, #388]	@ (800289c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	f200 80ae 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 800271c:	4a60      	ldr	r2, [pc, #384]	@ (80028a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f000 80a1 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 8002724:	4a5e      	ldr	r2, [pc, #376]	@ (80028a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	f200 80a6 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 800272c:	4a5d      	ldr	r2, [pc, #372]	@ (80028a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f000 8099 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 8002734:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002736:	4293      	cmp	r3, r2
 8002738:	f200 809e 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 800273c:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f000 8091 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 8002744:	4a58      	ldr	r2, [pc, #352]	@ (80028a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	f200 8096 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 800274c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002750:	f000 8089 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 8002754:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002758:	f200 808e 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 800275c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002760:	d03e      	beq.n	80027e0 <HAL_TIM_ConfigClockSource+0x128>
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002766:	f200 8087 	bhi.w	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800276e:	f000 8086 	beq.w	800287e <HAL_TIM_ConfigClockSource+0x1c6>
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002776:	d87f      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 8002778:	2b70      	cmp	r3, #112	@ 0x70
 800277a:	d01a      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0xfa>
 800277c:	2b70      	cmp	r3, #112	@ 0x70
 800277e:	d87b      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 8002780:	2b60      	cmp	r3, #96	@ 0x60
 8002782:	d050      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
 8002784:	2b60      	cmp	r3, #96	@ 0x60
 8002786:	d877      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 8002788:	2b50      	cmp	r3, #80	@ 0x50
 800278a:	d03c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x14e>
 800278c:	2b50      	cmp	r3, #80	@ 0x50
 800278e:	d873      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 8002790:	2b40      	cmp	r3, #64	@ 0x40
 8002792:	d058      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x18e>
 8002794:	2b40      	cmp	r3, #64	@ 0x40
 8002796:	d86f      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 8002798:	2b30      	cmp	r3, #48	@ 0x30
 800279a:	d064      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 800279c:	2b30      	cmp	r3, #48	@ 0x30
 800279e:	d86b      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d060      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d867      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d05a      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x1ae>
 80027b0:	e062      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c2:	f000 fc81 	bl	80030c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	609a      	str	r2, [r3, #8]
      break;
 80027de:	e04f      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f0:	f000 fc6a 	bl	80030c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002802:	609a      	str	r2, [r3, #8]
      break;
 8002804:	e03c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002812:	461a      	mov	r2, r3
 8002814:	f000 fbdc 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2150      	movs	r1, #80	@ 0x50
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fc35 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002824:	e02c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002832:	461a      	mov	r2, r3
 8002834:	f000 fbfb 	bl	800302e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2160      	movs	r1, #96	@ 0x60
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fc25 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002844:	e01c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002852:	461a      	mov	r2, r3
 8002854:	f000 fbbc 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2140      	movs	r1, #64	@ 0x40
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fc15 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002864:	e00c      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f000 fc0c 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002876:	e003      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
      break;
 800287c:	e000      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800287e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	00100070 	.word	0x00100070
 80028a0:	00100040 	.word	0x00100040
 80028a4:	00100030 	.word	0x00100030
 80028a8:	00100020 	.word	0x00100020

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a42      	ldr	r2, [pc, #264]	@ (80029c8 <TIM_Base_SetConfig+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00f      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	@ (80029cc <TIM_Base_SetConfig+0x120>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3e      	ldr	r2, [pc, #248]	@ (80029d0 <TIM_Base_SetConfig+0x124>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3d      	ldr	r2, [pc, #244]	@ (80029d4 <TIM_Base_SetConfig+0x128>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a33      	ldr	r2, [pc, #204]	@ (80029c8 <TIM_Base_SetConfig+0x11c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01b      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002904:	d017      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a30      	ldr	r2, [pc, #192]	@ (80029cc <TIM_Base_SetConfig+0x120>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <TIM_Base_SetConfig+0x124>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00f      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2e      	ldr	r2, [pc, #184]	@ (80029d4 <TIM_Base_SetConfig+0x128>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00b      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <TIM_Base_SetConfig+0x12c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	@ (80029dc <TIM_Base_SetConfig+0x130>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <TIM_Base_SetConfig+0x134>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a16      	ldr	r2, [pc, #88]	@ (80029c8 <TIM_Base_SetConfig+0x11c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0xe8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a17      	ldr	r2, [pc, #92]	@ (80029d4 <TIM_Base_SetConfig+0x128>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0xe8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <TIM_Base_SetConfig+0x12c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0xe8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <TIM_Base_SetConfig+0x130>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0xe8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <TIM_Base_SetConfig+0x134>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	611a      	str	r2, [r3, #16]
  }
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40013400 	.word	0x40013400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800

080029e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f023 0201 	bic.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0303 	bic.w	r3, r3, #3
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 0302 	bic.w	r3, r3, #2
 8002a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002af0 <TIM_OC1_SetConfig+0x10c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00f      	beq.n	8002a64 <TIM_OC1_SetConfig+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a2b      	ldr	r2, [pc, #172]	@ (8002af4 <TIM_OC1_SetConfig+0x110>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <TIM_OC1_SetConfig+0x80>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <TIM_OC1_SetConfig+0x114>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <TIM_OC1_SetConfig+0x80>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <TIM_OC1_SetConfig+0x118>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d003      	beq.n	8002a64 <TIM_OC1_SetConfig+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a28      	ldr	r2, [pc, #160]	@ (8002b00 <TIM_OC1_SetConfig+0x11c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10c      	bne.n	8002a7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0308 	bic.w	r3, r3, #8
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <TIM_OC1_SetConfig+0x10c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00f      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xc2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a1a      	ldr	r2, [pc, #104]	@ (8002af4 <TIM_OC1_SetConfig+0x110>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xc2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <TIM_OC1_SetConfig+0x114>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xc2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <TIM_OC1_SetConfig+0x118>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_OC1_SetConfig+0xc2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <TIM_OC1_SetConfig+0x11c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40013400 	.word	0x40013400
 8002af8:	40014000 	.word	0x40014000
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40014800 	.word	0x40014800

08002b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f023 0210 	bic.w	r2, r3, #16
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0320 	bic.w	r3, r3, #32
 8002b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a28      	ldr	r2, [pc, #160]	@ (8002c04 <TIM_OC2_SetConfig+0x100>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_OC2_SetConfig+0x6c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <TIM_OC2_SetConfig+0x104>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d10d      	bne.n	8002b8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <TIM_OC2_SetConfig+0x100>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00f      	beq.n	8002bb4 <TIM_OC2_SetConfig+0xb0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <TIM_OC2_SetConfig+0x104>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00b      	beq.n	8002bb4 <TIM_OC2_SetConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <TIM_OC2_SetConfig+0x108>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <TIM_OC2_SetConfig+0xb0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c10 <TIM_OC2_SetConfig+0x10c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <TIM_OC2_SetConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <TIM_OC2_SetConfig+0x110>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d113      	bne.n	8002bdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40013400 	.word	0x40013400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40014400 	.word	0x40014400
 8002c14:	40014800 	.word	0x40014800

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a27      	ldr	r2, [pc, #156]	@ (8002d14 <TIM_OC3_SetConfig+0xfc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_OC3_SetConfig+0x6a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <TIM_OC3_SetConfig+0x100>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10d      	bne.n	8002c9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <TIM_OC3_SetConfig+0xfc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00f      	beq.n	8002cc6 <TIM_OC3_SetConfig+0xae>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d18 <TIM_OC3_SetConfig+0x100>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00b      	beq.n	8002cc6 <TIM_OC3_SetConfig+0xae>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d1c <TIM_OC3_SetConfig+0x104>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <TIM_OC3_SetConfig+0xae>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <TIM_OC3_SetConfig+0x108>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d003      	beq.n	8002cc6 <TIM_OC3_SetConfig+0xae>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a18      	ldr	r2, [pc, #96]	@ (8002d24 <TIM_OC3_SetConfig+0x10c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d113      	bne.n	8002cee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40013400 	.word	0x40013400
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40014400 	.word	0x40014400
 8002d24:	40014800 	.word	0x40014800

08002d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	031b      	lsls	r3, r3, #12
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a28      	ldr	r2, [pc, #160]	@ (8002e28 <TIM_OC4_SetConfig+0x100>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_OC4_SetConfig+0x6c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <TIM_OC4_SetConfig+0x104>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10d      	bne.n	8002db0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	031b      	lsls	r3, r3, #12
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <TIM_OC4_SetConfig+0x100>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00f      	beq.n	8002dd8 <TIM_OC4_SetConfig+0xb0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <TIM_OC4_SetConfig+0x104>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_OC4_SetConfig+0xb0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <TIM_OC4_SetConfig+0x108>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_OC4_SetConfig+0xb0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a1a      	ldr	r2, [pc, #104]	@ (8002e34 <TIM_OC4_SetConfig+0x10c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_OC4_SetConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a19      	ldr	r2, [pc, #100]	@ (8002e38 <TIM_OC4_SetConfig+0x110>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d113      	bne.n	8002e00 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002de6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40013400 	.word	0x40013400
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40014400 	.word	0x40014400
 8002e38:	40014800 	.word	0x40014800

08002e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <TIM_OC5_SetConfig+0xb4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00f      	beq.n	8002eb6 <TIM_OC5_SetConfig+0x7a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <TIM_OC5_SetConfig+0xb8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <TIM_OC5_SetConfig+0x7a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <TIM_OC5_SetConfig+0xbc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <TIM_OC5_SetConfig+0x7a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <TIM_OC5_SetConfig+0xc0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_OC5_SetConfig+0x7a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <TIM_OC5_SetConfig+0xc4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d109      	bne.n	8002eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	621a      	str	r2, [r3, #32]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40013400 	.word	0x40013400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800

08002f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	051b      	lsls	r3, r3, #20
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <TIM_OC6_SetConfig+0xb8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00f      	beq.n	8002f80 <TIM_OC6_SetConfig+0x7c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a17      	ldr	r2, [pc, #92]	@ (8002fc0 <TIM_OC6_SetConfig+0xbc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00b      	beq.n	8002f80 <TIM_OC6_SetConfig+0x7c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	@ (8002fc4 <TIM_OC6_SetConfig+0xc0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_OC6_SetConfig+0x7c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a15      	ldr	r2, [pc, #84]	@ (8002fc8 <TIM_OC6_SetConfig+0xc4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_OC6_SetConfig+0x7c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <TIM_OC6_SetConfig+0xc8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d109      	bne.n	8002f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	621a      	str	r2, [r3, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40013400 	.word	0x40013400
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800

08002fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 030a 	bic.w	r3, r3, #10
 800300c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302e:	b480      	push	{r7}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 0210 	bic.w	r2, r3, #16
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	031b      	lsls	r3, r3, #12
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800306a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80030a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f043 0307 	orr.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800311c:	2302      	movs	r3, #2
 800311e:	e065      	b.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2b      	ldr	r2, [pc, #172]	@ (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800315a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800316c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1b      	ldr	r2, [pc, #108]	@ (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003196:	d013      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a18      	ldr	r2, [pc, #96]	@ (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a13      	ldr	r2, [pc, #76]	@ (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10c      	bne.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40013400 	.word	0x40013400
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40014000 	.word	0x40014000

0800320c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003224:	2302      	movs	r3, #2
 8003226:	e073      	b.n	8003310 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	@ (800331c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d11c      	bne.n	80032fe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	051b      	lsls	r3, r3, #20
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40013400 	.word	0x40013400

08003324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e042      	b.n	80033bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd fb47 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2224      	movs	r2, #36	@ 0x24
 8003352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fb82 	bl	8003a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8b3 	bl	80034e0 <UART_SetConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e01b      	b.n	80033bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fc01 	bl	8003bbc <UART_CheckIdleState>
 80033ba:	4603      	mov	r3, r0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d17b      	bne.n	80034d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_UART_Transmit+0x26>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e074      	b.n	80034d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fd fcf7 	bl	8000df0 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341c:	d108      	bne.n	8003430 <HAL_UART_Transmit+0x6c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e003      	b.n	8003438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003438:	e030      	b.n	800349c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	@ 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fc63 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03d      	b.n	80034d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	3302      	adds	r3, #2
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	e007      	b.n	800348a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3301      	adds	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1c8      	bne.n	800343a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	2140      	movs	r1, #64	@ 0x40
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fc2c 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e006      	b.n	80034d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b08c      	sub	sp, #48	@ 0x30
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4313      	orrs	r3, r2
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4bab      	ldr	r3, [pc, #684]	@ (80037bc <UART_SetConfig+0x2dc>)
 8003510:	4013      	ands	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003518:	430b      	orrs	r3, r1
 800351a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4aa0      	ldr	r2, [pc, #640]	@ (80037c0 <UART_SetConfig+0x2e0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003548:	4313      	orrs	r3, r2
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003556:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003560:	430b      	orrs	r3, r1
 8003562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	f023 010f 	bic.w	r1, r3, #15
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a91      	ldr	r2, [pc, #580]	@ (80037c4 <UART_SetConfig+0x2e4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d125      	bne.n	80035d0 <UART_SetConfig+0xf0>
 8003584:	4b90      	ldr	r3, [pc, #576]	@ (80037c8 <UART_SetConfig+0x2e8>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b03      	cmp	r3, #3
 8003590:	d81a      	bhi.n	80035c8 <UART_SetConfig+0xe8>
 8003592:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <UART_SetConfig+0xb8>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035b9 	.word	0x080035b9
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035c1 	.word	0x080035c1
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ae:	e0d6      	b.n	800375e <UART_SetConfig+0x27e>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b6:	e0d2      	b.n	800375e <UART_SetConfig+0x27e>
 80035b8:	2304      	movs	r3, #4
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035be:	e0ce      	b.n	800375e <UART_SetConfig+0x27e>
 80035c0:	2308      	movs	r3, #8
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035c6:	e0ca      	b.n	800375e <UART_SetConfig+0x27e>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ce:	e0c6      	b.n	800375e <UART_SetConfig+0x27e>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7d      	ldr	r2, [pc, #500]	@ (80037cc <UART_SetConfig+0x2ec>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d138      	bne.n	800364c <UART_SetConfig+0x16c>
 80035da:	4b7b      	ldr	r3, [pc, #492]	@ (80037c8 <UART_SetConfig+0x2e8>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d82d      	bhi.n	8003644 <UART_SetConfig+0x164>
 80035e8:	a201      	add	r2, pc, #4	@ (adr r2, 80035f0 <UART_SetConfig+0x110>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003625 	.word	0x08003625
 80035f4:	08003645 	.word	0x08003645
 80035f8:	08003645 	.word	0x08003645
 80035fc:	08003645 	.word	0x08003645
 8003600:	08003635 	.word	0x08003635
 8003604:	08003645 	.word	0x08003645
 8003608:	08003645 	.word	0x08003645
 800360c:	08003645 	.word	0x08003645
 8003610:	0800362d 	.word	0x0800362d
 8003614:	08003645 	.word	0x08003645
 8003618:	08003645 	.word	0x08003645
 800361c:	08003645 	.word	0x08003645
 8003620:	0800363d 	.word	0x0800363d
 8003624:	2300      	movs	r3, #0
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800362a:	e098      	b.n	800375e <UART_SetConfig+0x27e>
 800362c:	2302      	movs	r3, #2
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003632:	e094      	b.n	800375e <UART_SetConfig+0x27e>
 8003634:	2304      	movs	r3, #4
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363a:	e090      	b.n	800375e <UART_SetConfig+0x27e>
 800363c:	2308      	movs	r3, #8
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003642:	e08c      	b.n	800375e <UART_SetConfig+0x27e>
 8003644:	2310      	movs	r3, #16
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364a:	e088      	b.n	800375e <UART_SetConfig+0x27e>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5f      	ldr	r2, [pc, #380]	@ (80037d0 <UART_SetConfig+0x2f0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d125      	bne.n	80036a2 <UART_SetConfig+0x1c2>
 8003656:	4b5c      	ldr	r3, [pc, #368]	@ (80037c8 <UART_SetConfig+0x2e8>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003660:	2b30      	cmp	r3, #48	@ 0x30
 8003662:	d016      	beq.n	8003692 <UART_SetConfig+0x1b2>
 8003664:	2b30      	cmp	r3, #48	@ 0x30
 8003666:	d818      	bhi.n	800369a <UART_SetConfig+0x1ba>
 8003668:	2b20      	cmp	r3, #32
 800366a:	d00a      	beq.n	8003682 <UART_SetConfig+0x1a2>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d814      	bhi.n	800369a <UART_SetConfig+0x1ba>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <UART_SetConfig+0x19a>
 8003674:	2b10      	cmp	r3, #16
 8003676:	d008      	beq.n	800368a <UART_SetConfig+0x1aa>
 8003678:	e00f      	b.n	800369a <UART_SetConfig+0x1ba>
 800367a:	2300      	movs	r3, #0
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003680:	e06d      	b.n	800375e <UART_SetConfig+0x27e>
 8003682:	2302      	movs	r3, #2
 8003684:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003688:	e069      	b.n	800375e <UART_SetConfig+0x27e>
 800368a:	2304      	movs	r3, #4
 800368c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003690:	e065      	b.n	800375e <UART_SetConfig+0x27e>
 8003692:	2308      	movs	r3, #8
 8003694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003698:	e061      	b.n	800375e <UART_SetConfig+0x27e>
 800369a:	2310      	movs	r3, #16
 800369c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a0:	e05d      	b.n	800375e <UART_SetConfig+0x27e>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a4b      	ldr	r2, [pc, #300]	@ (80037d4 <UART_SetConfig+0x2f4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d125      	bne.n	80036f8 <UART_SetConfig+0x218>
 80036ac:	4b46      	ldr	r3, [pc, #280]	@ (80037c8 <UART_SetConfig+0x2e8>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036b8:	d016      	beq.n	80036e8 <UART_SetConfig+0x208>
 80036ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80036bc:	d818      	bhi.n	80036f0 <UART_SetConfig+0x210>
 80036be:	2b80      	cmp	r3, #128	@ 0x80
 80036c0:	d00a      	beq.n	80036d8 <UART_SetConfig+0x1f8>
 80036c2:	2b80      	cmp	r3, #128	@ 0x80
 80036c4:	d814      	bhi.n	80036f0 <UART_SetConfig+0x210>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <UART_SetConfig+0x1f0>
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d008      	beq.n	80036e0 <UART_SetConfig+0x200>
 80036ce:	e00f      	b.n	80036f0 <UART_SetConfig+0x210>
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d6:	e042      	b.n	800375e <UART_SetConfig+0x27e>
 80036d8:	2302      	movs	r3, #2
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036de:	e03e      	b.n	800375e <UART_SetConfig+0x27e>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036e6:	e03a      	b.n	800375e <UART_SetConfig+0x27e>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ee:	e036      	b.n	800375e <UART_SetConfig+0x27e>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e032      	b.n	800375e <UART_SetConfig+0x27e>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a30      	ldr	r2, [pc, #192]	@ (80037c0 <UART_SetConfig+0x2e0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d12a      	bne.n	8003758 <UART_SetConfig+0x278>
 8003702:	4b31      	ldr	r3, [pc, #196]	@ (80037c8 <UART_SetConfig+0x2e8>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800370c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003710:	d01a      	beq.n	8003748 <UART_SetConfig+0x268>
 8003712:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003716:	d81b      	bhi.n	8003750 <UART_SetConfig+0x270>
 8003718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800371c:	d00c      	beq.n	8003738 <UART_SetConfig+0x258>
 800371e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003722:	d815      	bhi.n	8003750 <UART_SetConfig+0x270>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <UART_SetConfig+0x250>
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800372c:	d008      	beq.n	8003740 <UART_SetConfig+0x260>
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x270>
 8003730:	2300      	movs	r3, #0
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003736:	e012      	b.n	800375e <UART_SetConfig+0x27e>
 8003738:	2302      	movs	r3, #2
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800373e:	e00e      	b.n	800375e <UART_SetConfig+0x27e>
 8003740:	2304      	movs	r3, #4
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003746:	e00a      	b.n	800375e <UART_SetConfig+0x27e>
 8003748:	2308      	movs	r3, #8
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374e:	e006      	b.n	800375e <UART_SetConfig+0x27e>
 8003750:	2310      	movs	r3, #16
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e002      	b.n	800375e <UART_SetConfig+0x27e>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <UART_SetConfig+0x2e0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	f040 80a8 	bne.w	80038ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800376a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800376e:	2b08      	cmp	r3, #8
 8003770:	d834      	bhi.n	80037dc <UART_SetConfig+0x2fc>
 8003772:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <UART_SetConfig+0x298>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	0800379d 	.word	0x0800379d
 800377c:	080037dd 	.word	0x080037dd
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037ab 	.word	0x080037ab
 800378c:	080037dd 	.word	0x080037dd
 8003790:	080037dd 	.word	0x080037dd
 8003794:	080037dd 	.word	0x080037dd
 8003798:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800379c:	f7fe fb5e 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037a2:	e021      	b.n	80037e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <UART_SetConfig+0x2f8>)
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037a8:	e01e      	b.n	80037e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fae9 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80037ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037b0:	e01a      	b.n	80037e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037b8:	e016      	b.n	80037e8 <UART_SetConfig+0x308>
 80037ba:	bf00      	nop
 80037bc:	cfff69f3 	.word	0xcfff69f3
 80037c0:	40008000 	.word	0x40008000
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40004400 	.word	0x40004400
 80037d0:	40004800 	.word	0x40004800
 80037d4:	40004c00 	.word	0x40004c00
 80037d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 812a 	beq.w	8003a44 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	4a9e      	ldr	r2, [pc, #632]	@ (8003a70 <UART_SetConfig+0x590>)
 80037f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003802:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	429a      	cmp	r2, r3
 8003812:	d305      	bcc.n	8003820 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	d903      	bls.n	8003828 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003826:	e10d      	b.n	8003a44 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	2200      	movs	r2, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	4a8e      	ldr	r2, [pc, #568]	@ (8003a70 <UART_SetConfig+0x590>)
 8003836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800383a:	b29b      	uxth	r3, r3
 800383c:	2200      	movs	r2, #0
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800384a:	f7fc fce5 	bl	8000218 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	020b      	lsls	r3, r1, #8
 8003860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003864:	0202      	lsls	r2, r0, #8
 8003866:	6979      	ldr	r1, [r7, #20]
 8003868:	6849      	ldr	r1, [r1, #4]
 800386a:	0849      	lsrs	r1, r1, #1
 800386c:	2000      	movs	r0, #0
 800386e:	460c      	mov	r4, r1
 8003870:	4605      	mov	r5, r0
 8003872:	eb12 0804 	adds.w	r8, r2, r4
 8003876:	eb43 0905 	adc.w	r9, r3, r5
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	469a      	mov	sl, r3
 8003882:	4693      	mov	fp, r2
 8003884:	4652      	mov	r2, sl
 8003886:	465b      	mov	r3, fp
 8003888:	4640      	mov	r0, r8
 800388a:	4649      	mov	r1, r9
 800388c:	f7fc fcc4 	bl	8000218 <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4613      	mov	r3, r2
 8003896:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800389e:	d308      	bcc.n	80038b2 <UART_SetConfig+0x3d2>
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a6:	d204      	bcs.n	80038b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	e0c8      	b.n	8003a44 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038b8:	e0c4      	b.n	8003a44 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038c2:	d167      	bne.n	8003994 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80038c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d828      	bhi.n	800391e <UART_SetConfig+0x43e>
 80038cc:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <UART_SetConfig+0x3f4>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe fab0 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80038fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038fe:	e014      	b.n	800392a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe fac2 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8003904:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003906:	e010      	b.n	800392a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b5a      	ldr	r3, [pc, #360]	@ (8003a74 <UART_SetConfig+0x594>)
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800390c:	e00d      	b.n	800392a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7fe fa37 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003912:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003914:	e009      	b.n	800392a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800391c:	e005      	b.n	800392a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003928:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8089 	beq.w	8003a44 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	4a4e      	ldr	r2, [pc, #312]	@ (8003a70 <UART_SetConfig+0x590>)
 8003938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800393c:	461a      	mov	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	fbb3 f3f2 	udiv	r3, r3, r2
 8003944:	005a      	lsls	r2, r3, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	441a      	add	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	d916      	bls.n	800398c <UART_SetConfig+0x4ac>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003964:	d212      	bcs.n	800398c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f023 030f 	bic.w	r3, r3, #15
 800396e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	b29b      	uxth	r3, r3
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	b29a      	uxth	r2, r3
 800397c:	8bfb      	ldrh	r3, [r7, #30]
 800397e:	4313      	orrs	r3, r2
 8003980:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	8bfa      	ldrh	r2, [r7, #30]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	e05b      	b.n	8003a44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003992:	e057      	b.n	8003a44 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003994:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003998:	2b08      	cmp	r3, #8
 800399a:	d828      	bhi.n	80039ee <UART_SetConfig+0x50e>
 800399c:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <UART_SetConfig+0x4c4>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039df 	.word	0x080039df
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039ef 	.word	0x080039ef
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7fe fa48 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80039cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ce:	e014      	b.n	80039fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7fe fa5a 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 80039d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d6:	e010      	b.n	80039fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <UART_SetConfig+0x594>)
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe f9cf 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80039e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e4:	e009      	b.n	80039fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039ec:	e005      	b.n	80039fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039f8:	bf00      	nop
    }

    if (pclk != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	4a1a      	ldr	r2, [pc, #104]	@ (8003a70 <UART_SetConfig+0x590>)
 8003a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	441a      	add	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	2b0f      	cmp	r3, #15
 8003a28:	d909      	bls.n	8003a3e <UART_SetConfig+0x55e>
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a30:	d205      	bcs.n	8003a3e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e002      	b.n	8003a44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3730      	adds	r7, #48	@ 0x30
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	08004a50 	.word	0x08004a50
 8003a74:	00f42400 	.word	0x00f42400

08003a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b76:	d10a      	bne.n	8003b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b098      	sub	sp, #96	@ 0x60
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bcc:	f7fd f910 	bl	8000df0 <HAL_GetTick>
 8003bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d12f      	bne.n	8003c40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f88e 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d022      	beq.n	8003c40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e063      	b.n	8003d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d149      	bne.n	8003ce2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	2200      	movs	r2, #0
 8003c58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f857 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03c      	beq.n	8003ce2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	623b      	str	r3, [r7, #32]
   return(result);
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e6      	bne.n	8003c68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cba:	61fa      	str	r2, [r7, #28]
 8003cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e012      	b.n	8003d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3758      	adds	r7, #88	@ 0x58
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	e04f      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d04b      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fd f861 	bl	8000df0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e04e      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d037      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b80      	cmp	r3, #128	@ 0x80
 8003d56:	d034      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d031      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d110      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2208      	movs	r2, #8
 8003d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f838 	bl	8003dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e029      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9c:	d111      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f81e 	bl	8003dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d0a0      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b095      	sub	sp, #84	@ 0x54
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e6      	bne.n	8003df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e3      	bne.n	8003e24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d118      	bne.n	8003e96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e6      	bne.n	8003e64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003eaa:	bf00      	nop
 8003eac:	3754      	adds	r7, #84	@ 0x54
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UARTEx_DisableFifoMode+0x16>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e027      	b.n	8003f1c <HAL_UARTEx_DisableFifoMode+0x66>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	@ 0x24
 8003ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003efa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e02d      	b.n	8003f9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	@ 0x24
 8003f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f84f 	bl	8004020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e02d      	b.n	8004018 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	@ 0x24
 8003fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f811 	bl	8004020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004040:	e031      	b.n	80040a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004042:	2308      	movs	r3, #8
 8004044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004046:	2308      	movs	r3, #8
 8004048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	0e5b      	lsrs	r3, r3, #25
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	0f5b      	lsrs	r3, r3, #29
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800406a:	7bbb      	ldrb	r3, [r7, #14]
 800406c:	7b3a      	ldrb	r2, [r7, #12]
 800406e:	4911      	ldr	r1, [pc, #68]	@ (80040b4 <UARTEx_SetNbDataToProcess+0x94>)
 8004070:	5c8a      	ldrb	r2, [r1, r2]
 8004072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004076:	7b3a      	ldrb	r2, [r7, #12]
 8004078:	490f      	ldr	r1, [pc, #60]	@ (80040b8 <UARTEx_SetNbDataToProcess+0x98>)
 800407a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800407c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	7b7a      	ldrb	r2, [r7, #13]
 800408c:	4909      	ldr	r1, [pc, #36]	@ (80040b4 <UARTEx_SetNbDataToProcess+0x94>)
 800408e:	5c8a      	ldrb	r2, [r1, r2]
 8004090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004094:	7b7a      	ldrb	r2, [r7, #13]
 8004096:	4908      	ldr	r1, [pc, #32]	@ (80040b8 <UARTEx_SetNbDataToProcess+0x98>)
 8004098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800409a:	fb93 f3f2 	sdiv	r3, r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	08004a68 	.word	0x08004a68
 80040b8:	08004a70 	.word	0x08004a70

080040bc <std>:
 80040bc:	2300      	movs	r3, #0
 80040be:	b510      	push	{r4, lr}
 80040c0:	4604      	mov	r4, r0
 80040c2:	e9c0 3300 	strd	r3, r3, [r0]
 80040c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ca:	6083      	str	r3, [r0, #8]
 80040cc:	8181      	strh	r1, [r0, #12]
 80040ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80040d0:	81c2      	strh	r2, [r0, #14]
 80040d2:	6183      	str	r3, [r0, #24]
 80040d4:	4619      	mov	r1, r3
 80040d6:	2208      	movs	r2, #8
 80040d8:	305c      	adds	r0, #92	@ 0x5c
 80040da:	f000 f9e7 	bl	80044ac <memset>
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <std+0x58>)
 80040e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <std+0x5c>)
 80040e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040e6:	4b0d      	ldr	r3, [pc, #52]	@ (800411c <std+0x60>)
 80040e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <std+0x64>)
 80040ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80040ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <std+0x68>)
 80040f0:	6224      	str	r4, [r4, #32]
 80040f2:	429c      	cmp	r4, r3
 80040f4:	d006      	beq.n	8004104 <std+0x48>
 80040f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040fa:	4294      	cmp	r4, r2
 80040fc:	d002      	beq.n	8004104 <std+0x48>
 80040fe:	33d0      	adds	r3, #208	@ 0xd0
 8004100:	429c      	cmp	r4, r3
 8004102:	d105      	bne.n	8004110 <std+0x54>
 8004104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800410c:	f000 ba46 	b.w	800459c <__retarget_lock_init_recursive>
 8004110:	bd10      	pop	{r4, pc}
 8004112:	bf00      	nop
 8004114:	080042fd 	.word	0x080042fd
 8004118:	0800431f 	.word	0x0800431f
 800411c:	08004357 	.word	0x08004357
 8004120:	0800437b 	.word	0x0800437b
 8004124:	20000200 	.word	0x20000200

08004128 <stdio_exit_handler>:
 8004128:	4a02      	ldr	r2, [pc, #8]	@ (8004134 <stdio_exit_handler+0xc>)
 800412a:	4903      	ldr	r1, [pc, #12]	@ (8004138 <stdio_exit_handler+0x10>)
 800412c:	4803      	ldr	r0, [pc, #12]	@ (800413c <stdio_exit_handler+0x14>)
 800412e:	f000 b869 	b.w	8004204 <_fwalk_sglue>
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c
 8004138:	0800489d 	.word	0x0800489d
 800413c:	2000001c 	.word	0x2000001c

08004140 <cleanup_stdio>:
 8004140:	6841      	ldr	r1, [r0, #4]
 8004142:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <cleanup_stdio+0x34>)
 8004144:	4299      	cmp	r1, r3
 8004146:	b510      	push	{r4, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	d001      	beq.n	8004150 <cleanup_stdio+0x10>
 800414c:	f000 fba6 	bl	800489c <_fflush_r>
 8004150:	68a1      	ldr	r1, [r4, #8]
 8004152:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <cleanup_stdio+0x38>)
 8004154:	4299      	cmp	r1, r3
 8004156:	d002      	beq.n	800415e <cleanup_stdio+0x1e>
 8004158:	4620      	mov	r0, r4
 800415a:	f000 fb9f 	bl	800489c <_fflush_r>
 800415e:	68e1      	ldr	r1, [r4, #12]
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <cleanup_stdio+0x3c>)
 8004162:	4299      	cmp	r1, r3
 8004164:	d004      	beq.n	8004170 <cleanup_stdio+0x30>
 8004166:	4620      	mov	r0, r4
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800416c:	f000 bb96 	b.w	800489c <_fflush_r>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	bf00      	nop
 8004174:	20000200 	.word	0x20000200
 8004178:	20000268 	.word	0x20000268
 800417c:	200002d0 	.word	0x200002d0

08004180 <global_stdio_init.part.0>:
 8004180:	b510      	push	{r4, lr}
 8004182:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <global_stdio_init.part.0+0x30>)
 8004184:	4c0b      	ldr	r4, [pc, #44]	@ (80041b4 <global_stdio_init.part.0+0x34>)
 8004186:	4a0c      	ldr	r2, [pc, #48]	@ (80041b8 <global_stdio_init.part.0+0x38>)
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	4620      	mov	r0, r4
 800418c:	2200      	movs	r2, #0
 800418e:	2104      	movs	r1, #4
 8004190:	f7ff ff94 	bl	80040bc <std>
 8004194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004198:	2201      	movs	r2, #1
 800419a:	2109      	movs	r1, #9
 800419c:	f7ff ff8e 	bl	80040bc <std>
 80041a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041a4:	2202      	movs	r2, #2
 80041a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041aa:	2112      	movs	r1, #18
 80041ac:	f7ff bf86 	b.w	80040bc <std>
 80041b0:	20000338 	.word	0x20000338
 80041b4:	20000200 	.word	0x20000200
 80041b8:	08004129 	.word	0x08004129

080041bc <__sfp_lock_acquire>:
 80041bc:	4801      	ldr	r0, [pc, #4]	@ (80041c4 <__sfp_lock_acquire+0x8>)
 80041be:	f000 b9ee 	b.w	800459e <__retarget_lock_acquire_recursive>
 80041c2:	bf00      	nop
 80041c4:	20000341 	.word	0x20000341

080041c8 <__sfp_lock_release>:
 80041c8:	4801      	ldr	r0, [pc, #4]	@ (80041d0 <__sfp_lock_release+0x8>)
 80041ca:	f000 b9e9 	b.w	80045a0 <__retarget_lock_release_recursive>
 80041ce:	bf00      	nop
 80041d0:	20000341 	.word	0x20000341

080041d4 <__sinit>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4604      	mov	r4, r0
 80041d8:	f7ff fff0 	bl	80041bc <__sfp_lock_acquire>
 80041dc:	6a23      	ldr	r3, [r4, #32]
 80041de:	b11b      	cbz	r3, 80041e8 <__sinit+0x14>
 80041e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e4:	f7ff bff0 	b.w	80041c8 <__sfp_lock_release>
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <__sinit+0x28>)
 80041ea:	6223      	str	r3, [r4, #32]
 80041ec:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <__sinit+0x2c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f5      	bne.n	80041e0 <__sinit+0xc>
 80041f4:	f7ff ffc4 	bl	8004180 <global_stdio_init.part.0>
 80041f8:	e7f2      	b.n	80041e0 <__sinit+0xc>
 80041fa:	bf00      	nop
 80041fc:	08004141 	.word	0x08004141
 8004200:	20000338 	.word	0x20000338

08004204 <_fwalk_sglue>:
 8004204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004208:	4607      	mov	r7, r0
 800420a:	4688      	mov	r8, r1
 800420c:	4614      	mov	r4, r2
 800420e:	2600      	movs	r6, #0
 8004210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004214:	f1b9 0901 	subs.w	r9, r9, #1
 8004218:	d505      	bpl.n	8004226 <_fwalk_sglue+0x22>
 800421a:	6824      	ldr	r4, [r4, #0]
 800421c:	2c00      	cmp	r4, #0
 800421e:	d1f7      	bne.n	8004210 <_fwalk_sglue+0xc>
 8004220:	4630      	mov	r0, r6
 8004222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004226:	89ab      	ldrh	r3, [r5, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d907      	bls.n	800423c <_fwalk_sglue+0x38>
 800422c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004230:	3301      	adds	r3, #1
 8004232:	d003      	beq.n	800423c <_fwalk_sglue+0x38>
 8004234:	4629      	mov	r1, r5
 8004236:	4638      	mov	r0, r7
 8004238:	47c0      	blx	r8
 800423a:	4306      	orrs	r6, r0
 800423c:	3568      	adds	r5, #104	@ 0x68
 800423e:	e7e9      	b.n	8004214 <_fwalk_sglue+0x10>

08004240 <_puts_r>:
 8004240:	6a03      	ldr	r3, [r0, #32]
 8004242:	b570      	push	{r4, r5, r6, lr}
 8004244:	6884      	ldr	r4, [r0, #8]
 8004246:	4605      	mov	r5, r0
 8004248:	460e      	mov	r6, r1
 800424a:	b90b      	cbnz	r3, 8004250 <_puts_r+0x10>
 800424c:	f7ff ffc2 	bl	80041d4 <__sinit>
 8004250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004252:	07db      	lsls	r3, r3, #31
 8004254:	d405      	bmi.n	8004262 <_puts_r+0x22>
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	0598      	lsls	r0, r3, #22
 800425a:	d402      	bmi.n	8004262 <_puts_r+0x22>
 800425c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800425e:	f000 f99e 	bl	800459e <__retarget_lock_acquire_recursive>
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	0719      	lsls	r1, r3, #28
 8004266:	d502      	bpl.n	800426e <_puts_r+0x2e>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d135      	bne.n	80042da <_puts_r+0x9a>
 800426e:	4621      	mov	r1, r4
 8004270:	4628      	mov	r0, r5
 8004272:	f000 f8c5 	bl	8004400 <__swsetup_r>
 8004276:	b380      	cbz	r0, 80042da <_puts_r+0x9a>
 8004278:	f04f 35ff 	mov.w	r5, #4294967295
 800427c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800427e:	07da      	lsls	r2, r3, #31
 8004280:	d405      	bmi.n	800428e <_puts_r+0x4e>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	059b      	lsls	r3, r3, #22
 8004286:	d402      	bmi.n	800428e <_puts_r+0x4e>
 8004288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800428a:	f000 f989 	bl	80045a0 <__retarget_lock_release_recursive>
 800428e:	4628      	mov	r0, r5
 8004290:	bd70      	pop	{r4, r5, r6, pc}
 8004292:	2b00      	cmp	r3, #0
 8004294:	da04      	bge.n	80042a0 <_puts_r+0x60>
 8004296:	69a2      	ldr	r2, [r4, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	dc17      	bgt.n	80042cc <_puts_r+0x8c>
 800429c:	290a      	cmp	r1, #10
 800429e:	d015      	beq.n	80042cc <_puts_r+0x8c>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	7019      	strb	r1, [r3, #0]
 80042a8:	68a3      	ldr	r3, [r4, #8]
 80042aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042ae:	3b01      	subs	r3, #1
 80042b0:	60a3      	str	r3, [r4, #8]
 80042b2:	2900      	cmp	r1, #0
 80042b4:	d1ed      	bne.n	8004292 <_puts_r+0x52>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	da11      	bge.n	80042de <_puts_r+0x9e>
 80042ba:	4622      	mov	r2, r4
 80042bc:	210a      	movs	r1, #10
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f85f 	bl	8004382 <__swbuf_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d0d7      	beq.n	8004278 <_puts_r+0x38>
 80042c8:	250a      	movs	r5, #10
 80042ca:	e7d7      	b.n	800427c <_puts_r+0x3c>
 80042cc:	4622      	mov	r2, r4
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 f857 	bl	8004382 <__swbuf_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d1e7      	bne.n	80042a8 <_puts_r+0x68>
 80042d8:	e7ce      	b.n	8004278 <_puts_r+0x38>
 80042da:	3e01      	subs	r6, #1
 80042dc:	e7e4      	b.n	80042a8 <_puts_r+0x68>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	6022      	str	r2, [r4, #0]
 80042e4:	220a      	movs	r2, #10
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	e7ee      	b.n	80042c8 <_puts_r+0x88>
	...

080042ec <puts>:
 80042ec:	4b02      	ldr	r3, [pc, #8]	@ (80042f8 <puts+0xc>)
 80042ee:	4601      	mov	r1, r0
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	f7ff bfa5 	b.w	8004240 <_puts_r>
 80042f6:	bf00      	nop
 80042f8:	20000018 	.word	0x20000018

080042fc <__sread>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	460c      	mov	r4, r1
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	f000 f8fc 	bl	8004500 <_read_r>
 8004308:	2800      	cmp	r0, #0
 800430a:	bfab      	itete	ge
 800430c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800430e:	89a3      	ldrhlt	r3, [r4, #12]
 8004310:	181b      	addge	r3, r3, r0
 8004312:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004316:	bfac      	ite	ge
 8004318:	6563      	strge	r3, [r4, #84]	@ 0x54
 800431a:	81a3      	strhlt	r3, [r4, #12]
 800431c:	bd10      	pop	{r4, pc}

0800431e <__swrite>:
 800431e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	461f      	mov	r7, r3
 8004324:	898b      	ldrh	r3, [r1, #12]
 8004326:	05db      	lsls	r3, r3, #23
 8004328:	4605      	mov	r5, r0
 800432a:	460c      	mov	r4, r1
 800432c:	4616      	mov	r6, r2
 800432e:	d505      	bpl.n	800433c <__swrite+0x1e>
 8004330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004334:	2302      	movs	r3, #2
 8004336:	2200      	movs	r2, #0
 8004338:	f000 f8d0 	bl	80044dc <_lseek_r>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	4632      	mov	r2, r6
 800434a:	463b      	mov	r3, r7
 800434c:	4628      	mov	r0, r5
 800434e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	f000 b8e7 	b.w	8004524 <_write_r>

08004356 <__sseek>:
 8004356:	b510      	push	{r4, lr}
 8004358:	460c      	mov	r4, r1
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	f000 f8bd 	bl	80044dc <_lseek_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	bf15      	itete	ne
 8004368:	6560      	strne	r0, [r4, #84]	@ 0x54
 800436a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800436e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004372:	81a3      	strheq	r3, [r4, #12]
 8004374:	bf18      	it	ne
 8004376:	81a3      	strhne	r3, [r4, #12]
 8004378:	bd10      	pop	{r4, pc}

0800437a <__sclose>:
 800437a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437e:	f000 b89d 	b.w	80044bc <_close_r>

08004382 <__swbuf_r>:
 8004382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004384:	460e      	mov	r6, r1
 8004386:	4614      	mov	r4, r2
 8004388:	4605      	mov	r5, r0
 800438a:	b118      	cbz	r0, 8004394 <__swbuf_r+0x12>
 800438c:	6a03      	ldr	r3, [r0, #32]
 800438e:	b90b      	cbnz	r3, 8004394 <__swbuf_r+0x12>
 8004390:	f7ff ff20 	bl	80041d4 <__sinit>
 8004394:	69a3      	ldr	r3, [r4, #24]
 8004396:	60a3      	str	r3, [r4, #8]
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	071a      	lsls	r2, r3, #28
 800439c:	d501      	bpl.n	80043a2 <__swbuf_r+0x20>
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	b943      	cbnz	r3, 80043b4 <__swbuf_r+0x32>
 80043a2:	4621      	mov	r1, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f82b 	bl	8004400 <__swsetup_r>
 80043aa:	b118      	cbz	r0, 80043b4 <__swbuf_r+0x32>
 80043ac:	f04f 37ff 	mov.w	r7, #4294967295
 80043b0:	4638      	mov	r0, r7
 80043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	6922      	ldr	r2, [r4, #16]
 80043b8:	1a98      	subs	r0, r3, r2
 80043ba:	6963      	ldr	r3, [r4, #20]
 80043bc:	b2f6      	uxtb	r6, r6
 80043be:	4283      	cmp	r3, r0
 80043c0:	4637      	mov	r7, r6
 80043c2:	dc05      	bgt.n	80043d0 <__swbuf_r+0x4e>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4628      	mov	r0, r5
 80043c8:	f000 fa68 	bl	800489c <_fflush_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1ed      	bne.n	80043ac <__swbuf_r+0x2a>
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60a3      	str	r3, [r4, #8]
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	701e      	strb	r6, [r3, #0]
 80043de:	6962      	ldr	r2, [r4, #20]
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d004      	beq.n	80043f0 <__swbuf_r+0x6e>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	07db      	lsls	r3, r3, #31
 80043ea:	d5e1      	bpl.n	80043b0 <__swbuf_r+0x2e>
 80043ec:	2e0a      	cmp	r6, #10
 80043ee:	d1df      	bne.n	80043b0 <__swbuf_r+0x2e>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 fa52 	bl	800489c <_fflush_r>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d0d9      	beq.n	80043b0 <__swbuf_r+0x2e>
 80043fc:	e7d6      	b.n	80043ac <__swbuf_r+0x2a>
	...

08004400 <__swsetup_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4b29      	ldr	r3, [pc, #164]	@ (80044a8 <__swsetup_r+0xa8>)
 8004404:	4605      	mov	r5, r0
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	460c      	mov	r4, r1
 800440a:	b118      	cbz	r0, 8004414 <__swsetup_r+0x14>
 800440c:	6a03      	ldr	r3, [r0, #32]
 800440e:	b90b      	cbnz	r3, 8004414 <__swsetup_r+0x14>
 8004410:	f7ff fee0 	bl	80041d4 <__sinit>
 8004414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004418:	0719      	lsls	r1, r3, #28
 800441a:	d422      	bmi.n	8004462 <__swsetup_r+0x62>
 800441c:	06da      	lsls	r2, r3, #27
 800441e:	d407      	bmi.n	8004430 <__swsetup_r+0x30>
 8004420:	2209      	movs	r2, #9
 8004422:	602a      	str	r2, [r5, #0]
 8004424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	e033      	b.n	8004498 <__swsetup_r+0x98>
 8004430:	0758      	lsls	r0, r3, #29
 8004432:	d512      	bpl.n	800445a <__swsetup_r+0x5a>
 8004434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004436:	b141      	cbz	r1, 800444a <__swsetup_r+0x4a>
 8004438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800443c:	4299      	cmp	r1, r3
 800443e:	d002      	beq.n	8004446 <__swsetup_r+0x46>
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f8af 	bl	80045a4 <_free_r>
 8004446:	2300      	movs	r3, #0
 8004448:	6363      	str	r3, [r4, #52]	@ 0x34
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	2300      	movs	r3, #0
 8004454:	6063      	str	r3, [r4, #4]
 8004456:	6923      	ldr	r3, [r4, #16]
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	f043 0308 	orr.w	r3, r3, #8
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	b94b      	cbnz	r3, 800447a <__swsetup_r+0x7a>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800446c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004470:	d003      	beq.n	800447a <__swsetup_r+0x7a>
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 fa5f 	bl	8004938 <__smakebuf_r>
 800447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447e:	f013 0201 	ands.w	r2, r3, #1
 8004482:	d00a      	beq.n	800449a <__swsetup_r+0x9a>
 8004484:	2200      	movs	r2, #0
 8004486:	60a2      	str	r2, [r4, #8]
 8004488:	6962      	ldr	r2, [r4, #20]
 800448a:	4252      	negs	r2, r2
 800448c:	61a2      	str	r2, [r4, #24]
 800448e:	6922      	ldr	r2, [r4, #16]
 8004490:	b942      	cbnz	r2, 80044a4 <__swsetup_r+0xa4>
 8004492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004496:	d1c5      	bne.n	8004424 <__swsetup_r+0x24>
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	0799      	lsls	r1, r3, #30
 800449c:	bf58      	it	pl
 800449e:	6962      	ldrpl	r2, [r4, #20]
 80044a0:	60a2      	str	r2, [r4, #8]
 80044a2:	e7f4      	b.n	800448e <__swsetup_r+0x8e>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e7f7      	b.n	8004498 <__swsetup_r+0x98>
 80044a8:	20000018 	.word	0x20000018

080044ac <memset>:
 80044ac:	4402      	add	r2, r0
 80044ae:	4603      	mov	r3, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d100      	bne.n	80044b6 <memset+0xa>
 80044b4:	4770      	bx	lr
 80044b6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ba:	e7f9      	b.n	80044b0 <memset+0x4>

080044bc <_close_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4d06      	ldr	r5, [pc, #24]	@ (80044d8 <_close_r+0x1c>)
 80044c0:	2300      	movs	r3, #0
 80044c2:	4604      	mov	r4, r0
 80044c4:	4608      	mov	r0, r1
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	f7fc fb88 	bl	8000bdc <_close>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_close_r+0x1a>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_close_r+0x1a>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	2000033c 	.word	0x2000033c

080044dc <_lseek_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d07      	ldr	r5, [pc, #28]	@ (80044fc <_lseek_r+0x20>)
 80044e0:	4604      	mov	r4, r0
 80044e2:	4608      	mov	r0, r1
 80044e4:	4611      	mov	r1, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	602a      	str	r2, [r5, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fc fb9d 	bl	8000c2a <_lseek>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_lseek_r+0x1e>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_lseek_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	2000033c 	.word	0x2000033c

08004500 <_read_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	@ (8004520 <_read_r+0x20>)
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	2200      	movs	r2, #0
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f7fc fb2b 	bl	8000b6a <_read>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_read_r+0x1e>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_read_r+0x1e>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	2000033c 	.word	0x2000033c

08004524 <_write_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d07      	ldr	r5, [pc, #28]	@ (8004544 <_write_r+0x20>)
 8004528:	4604      	mov	r4, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	602a      	str	r2, [r5, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fc fb36 	bl	8000ba4 <_write>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_write_r+0x1e>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_write_r+0x1e>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	2000033c 	.word	0x2000033c

08004548 <__errno>:
 8004548:	4b01      	ldr	r3, [pc, #4]	@ (8004550 <__errno+0x8>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000018 	.word	0x20000018

08004554 <__libc_init_array>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4d0d      	ldr	r5, [pc, #52]	@ (800458c <__libc_init_array+0x38>)
 8004558:	4c0d      	ldr	r4, [pc, #52]	@ (8004590 <__libc_init_array+0x3c>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	2600      	movs	r6, #0
 8004560:	42a6      	cmp	r6, r4
 8004562:	d109      	bne.n	8004578 <__libc_init_array+0x24>
 8004564:	4d0b      	ldr	r5, [pc, #44]	@ (8004594 <__libc_init_array+0x40>)
 8004566:	4c0c      	ldr	r4, [pc, #48]	@ (8004598 <__libc_init_array+0x44>)
 8004568:	f000 fa54 	bl	8004a14 <_init>
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	2600      	movs	r6, #0
 8004572:	42a6      	cmp	r6, r4
 8004574:	d105      	bne.n	8004582 <__libc_init_array+0x2e>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	f855 3b04 	ldr.w	r3, [r5], #4
 800457c:	4798      	blx	r3
 800457e:	3601      	adds	r6, #1
 8004580:	e7ee      	b.n	8004560 <__libc_init_array+0xc>
 8004582:	f855 3b04 	ldr.w	r3, [r5], #4
 8004586:	4798      	blx	r3
 8004588:	3601      	adds	r6, #1
 800458a:	e7f2      	b.n	8004572 <__libc_init_array+0x1e>
 800458c:	08004a80 	.word	0x08004a80
 8004590:	08004a80 	.word	0x08004a80
 8004594:	08004a80 	.word	0x08004a80
 8004598:	08004a84 	.word	0x08004a84

0800459c <__retarget_lock_init_recursive>:
 800459c:	4770      	bx	lr

0800459e <__retarget_lock_acquire_recursive>:
 800459e:	4770      	bx	lr

080045a0 <__retarget_lock_release_recursive>:
 80045a0:	4770      	bx	lr
	...

080045a4 <_free_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4605      	mov	r5, r0
 80045a8:	2900      	cmp	r1, #0
 80045aa:	d041      	beq.n	8004630 <_free_r+0x8c>
 80045ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b0:	1f0c      	subs	r4, r1, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bfb8      	it	lt
 80045b6:	18e4      	addlt	r4, r4, r3
 80045b8:	f000 f8e0 	bl	800477c <__malloc_lock>
 80045bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004634 <_free_r+0x90>)
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	b933      	cbnz	r3, 80045d0 <_free_r+0x2c>
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	6014      	str	r4, [r2, #0]
 80045c6:	4628      	mov	r0, r5
 80045c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045cc:	f000 b8dc 	b.w	8004788 <__malloc_unlock>
 80045d0:	42a3      	cmp	r3, r4
 80045d2:	d908      	bls.n	80045e6 <_free_r+0x42>
 80045d4:	6820      	ldr	r0, [r4, #0]
 80045d6:	1821      	adds	r1, r4, r0
 80045d8:	428b      	cmp	r3, r1
 80045da:	bf01      	itttt	eq
 80045dc:	6819      	ldreq	r1, [r3, #0]
 80045de:	685b      	ldreq	r3, [r3, #4]
 80045e0:	1809      	addeq	r1, r1, r0
 80045e2:	6021      	streq	r1, [r4, #0]
 80045e4:	e7ed      	b.n	80045c2 <_free_r+0x1e>
 80045e6:	461a      	mov	r2, r3
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b10b      	cbz	r3, 80045f0 <_free_r+0x4c>
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	d9fa      	bls.n	80045e6 <_free_r+0x42>
 80045f0:	6811      	ldr	r1, [r2, #0]
 80045f2:	1850      	adds	r0, r2, r1
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d10b      	bne.n	8004610 <_free_r+0x6c>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	4401      	add	r1, r0
 80045fc:	1850      	adds	r0, r2, r1
 80045fe:	4283      	cmp	r3, r0
 8004600:	6011      	str	r1, [r2, #0]
 8004602:	d1e0      	bne.n	80045c6 <_free_r+0x22>
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	6053      	str	r3, [r2, #4]
 800460a:	4408      	add	r0, r1
 800460c:	6010      	str	r0, [r2, #0]
 800460e:	e7da      	b.n	80045c6 <_free_r+0x22>
 8004610:	d902      	bls.n	8004618 <_free_r+0x74>
 8004612:	230c      	movs	r3, #12
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	e7d6      	b.n	80045c6 <_free_r+0x22>
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	1821      	adds	r1, r4, r0
 800461c:	428b      	cmp	r3, r1
 800461e:	bf04      	itt	eq
 8004620:	6819      	ldreq	r1, [r3, #0]
 8004622:	685b      	ldreq	r3, [r3, #4]
 8004624:	6063      	str	r3, [r4, #4]
 8004626:	bf04      	itt	eq
 8004628:	1809      	addeq	r1, r1, r0
 800462a:	6021      	streq	r1, [r4, #0]
 800462c:	6054      	str	r4, [r2, #4]
 800462e:	e7ca      	b.n	80045c6 <_free_r+0x22>
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	20000348 	.word	0x20000348

08004638 <sbrk_aligned>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4e0f      	ldr	r6, [pc, #60]	@ (8004678 <sbrk_aligned+0x40>)
 800463c:	460c      	mov	r4, r1
 800463e:	6831      	ldr	r1, [r6, #0]
 8004640:	4605      	mov	r5, r0
 8004642:	b911      	cbnz	r1, 800464a <sbrk_aligned+0x12>
 8004644:	f000 f9d6 	bl	80049f4 <_sbrk_r>
 8004648:	6030      	str	r0, [r6, #0]
 800464a:	4621      	mov	r1, r4
 800464c:	4628      	mov	r0, r5
 800464e:	f000 f9d1 	bl	80049f4 <_sbrk_r>
 8004652:	1c43      	adds	r3, r0, #1
 8004654:	d103      	bne.n	800465e <sbrk_aligned+0x26>
 8004656:	f04f 34ff 	mov.w	r4, #4294967295
 800465a:	4620      	mov	r0, r4
 800465c:	bd70      	pop	{r4, r5, r6, pc}
 800465e:	1cc4      	adds	r4, r0, #3
 8004660:	f024 0403 	bic.w	r4, r4, #3
 8004664:	42a0      	cmp	r0, r4
 8004666:	d0f8      	beq.n	800465a <sbrk_aligned+0x22>
 8004668:	1a21      	subs	r1, r4, r0
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f9c2 	bl	80049f4 <_sbrk_r>
 8004670:	3001      	adds	r0, #1
 8004672:	d1f2      	bne.n	800465a <sbrk_aligned+0x22>
 8004674:	e7ef      	b.n	8004656 <sbrk_aligned+0x1e>
 8004676:	bf00      	nop
 8004678:	20000344 	.word	0x20000344

0800467c <_malloc_r>:
 800467c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004680:	1ccd      	adds	r5, r1, #3
 8004682:	f025 0503 	bic.w	r5, r5, #3
 8004686:	3508      	adds	r5, #8
 8004688:	2d0c      	cmp	r5, #12
 800468a:	bf38      	it	cc
 800468c:	250c      	movcc	r5, #12
 800468e:	2d00      	cmp	r5, #0
 8004690:	4606      	mov	r6, r0
 8004692:	db01      	blt.n	8004698 <_malloc_r+0x1c>
 8004694:	42a9      	cmp	r1, r5
 8004696:	d904      	bls.n	80046a2 <_malloc_r+0x26>
 8004698:	230c      	movs	r3, #12
 800469a:	6033      	str	r3, [r6, #0]
 800469c:	2000      	movs	r0, #0
 800469e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004778 <_malloc_r+0xfc>
 80046a6:	f000 f869 	bl	800477c <__malloc_lock>
 80046aa:	f8d8 3000 	ldr.w	r3, [r8]
 80046ae:	461c      	mov	r4, r3
 80046b0:	bb44      	cbnz	r4, 8004704 <_malloc_r+0x88>
 80046b2:	4629      	mov	r1, r5
 80046b4:	4630      	mov	r0, r6
 80046b6:	f7ff ffbf 	bl	8004638 <sbrk_aligned>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	4604      	mov	r4, r0
 80046be:	d158      	bne.n	8004772 <_malloc_r+0xf6>
 80046c0:	f8d8 4000 	ldr.w	r4, [r8]
 80046c4:	4627      	mov	r7, r4
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	d143      	bne.n	8004752 <_malloc_r+0xd6>
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d04b      	beq.n	8004766 <_malloc_r+0xea>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	4639      	mov	r1, r7
 80046d2:	4630      	mov	r0, r6
 80046d4:	eb04 0903 	add.w	r9, r4, r3
 80046d8:	f000 f98c 	bl	80049f4 <_sbrk_r>
 80046dc:	4581      	cmp	r9, r0
 80046de:	d142      	bne.n	8004766 <_malloc_r+0xea>
 80046e0:	6821      	ldr	r1, [r4, #0]
 80046e2:	1a6d      	subs	r5, r5, r1
 80046e4:	4629      	mov	r1, r5
 80046e6:	4630      	mov	r0, r6
 80046e8:	f7ff ffa6 	bl	8004638 <sbrk_aligned>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d03a      	beq.n	8004766 <_malloc_r+0xea>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	442b      	add	r3, r5
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	f8d8 3000 	ldr.w	r3, [r8]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	bb62      	cbnz	r2, 8004758 <_malloc_r+0xdc>
 80046fe:	f8c8 7000 	str.w	r7, [r8]
 8004702:	e00f      	b.n	8004724 <_malloc_r+0xa8>
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	1b52      	subs	r2, r2, r5
 8004708:	d420      	bmi.n	800474c <_malloc_r+0xd0>
 800470a:	2a0b      	cmp	r2, #11
 800470c:	d917      	bls.n	800473e <_malloc_r+0xc2>
 800470e:	1961      	adds	r1, r4, r5
 8004710:	42a3      	cmp	r3, r4
 8004712:	6025      	str	r5, [r4, #0]
 8004714:	bf18      	it	ne
 8004716:	6059      	strne	r1, [r3, #4]
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	bf08      	it	eq
 800471c:	f8c8 1000 	streq.w	r1, [r8]
 8004720:	5162      	str	r2, [r4, r5]
 8004722:	604b      	str	r3, [r1, #4]
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f82f 	bl	8004788 <__malloc_unlock>
 800472a:	f104 000b 	add.w	r0, r4, #11
 800472e:	1d23      	adds	r3, r4, #4
 8004730:	f020 0007 	bic.w	r0, r0, #7
 8004734:	1ac2      	subs	r2, r0, r3
 8004736:	bf1c      	itt	ne
 8004738:	1a1b      	subne	r3, r3, r0
 800473a:	50a3      	strne	r3, [r4, r2]
 800473c:	e7af      	b.n	800469e <_malloc_r+0x22>
 800473e:	6862      	ldr	r2, [r4, #4]
 8004740:	42a3      	cmp	r3, r4
 8004742:	bf0c      	ite	eq
 8004744:	f8c8 2000 	streq.w	r2, [r8]
 8004748:	605a      	strne	r2, [r3, #4]
 800474a:	e7eb      	b.n	8004724 <_malloc_r+0xa8>
 800474c:	4623      	mov	r3, r4
 800474e:	6864      	ldr	r4, [r4, #4]
 8004750:	e7ae      	b.n	80046b0 <_malloc_r+0x34>
 8004752:	463c      	mov	r4, r7
 8004754:	687f      	ldr	r7, [r7, #4]
 8004756:	e7b6      	b.n	80046c6 <_malloc_r+0x4a>
 8004758:	461a      	mov	r2, r3
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	42a3      	cmp	r3, r4
 800475e:	d1fb      	bne.n	8004758 <_malloc_r+0xdc>
 8004760:	2300      	movs	r3, #0
 8004762:	6053      	str	r3, [r2, #4]
 8004764:	e7de      	b.n	8004724 <_malloc_r+0xa8>
 8004766:	230c      	movs	r3, #12
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f80c 	bl	8004788 <__malloc_unlock>
 8004770:	e794      	b.n	800469c <_malloc_r+0x20>
 8004772:	6005      	str	r5, [r0, #0]
 8004774:	e7d6      	b.n	8004724 <_malloc_r+0xa8>
 8004776:	bf00      	nop
 8004778:	20000348 	.word	0x20000348

0800477c <__malloc_lock>:
 800477c:	4801      	ldr	r0, [pc, #4]	@ (8004784 <__malloc_lock+0x8>)
 800477e:	f7ff bf0e 	b.w	800459e <__retarget_lock_acquire_recursive>
 8004782:	bf00      	nop
 8004784:	20000340 	.word	0x20000340

08004788 <__malloc_unlock>:
 8004788:	4801      	ldr	r0, [pc, #4]	@ (8004790 <__malloc_unlock+0x8>)
 800478a:	f7ff bf09 	b.w	80045a0 <__retarget_lock_release_recursive>
 800478e:	bf00      	nop
 8004790:	20000340 	.word	0x20000340

08004794 <__sflush_r>:
 8004794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479c:	0716      	lsls	r6, r2, #28
 800479e:	4605      	mov	r5, r0
 80047a0:	460c      	mov	r4, r1
 80047a2:	d454      	bmi.n	800484e <__sflush_r+0xba>
 80047a4:	684b      	ldr	r3, [r1, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dc02      	bgt.n	80047b0 <__sflush_r+0x1c>
 80047aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	dd48      	ble.n	8004842 <__sflush_r+0xae>
 80047b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	d045      	beq.n	8004842 <__sflush_r+0xae>
 80047b6:	2300      	movs	r3, #0
 80047b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047bc:	682f      	ldr	r7, [r5, #0]
 80047be:	6a21      	ldr	r1, [r4, #32]
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	d030      	beq.n	8004826 <__sflush_r+0x92>
 80047c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	0759      	lsls	r1, r3, #29
 80047ca:	d505      	bpl.n	80047d8 <__sflush_r+0x44>
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047d2:	b10b      	cbz	r3, 80047d8 <__sflush_r+0x44>
 80047d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047dc:	6a21      	ldr	r1, [r4, #32]
 80047de:	4628      	mov	r0, r5
 80047e0:	47b0      	blx	r6
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	d106      	bne.n	80047f6 <__sflush_r+0x62>
 80047e8:	6829      	ldr	r1, [r5, #0]
 80047ea:	291d      	cmp	r1, #29
 80047ec:	d82b      	bhi.n	8004846 <__sflush_r+0xb2>
 80047ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004898 <__sflush_r+0x104>)
 80047f0:	410a      	asrs	r2, r1
 80047f2:	07d6      	lsls	r6, r2, #31
 80047f4:	d427      	bmi.n	8004846 <__sflush_r+0xb2>
 80047f6:	2200      	movs	r2, #0
 80047f8:	6062      	str	r2, [r4, #4]
 80047fa:	04d9      	lsls	r1, r3, #19
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	d504      	bpl.n	800480c <__sflush_r+0x78>
 8004802:	1c42      	adds	r2, r0, #1
 8004804:	d101      	bne.n	800480a <__sflush_r+0x76>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	b903      	cbnz	r3, 800480c <__sflush_r+0x78>
 800480a:	6560      	str	r0, [r4, #84]	@ 0x54
 800480c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800480e:	602f      	str	r7, [r5, #0]
 8004810:	b1b9      	cbz	r1, 8004842 <__sflush_r+0xae>
 8004812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004816:	4299      	cmp	r1, r3
 8004818:	d002      	beq.n	8004820 <__sflush_r+0x8c>
 800481a:	4628      	mov	r0, r5
 800481c:	f7ff fec2 	bl	80045a4 <_free_r>
 8004820:	2300      	movs	r3, #0
 8004822:	6363      	str	r3, [r4, #52]	@ 0x34
 8004824:	e00d      	b.n	8004842 <__sflush_r+0xae>
 8004826:	2301      	movs	r3, #1
 8004828:	4628      	mov	r0, r5
 800482a:	47b0      	blx	r6
 800482c:	4602      	mov	r2, r0
 800482e:	1c50      	adds	r0, r2, #1
 8004830:	d1c9      	bne.n	80047c6 <__sflush_r+0x32>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0c6      	beq.n	80047c6 <__sflush_r+0x32>
 8004838:	2b1d      	cmp	r3, #29
 800483a:	d001      	beq.n	8004840 <__sflush_r+0xac>
 800483c:	2b16      	cmp	r3, #22
 800483e:	d11e      	bne.n	800487e <__sflush_r+0xea>
 8004840:	602f      	str	r7, [r5, #0]
 8004842:	2000      	movs	r0, #0
 8004844:	e022      	b.n	800488c <__sflush_r+0xf8>
 8004846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800484a:	b21b      	sxth	r3, r3
 800484c:	e01b      	b.n	8004886 <__sflush_r+0xf2>
 800484e:	690f      	ldr	r7, [r1, #16]
 8004850:	2f00      	cmp	r7, #0
 8004852:	d0f6      	beq.n	8004842 <__sflush_r+0xae>
 8004854:	0793      	lsls	r3, r2, #30
 8004856:	680e      	ldr	r6, [r1, #0]
 8004858:	bf08      	it	eq
 800485a:	694b      	ldreq	r3, [r1, #20]
 800485c:	600f      	str	r7, [r1, #0]
 800485e:	bf18      	it	ne
 8004860:	2300      	movne	r3, #0
 8004862:	eba6 0807 	sub.w	r8, r6, r7
 8004866:	608b      	str	r3, [r1, #8]
 8004868:	f1b8 0f00 	cmp.w	r8, #0
 800486c:	dde9      	ble.n	8004842 <__sflush_r+0xae>
 800486e:	6a21      	ldr	r1, [r4, #32]
 8004870:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004872:	4643      	mov	r3, r8
 8004874:	463a      	mov	r2, r7
 8004876:	4628      	mov	r0, r5
 8004878:	47b0      	blx	r6
 800487a:	2800      	cmp	r0, #0
 800487c:	dc08      	bgt.n	8004890 <__sflush_r+0xfc>
 800487e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004886:	81a3      	strh	r3, [r4, #12]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004890:	4407      	add	r7, r0
 8004892:	eba8 0800 	sub.w	r8, r8, r0
 8004896:	e7e7      	b.n	8004868 <__sflush_r+0xd4>
 8004898:	dfbffffe 	.word	0xdfbffffe

0800489c <_fflush_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	4605      	mov	r5, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	b913      	cbnz	r3, 80048ac <_fflush_r+0x10>
 80048a6:	2500      	movs	r5, #0
 80048a8:	4628      	mov	r0, r5
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	b118      	cbz	r0, 80048b6 <_fflush_r+0x1a>
 80048ae:	6a03      	ldr	r3, [r0, #32]
 80048b0:	b90b      	cbnz	r3, 80048b6 <_fflush_r+0x1a>
 80048b2:	f7ff fc8f 	bl	80041d4 <__sinit>
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f3      	beq.n	80048a6 <_fflush_r+0xa>
 80048be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048c0:	07d0      	lsls	r0, r2, #31
 80048c2:	d404      	bmi.n	80048ce <_fflush_r+0x32>
 80048c4:	0599      	lsls	r1, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_fflush_r+0x32>
 80048c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048ca:	f7ff fe68 	bl	800459e <__retarget_lock_acquire_recursive>
 80048ce:	4628      	mov	r0, r5
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7ff ff5f 	bl	8004794 <__sflush_r>
 80048d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048d8:	07da      	lsls	r2, r3, #31
 80048da:	4605      	mov	r5, r0
 80048dc:	d4e4      	bmi.n	80048a8 <_fflush_r+0xc>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	d4e1      	bmi.n	80048a8 <_fflush_r+0xc>
 80048e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048e6:	f7ff fe5b 	bl	80045a0 <__retarget_lock_release_recursive>
 80048ea:	e7dd      	b.n	80048a8 <_fflush_r+0xc>

080048ec <__swhatbuf_r>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	460c      	mov	r4, r1
 80048f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f4:	2900      	cmp	r1, #0
 80048f6:	b096      	sub	sp, #88	@ 0x58
 80048f8:	4615      	mov	r5, r2
 80048fa:	461e      	mov	r6, r3
 80048fc:	da0d      	bge.n	800491a <__swhatbuf_r+0x2e>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	bf14      	ite	ne
 800490a:	2340      	movne	r3, #64	@ 0x40
 800490c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004910:	2000      	movs	r0, #0
 8004912:	6031      	str	r1, [r6, #0]
 8004914:	602b      	str	r3, [r5, #0]
 8004916:	b016      	add	sp, #88	@ 0x58
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	466a      	mov	r2, sp
 800491c:	f000 f848 	bl	80049b0 <_fstat_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	dbec      	blt.n	80048fe <__swhatbuf_r+0x12>
 8004924:	9901      	ldr	r1, [sp, #4]
 8004926:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800492a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800492e:	4259      	negs	r1, r3
 8004930:	4159      	adcs	r1, r3
 8004932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004936:	e7eb      	b.n	8004910 <__swhatbuf_r+0x24>

08004938 <__smakebuf_r>:
 8004938:	898b      	ldrh	r3, [r1, #12]
 800493a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800493c:	079d      	lsls	r5, r3, #30
 800493e:	4606      	mov	r6, r0
 8004940:	460c      	mov	r4, r1
 8004942:	d507      	bpl.n	8004954 <__smakebuf_r+0x1c>
 8004944:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	6123      	str	r3, [r4, #16]
 800494c:	2301      	movs	r3, #1
 800494e:	6163      	str	r3, [r4, #20]
 8004950:	b003      	add	sp, #12
 8004952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004954:	ab01      	add	r3, sp, #4
 8004956:	466a      	mov	r2, sp
 8004958:	f7ff ffc8 	bl	80048ec <__swhatbuf_r>
 800495c:	9f00      	ldr	r7, [sp, #0]
 800495e:	4605      	mov	r5, r0
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff fe8a 	bl	800467c <_malloc_r>
 8004968:	b948      	cbnz	r0, 800497e <__smakebuf_r+0x46>
 800496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496e:	059a      	lsls	r2, r3, #22
 8004970:	d4ee      	bmi.n	8004950 <__smakebuf_r+0x18>
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	e7e2      	b.n	8004944 <__smakebuf_r+0xc>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	6020      	str	r0, [r4, #0]
 8004982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	9b01      	ldr	r3, [sp, #4]
 800498a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800498e:	b15b      	cbz	r3, 80049a8 <__smakebuf_r+0x70>
 8004990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f81d 	bl	80049d4 <_isatty_r>
 800499a:	b128      	cbz	r0, 80049a8 <__smakebuf_r+0x70>
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	431d      	orrs	r5, r3
 80049ac:	81a5      	strh	r5, [r4, #12]
 80049ae:	e7cf      	b.n	8004950 <__smakebuf_r+0x18>

080049b0 <_fstat_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d07      	ldr	r5, [pc, #28]	@ (80049d0 <_fstat_r+0x20>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	f7fc f919 	bl	8000bf4 <_fstat>
 80049c2:	1c43      	adds	r3, r0, #1
 80049c4:	d102      	bne.n	80049cc <_fstat_r+0x1c>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	b103      	cbz	r3, 80049cc <_fstat_r+0x1c>
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	2000033c 	.word	0x2000033c

080049d4 <_isatty_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d06      	ldr	r5, [pc, #24]	@ (80049f0 <_isatty_r+0x1c>)
 80049d8:	2300      	movs	r3, #0
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7fc f918 	bl	8000c14 <_isatty>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_isatty_r+0x1a>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_isatty_r+0x1a>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	2000033c 	.word	0x2000033c

080049f4 <_sbrk_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d06      	ldr	r5, [pc, #24]	@ (8004a10 <_sbrk_r+0x1c>)
 80049f8:	2300      	movs	r3, #0
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	f7fc f920 	bl	8000c44 <_sbrk>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_sbrk_r+0x1a>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_sbrk_r+0x1a>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	2000033c 	.word	0x2000033c

08004a14 <_init>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr

08004a20 <_fini>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr
